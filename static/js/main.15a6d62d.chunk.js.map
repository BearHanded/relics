{"version":3,"sources":["core/game-state.ts","core/saveService.ts","economy/transactions/studentTransaction.ts","economy/jobAssignments.ts","shared/relicsButton.tsx","panels/relicPanel.tsx","layout/theme-context.ts","panels/settings.tsx","core/journal.ts","config/constants.ts","core/event-manager.ts","core/game-clock.ts","panels/adventureLog.tsx","panels/resourcePanel.tsx","layout/navButton.tsx","layout/panelSelector.tsx","core/corePanel.tsx","app.tsx","serviceWorker.ts","index.tsx"],"names":["GameState","resourceState","ResourceState","jobAssignments","JobAssignments","journalState","JournalState","saveTime","Date","settings","SettingsState","achievements","Achievements","relics","relicGenerator","students","money","gatherRelics","entries","darkMode","saveGameExists","localStorage","getItem","loadSave","string","save","JSON","parse","atob","newSave","saveGame","gameState","setItem","btoa","stringify","StudentTransaction","updateClock","amount","this","isValidPurchase","currCost","getCost","purchaseAmount","sum","theoreticalAmt","i","countAvailableStudents","assignedStudents","RelicsButton","className","props","disabled","clickFunc","onClick","children","React","Component","RelicPanel","studentTransaction","assignGatherers","removeGatherers","onAddCurrency","onPurchase","availableStudents","assignGather","removeGather","data-tip","data-for","id","place","effect","themes","light","themeClass","dark","ThemeContext","createContext","theme","toggleTheme","Settings","onSave","onClearSave","Consumer","onToggleTheme","toString","addJournalEntry","entry","push","length","shift","randomEvent","diceRoll","Math","floor","random","console","log","GameClock","onTick","saveClockId","resourceClockId","tickRatio","emitTick","maxTicks","tickNumber","setInterval","updateState","TICK_SPEED","newState","clearInterval","tick","AdventureLog","clearLog","entryList","reverse","map","ResourcePanel","toFixed","NavButton","selected","PanelSelector","onChangePanel","CorePanel","clock","state","activePanel","setState","currencyName","currencyAmount","purchaseType","commitTransaction","panelKey","clearClock","location","reload","clearSave","addCurrency","makePurchase","changeActivePanel","App","Provider","value","Boolean","window","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.15a6d62d.chunk.js","sourcesContent":["export class GameState {\n    resourceState: ResourceState = new ResourceState();\n    jobAssignments: JobAssignments = new JobAssignments();\n    journalState: JournalState = new JournalState();\n    saveTime: Date = new Date();\n    settings: SettingsState = new SettingsState();\n    achievements: Achievements = new Achievements();\n}\n\nexport class ResourceState {\n    relics: number = 0;\n    relicGenerator: number = 0;\n    students: number = 0;\n    money: number = 0;\n}\n\nexport class JobAssignments {\n    gatherRelics: number = 0;\n}\n\nexport class JournalState {\n    entries: string[] = [\"Where am I?\"];\n}\n\nexport class SettingsState {\n    darkMode: boolean = false;\n}\n\nexport class Achievements {\n\n}","import {GameState} from \"./game-state\";\n\nexport function saveGameExists() {\n    return !!localStorage.getItem(\"RelicsSave\");\n}\n\nexport function loadSave() {\n    const string = localStorage.getItem(\"RelicsSave\");\n    const save =  string ? JSON.parse(atob(string)) : null;\n    const merged = {...new GameState(), ...save};\n    return merged;\n}\n\nexport function newSave(): GameState {\n    return new GameState();\n}\n\nexport function saveGame(gameState: GameState) {\n    gameState.saveTime = new Date();\n    localStorage.setItem(\"RelicsSave\", btoa(JSON.stringify(gameState)));\n}\n\n\nexport function exportSave(gameState: GameState) {\n    saveGame(gameState);\n    // TODO: export\n}\n","import {ITransaction } from \"./ITransaction\";\nimport {GameState} from \"../../core/game-state\";\n\nexport class StudentTransaction implements ITransaction {\n    updateClock = false;\n\n    commitTransaction(gameState: GameState, amount: number): GameState {\n        if(this.isValidPurchase(gameState, amount)) {\n            const currCost = this.getCost(gameState, amount);\n\n            gameState.resourceState.relics -= currCost;\n            gameState.resourceState.students += amount;\n        }\n        return gameState;\n    }\n\n    isValidPurchase(gameState: GameState, amount: number): boolean {\n        const currCost = this.getCost(gameState, amount);\n\n        return gameState.resourceState.relics >= currCost;\n    }\n\n    getCost(gameState: GameState, purchaseAmount: number) {\n        let sum = 0;\n        let theoreticalAmt = gameState.resourceState.students || 0;\n        for (let i = 0; i < purchaseAmount; i++) {\n            sum += 25 + theoreticalAmt * 10;\n            theoreticalAmt++;\n        }\n        return sum;\n    }\n}\n","import {GameState} from \"../core/game-state\";\n\nexport function assignGatherers(amount: number, gameState: GameState){\n    // Cache available in the future?\n    if(countAvailableStudents(gameState) >= amount) {\n        gameState.jobAssignments.gatherRelics += amount;\n    }\n}\n\nexport function removeGatherers(amount: number, gameState: GameState){\n    // Cache available in the future?\n    gameState.jobAssignments.gatherRelics -= amount;\n    if(gameState.jobAssignments.gatherRelics < 0) gameState.jobAssignments.gatherRelics = 0;\n}\n\nexport function countAvailableStudents(gameState: GameState) {\n    const assignedStudents = gameState.jobAssignments.gatherRelics;\n    return gameState.resourceState.students - assignedStudents;\n}","import React from \"react\";\n\ntype RelicsButtonProps = {\n  onClick: any;\n  disabled?: any;\n}\n\nexport class RelicsButton extends React.Component<RelicsButtonProps> {\n\n    render() {\n        let className = \"relics-button\";\n        if(this.props.disabled) className += \" relics-button--disabled\";\n        const clickFunc = this.props.disabled ? () => {} : this.props.onClick;\n        return (\n            <span\n                className={className}\n                onClick={clickFunc}>\n                {this.props.children}\n            </span>\n        )\n    }\n}","import * as React from \"react\";\nimport { GameState } from \"../core/game-state\";\nimport {RelicGenerator} from \"../economy/transactions/relicGenerator\";\nimport {StudentTransaction} from \"../economy/transactions/studentTransaction\";\nimport ReactTooltip from \"react-tooltip\";\nimport {assignGatherers, countAvailableStudents, removeGatherers} from \"../economy/jobAssignments\";\nimport {RelicsButton} from \"../shared/relicsButton\";\n\ntype GeneratorProps = {\n    gameState: GameState,\n    onPurchase: any,\n    onAddCurrency: any\n}\n\nexport class RelicPanel extends React.Component<GeneratorProps> {\n    readonly studentTransaction = new StudentTransaction();\n\n    assignGather() {\n        const { gameState } = this.props;\n        assignGatherers(1, gameState);\n    }\n    removeGather() {\n        const { gameState } = this.props;\n        removeGatherers(1, gameState);\n    }\n\n    render() {\n        const { gameState, onAddCurrency, onPurchase } = this.props;\n        const availableStudents = countAvailableStudents(gameState);\n        return (\n            <div className=\"panel--left-align\">\n                <RelicsButton onClick={() => onAddCurrency(\"relics\", 1)}>Look for relics</RelicsButton>\n                <p>\n                    Students working: {gameState.jobAssignments.gatherRelics}\n                    <span><RelicsButton\n                        disabled={availableStudents <= 0}\n                        onClick={()=>this.assignGather()}>+</RelicsButton>\n                    <RelicsButton\n                        disabled={gameState.jobAssignments.gatherRelics <= 0}\n                        onClick={()=>this.removeGather()}\n                    >\n                        -\n                    </RelicsButton></span>\n\n                </p>\n                <br/>\n                <div>\n                    <div data-tip data-for=\"hireStudent\">\n                        <RelicsButton\n                                disabled={!this.studentTransaction.isValidPurchase(gameState, 1)}\n                                onClick={() => onPurchase(1, this.studentTransaction)}>\n                            Hire a Student\n                        </RelicsButton>\n                    </div>\n                    <ReactTooltip id=\"hireStudent\" place=\"bottom\" effect=\"solid\">\n                        Hire some students to dust off relics for you. They work for relics.\n                        Relics: {this.studentTransaction.getCost(gameState, 1)}\n                    </ReactTooltip>\n                </div>\n            </div>\n        );\n    }\n}\n","import React from \"react\";\n\nexport const themes = {\n    light: {\n        themeClass: 'app app--light',\n    },\n    dark: {\n        themeClass: 'app app--dark',\n    },\n};\n\nexport const ThemeContext = React.createContext({\n    theme: themes.dark, // default value\n    toggleTheme: () => {\n    },\n});","import {GameState} from \"../core/game-state\";\nimport {ThemeContext} from \"../layout/theme-context\";\nimport React from \"react\";\n\ntype SettingsProps = {\n    gameState: GameState,\n    onSave: any,\n    onClearSave: any\n}\n\nexport class Settings extends React.Component<SettingsProps> {\n    onToggleTheme(toggleTheme: any) {\n        const { gameState } = this.props;\n        gameState.settings.darkMode = !gameState.settings.darkMode;\n        toggleTheme();\n    }\n    render() {\n        const {onSave, onClearSave} = this.props;\n\n        return (\n            <div>\n                <div>\n                    <button onClick={() => onSave()}>Save</button>\n                    <button onClick={() => onClearSave()}>Clear Save</button>\n                </div>\n                <div>\n                    <ThemeContext.Consumer>\n                        {({theme, toggleTheme}) => (\n                            <button onClick={() => this.onToggleTheme(toggleTheme)}>\n                                Toggle Dark Mode\n                            </button>\n                        )}\n                    </ThemeContext.Consumer>\n                </div>\n                <p>Last Saved at ${this.props.gameState.saveTime ? this.props.gameState.saveTime.toString() : \"\"}</p>\n            </div>\n        );\n    }\n}\n","import {GameState} from \"./game-state\";\nimport {MAX_LOG_SIZE} from \"../config/constants\";\n\nexport function addJournalEntry(gameState: GameState, entry: string){\n    gameState.journalState.entries.push(entry);\n    if(gameState.journalState.entries.length >= MAX_LOG_SIZE) {\n        gameState.journalState.entries.shift();\n    }\n    return gameState;\n}\n\nexport function clearJournal(gameState: GameState) {\n    gameState.journalState.entries = [];\n}","export const MIN_SAVE_REWARD_TIME = 24;\nexport const TICK_SPEED = 50;\nexport const MAX_LOG_SIZE = 25;\n\n// Panel Keys\nexport const SETTINGS_PANEL_KEY = \"SETTINGS\";\nexport const GENERATORS_PANEL_KEY = \"GENERATORS\"","import {GameState} from \"./game-state\";\nimport {addJournalEntry} from \"./journal\";\n\nexport function randomEvent(gameState: GameState) {\n    const diceRoll = roll1d100();\n    console.log(diceRoll);\n    if(diceRoll >= 95) {\n        addJournalEntry(gameState, \"The wind blows across the dusty plain\")\n    }\n    if( 10 <= diceRoll && diceRoll <= 15) {\n        addJournalEntry(gameState, \"A stranger shuffles up and hands something to you: +100 Relics!\")\n        gameState.resourceState.relics += 100\n    }\n}\n\nfunction roll1d100() {\n    return Math.floor(Math.random() * 100 + 1);\n}","import {saveGame} from \"./saveService\";\nimport {GameState} from \"./game-state\";\nimport {TICK_SPEED} from \"../config/constants\";\nimport {randomEvent} from \"./event-manager\";\n\nexport class GameClock {\n    saveClockId: any;\n    resourceClockId: any;\n    gameState: GameState; // Not readonly, we're emitting the changes for the rest of the app\n    tickRatio: number;\n    emitTick: any;\n    maxTicks: number;\n    tickNumber: number = 0;\n\n    constructor(gameState: GameState, onTick: any) {\n        this.saveClockId = setInterval(\n            () => saveGame(gameState),\n            30000\n        );\n        this.gameState = gameState;\n        this.updateState(gameState);\n        this.tickRatio = TICK_SPEED / 1000;\n        this.maxTicks = (5 * 1000) / TICK_SPEED;\n        this.emitTick = onTick;\n    }\n\n    tick() {\n        // TODO: Tickcount, random event on tickcount\n        var newState = {...this.gameState};\n        if(this.gameState.jobAssignments.gatherRelics) {\n            newState.resourceState.relics += this.gameState.jobAssignments.gatherRelics*this.tickRatio;\n        }\n\n        if(this.tickNumber >= this.maxTicks ) {\n            // every 5s, test for an event\n            randomEvent(newState);\n            this.tickNumber = 1;\n        }\n        this.gameState = newState;\n        this.emitTick(newState);\n        this.tickNumber++;\n    }\n\n    updateState(gameState: GameState) {\n        clearInterval(this.resourceClockId);\n        this.resourceClockId = setInterval(() => this.tick(), TICK_SPEED);\n    }\n\n    clearClock() {\n        clearInterval(this.resourceClockId);\n        clearInterval(this.saveClockId);\n    }\n\n}\n","import * as React from \"react\";\nimport {JournalState} from \"../core/game-state\";\nimport {RelicsButton} from \"../shared/relicsButton\";\n\ntype JournalProps = {\n    journalState: JournalState,\n    clearLog: any\n}\n\nexport class AdventureLog extends React.Component<JournalProps> {\n\n    getStory() {\n        return `These dusty relics are probably worth something!`\n    }\n\n    render() {\n        const { journalState, clearLog } = this.props;\n        const entryList = journalState.entries.reverse().map((entry) =>\n            <div className=\"padded-text journal__entry\">{entry}</div>\n        );\n        return (\n            <div className=\"panel--left-align journal-panel\">\n                <RelicsButton onClick={() => clearLog()}>Clear Log</RelicsButton>\n                <div className=\"journal\">{entryList}</div>\n            </div>\n        );\n    }\n}\n","import * as React from \"react\";\nimport { GameState } from \"../core/game-state\";\nimport {RelicGenerator} from \"../economy/transactions/relicGenerator\";\nimport {countAvailableStudents} from \"../economy/jobAssignments\";\n\ntype ResourceProps = {\n    gameState: GameState,\n}\n\nexport class ResourcePanel extends React.Component<ResourceProps> {\n\n    render() {\n        const { gameState } = this.props;\n        return (\n            <div className=\"panel--right-align\">\n                <div className=\"padded-text\">Students: {countAvailableStudents(gameState)}/{gameState.resourceState.students}</div>\n                <div className=\"padded-text\">Relics: {gameState.resourceState.relics.toFixed()}</div>\n            </div>\n        );\n    }\n}\n","import React from \"react\";\n\ntype NavButtonProps = {\n  onClick: any;\n  disabled?: any | undefined;\n  selected?: boolean | undefined;\n}\n\nexport class NavButton extends React.Component<NavButtonProps> {\n\n    render() {\n        let className = \"nav-button\";\n        if(this.props.disabled) className += \" nav-button--disabled\";\n        if(this.props.selected) className += \" nav-button--selected\";\n\n        const clickFunc = this.props.disabled ? () => {} : this.props.onClick;\n        return (\n            <span\n                className={className}\n                onClick={clickFunc}>\n                {this.props.children}\n            </span>\n        )\n    }\n}","import React from \"react\";\nimport {GENERATORS_PANEL_KEY, SETTINGS_PANEL_KEY} from \"../config/constants\";\nimport {NavButton} from \"./navButton\";\n\ntype PanelSelectorProps = {\n    onChangePanel: any,\n    selected: string\n}\nexport class PanelSelector extends React.Component<PanelSelectorProps>{\n    render() {\n        const {onChangePanel, selected} = this.props;\n        return (\n            <div className={\"nav-panel\"}>\n                <NavButton selected={selected === GENERATORS_PANEL_KEY}\n                           onClick={() => onChangePanel(GENERATORS_PANEL_KEY)}>\n                    The Fields\n                </NavButton>\n                <NavButton selected={selected === SETTINGS_PANEL_KEY}\n                           onClick={() => onChangePanel(SETTINGS_PANEL_KEY)}>\n                    Settings\n                </NavButton>\n            </div>\n        );\n    }\n}","import * as React from \"react\";\nimport {loadSave, newSave, saveGame, saveGameExists} from \"./saveService\";\nimport {RelicPanel} from \"../panels/relicPanel\";\nimport {Settings} from \"../panels/settings\";\nimport {GameState} from \"./game-state\";\nimport {ITransaction} from \"../economy/transactions/ITransaction\";\nimport {GameClock} from \"./game-clock\";\nimport {GENERATORS_PANEL_KEY, SETTINGS_PANEL_KEY} from \"../config/constants\";\nimport {addJournalEntry, clearJournal} from \"./journal\";\nimport {AdventureLog} from \"../panels/adventureLog\";\nimport {ResourcePanel} from \"../panels/resourcePanel\";\nimport {PanelSelector} from \"../layout/panelSelector\";\n\ntype CoreProps = {}\ntype CoreState = {\n    gameState: GameState,\n    activePanel: string\n}\n\nexport class CorePanel extends React.Component<CoreProps, CoreState> {\n    clock: GameClock | undefined;\n    readonly state = {\n        gameState: saveGameExists() ? loadSave() : newSave(),\n        activePanel: GENERATORS_PANEL_KEY\n    };\n\n    componentDidMount(): void {\n        this.clock = new GameClock(this.state.gameState, (newState: GameState) => this.onTick(newState));\n        this.setState({activePanel: GENERATORS_PANEL_KEY});\n    }\n\n    onTick(newState: GameState) {\n        this.setState({gameState: newState});\n    }\n\n    addCurrency(currencyName: string, currencyAmount: number) {\n        // TODO: Abstract this for manual action & future FAME multiplier\n        const newState = {...this.state.gameState};\n        newState.resourceState.relics += currencyAmount;\n        addJournalEntry(newState, \"You dust off some potsherds.\");\n        this.setState({gameState: newState})\n    }\n\n    makePurchase(purchaseAmount: number, purchaseType: ITransaction) {\n        let newState = {...this.state.gameState};\n        newState = purchaseType.commitTransaction(newState, purchaseAmount);\n\n        this.setState({gameState: newState});\n        if(purchaseType.updateClock) {\n            // @ts-ignore\n            this.clock.updateState(newState);\n        }\n    }\n\n    clearLog() {\n        clearJournal(this.state.gameState)\n    }\n\n    changeActivePanel(panelKey: string) {\n        this.setState({activePanel: panelKey});\n    }\n\n    save() {\n        const newState = {...this.state.gameState};\n        this.setState({gameState: newState});\n        saveGame(newState);\n    }\n\n    clearSave() {\n        // @ts-ignore\n        this.clock.clearClock();\n        const newState = newSave();\n        newState.saveTime = new Date();\n        this.setState({gameState: newState});\n        saveGame(newState);\n        // eslint-disable-next-line no-restricted-globals\n        location.reload();\n    }\n\n    render() {\n        let activePanel;\n        switch (this.state.activePanel) {\n            case SETTINGS_PANEL_KEY:\n                activePanel = (\n                    <Settings\n                        gameState={this.state.gameState}\n                        onSave={() => this.save()}\n                        onClearSave={() => this.clearSave()}\n                    />\n                )\n                break;\n            case GENERATORS_PANEL_KEY:\n            default:\n                activePanel = (\n                    <RelicPanel\n                        gameState={this.state.gameState}\n                        onAddCurrency={(currencyName: string, currencyAmount: number) => this.addCurrency(currencyName, currencyAmount)}\n                        onPurchase={(purchaseAmount: number, purchaseType: ITransaction) => this.makePurchase(purchaseAmount, purchaseType)}\n                    />\n                );\n        }\n\n        return (\n            <div className=\"core-panel\">\n                <div className=\"core-panel__flex\">\n                    <div className=\"core-panel__left-column\">\n                        <AdventureLog clearLog={() => this.clearLog()} journalState={this.state.gameState.journalState}/>\n                    </div>\n                    <div className=\"core-panel__center-column\">\n                        <PanelSelector onChangePanel={(panelKey: string) => this.changeActivePanel(panelKey)}\n                            selected={this.state.activePanel}\n                        />\n                        {activePanel}\n                    </div>\n                    <div className=\"core-panel__right-column\">\n                        <ResourcePanel gameState={this.state.gameState}/>\n                    </div>\n                </div>\n\n            </div>\n        );\n    }\n}\n","import React from 'react';\nimport './app.scss';\nimport {CorePanel} from \"./core/corePanel\";\nimport {ThemeContext, themes} from \"./layout/theme-context\";\nimport {loadSave, newSave, saveGameExists} from \"./core/saveService\";\n\ntype AppProps = {}\ntype AppState = {\n    theme: any,\n    toggleTheme: () => {}\n}\n\nclass App extends React.Component<AppProps, AppState> {\n    readonly state: AppState;\n    toggleTheme: any;\n\n    constructor(props: any) {\n        super(props);\n        const darkMode = saveGameExists() && loadSave().settings.darkMode;\n        console.log(\"MODE\", darkMode);\n\n        this.toggleTheme = () => {\n            this.setState(state => ({\n                theme:\n                    state.theme === themes.dark\n                        ? themes.light\n                        : themes.dark,\n            }));\n        };\n\n        this.state = {\n            theme: darkMode ? themes.dark : themes.light,\n            toggleTheme: this.toggleTheme,\n        };\n\n    }\n\n    render() {\n        return (\n                <ThemeContext.Provider value={this.state}>\n                    <div className={this.state.theme.themeClass}>\n                        <CorePanel/>\n                    </div>\n                </ThemeContext.Provider>\n        );\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resource-display are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './app';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}