{"version":3,"sources":["core/journal.ts","config/constants.ts","core/game-state.ts","core/saveService.ts","economy/Transaction.ts","economy/transactions/studentTransaction.tsx","economy/jobAssignments.ts","shared/relicsButton.tsx","shared/AssignWorkerOptions.tsx","panels/relicPanel.tsx","layout/theme-context.ts","panels/settings.tsx","core/event-manager.ts","core/game-clock.ts","panels/adventureLog.tsx","panels/resourcePanel.tsx","layout/navButton.tsx","layout/panelSelector.tsx","economy/transactions/KnowledgeTransaction.tsx","economy/researches/studentKnowledge.tsx","economy/researches/profit.tsx","economy/researches/betterShovels.tsx","economy/researches/bloodWard.tsx","panels/lab.tsx","core/achievements.ts","core/corePanel.tsx","app.tsx","serviceWorker.ts","index.tsx"],"names":["addJournalEntry","gameState","entry","journalState","entries","push","entryType","length","shift","addDetailedJournalEntry","GameState","resourceState","ResourceState","jobAssignments","JobAssignments","JournalState","saveTime","Date","settings","SettingsState","achievements","Achievements","researchState","ResearchState","relics","relicGenerator","students","knowledge","blood","money","fame","whispers","gatherRelics","studyRelics","darkMode","labUnlocked","studentKnowledge","profiteering","betterShovels","bloodWard","saveGameExists","localStorage","getItem","loadSave","string","newState","mergeStateWithDefault","JSON","parse","atob","newSave","saveGame","manualSave","setItem","btoa","stringify","Transaction","isValidPurchase","amount","commitTransaction","updateClock","StudentTransaction","currCost","getCost","purchaseAmount","sum","theoreticalAmt","i","className","removeGatherers","assignStudyRelics","console","log","countAvailableStudents","removeStudyRelics","assignedStudents","RelicsButton","this","props","tooltip","id","children","disabled","onClick","compact","clickFunc","dataTipAttr","place","effect","React","Component","AssignWorkerOptions","assignWorkers","removeWorkers","currentlyAssigned","availableWorkers","RelicPanel","assignGatherers","onAddCurrency","onPurchase","availableStudents","studentsHired","assignGather","removeGather","buildTooltip","themes","light","themeClass","dark","ThemeContext","createContext","theme","toggleTheme","Settings","onSave","onClearSave","Consumer","onToggleTheme","randomEvent","diceRoll","Math","floor","random","GameClock","onTick","saveClockId","resourceClockId","tickRatio","emitTick","maxTicks","tickNumber","setInterval","updateState","TICK_SPEED","relicsMultiplier","clearInterval","tick","AdventureLog","clearLog","entryList","slice","reverse","map","getClassName","ResourcePanel","toFixed","NavButton","selected","PanelSelector","onChangePanel","KnowledgeTransaction","StudentKnowledge","Profit","BetterShovels","BloodWard","ResearchLab","assignStudentsStudy","removeStudentsStudy","CorePanel","clock","state","activePanel","setState","currencyName","currencyAmount","transaction","panelKey","clearClock","location","reload","save","clearSave","makePurchase","addCurrency","changeActivePanel","App","Provider","value","Boolean","window","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.312a9661.chunk.js","sourcesContent":["import {GameState} from \"./game-state\";\r\nimport {MAX_LOG_SIZE} from \"../config/constants\";\r\n\r\nexport const ACHIEVEMENT_ENTRY_TYPE = \"ACHIEVEMENT\";\r\nexport const COMMON_ENTRY_TYPE = \"COMMON\";\r\nexport const BLOOD_ENTRY_TYPE = \"BLOOD\";\r\n\r\nexport type DetailedEntry = {\r\n    entry: string,\r\n    entryType: string,\r\n}\r\n\r\nexport function addJournalEntry(gameState: GameState, entry: string){\r\n    gameState.journalState.entries.push({\r\n        entry: entry,\r\n        entryType: COMMON_ENTRY_TYPE\r\n    });\r\n    if(gameState.journalState.entries.length >= MAX_LOG_SIZE) {\r\n        gameState.journalState.entries.shift();\r\n    }\r\n    return gameState;\r\n}\r\n\r\nexport function addDetailedJournalEntry(gameState: GameState, entry: DetailedEntry){\r\n    gameState.journalState.entries.push(entry);\r\n    if(gameState.journalState.entries.length >= MAX_LOG_SIZE) {\r\n        gameState.journalState.entries.shift();\r\n    }\r\n    return gameState;\r\n}\r\n\r\nexport function clearJournal(gameState: GameState) {\r\n    gameState.journalState.entries = [];\r\n}\r\n","export const MIN_SAVE_REWARD_TIME = 24;\r\nexport const TICK_SPEED = 50;\r\nexport const MAX_LOG_SIZE = 25;\r\n\r\n// Panel Keys\r\nexport const SETTINGS_PANEL_KEY = \"SETTINGS\";\r\nexport const GENERATORS_PANEL_KEY = \"GENERATORS\";\r\nexport const LAB_KEY = \"LAB\";\r\n","import {COMMON_ENTRY_TYPE, DetailedEntry} from \"./journal\";\r\n\r\nexport class GameState {\r\n    resourceState: ResourceState = new ResourceState();\r\n    jobAssignments: JobAssignments = new JobAssignments();\r\n    journalState: JournalState = new JournalState();\r\n    saveTime: Date = new Date();\r\n    settings: SettingsState = new SettingsState();\r\n    achievements: Achievements = new Achievements();\r\n    researchState: ResearchState = new ResearchState();\r\n}\r\n\r\nexport class ResourceState {\r\n    relics: number = 0;\r\n    relicGenerator: number = 0;\r\n    students: number = 0;\r\n    knowledge: number = 0;\r\n    blood: number = 0;\r\n    money: number = 0;\r\n    fame: number = 0;\r\n    whispers: number = 0;\r\n}\r\n\r\nexport class JobAssignments {\r\n    gatherRelics: number = 0;\r\n    studyRelics: number = 0;\r\n}\r\n\r\nexport class JournalState {\r\n    entries: DetailedEntry[] = [{\r\n        entry: \"The new dig site lays before me, I wonder what treasures lay yet unearthed?\",\r\n        entryType: COMMON_ENTRY_TYPE\r\n    }];\r\n}\r\n\r\nexport class SettingsState {\r\n    darkMode: boolean = false;\r\n}\r\n\r\nexport class Achievements {\r\n    labUnlocked: boolean = false;\r\n}\r\n\r\nexport class ResearchState {\r\n    studentKnowledge: boolean = false;\r\n    profiteering: boolean = false;\r\n    betterShovels: boolean = false;\r\n    bloodWard: boolean = false;\r\n}\r\n\r\nexport function mergeStateWithDefault(gameState: GameState): GameState {\r\n    const newState = {...new GameState(), ...gameState};\r\n    newState.resourceState = {...newState.resourceState, ...gameState.resourceState};\r\n    newState.jobAssignments = {...newState.jobAssignments, ...gameState.jobAssignments};\r\n    newState.journalState = {...newState.journalState, ...gameState.journalState};\r\n    newState.saveTime = gameState.saveTime;\r\n    newState.settings = {...newState.settings, ...gameState.settings};\r\n    newState.achievements = {...newState.achievements, ...gameState.achievements};\r\n    newState.researchState = {...newState.researchState, ...gameState.researchState};\r\n\r\n    return newState;\r\n}\r\n","import {GameState, mergeStateWithDefault} from \"./game-state\";\r\nimport {addJournalEntry} from \"./journal\";\r\n\r\nexport function saveGameExists() {\r\n    return !!localStorage.getItem(\"RelicsSave\");\r\n}\r\n\r\nexport function loadSave() {\r\n    const string = localStorage.getItem(\"RelicsSave\");\r\n    const save =  string ? JSON.parse(atob(string)) : null;\r\n    return mergeStateWithDefault(save);\r\n}\r\n\r\nexport function newSave(): GameState {\r\n    return new GameState();\r\n}\r\n\r\nexport function saveGame(gameState: GameState, manualSave: boolean = false) {\r\n    gameState.saveTime = new Date();\r\n    if(manualSave) addJournalEntry(gameState, \"Game Saved\");\r\n    localStorage.setItem(\"RelicsSave\", btoa(JSON.stringify(gameState)));\r\n}\r\n\r\n\r\nexport function exportSave(gameState: GameState) {\r\n    saveGame(gameState);\r\n    // TODO: export\r\n}\r\n\r\nexport function importSave(gameState: GameState) {\r\n    saveGame(gameState);\r\n    // TODO: import\r\n}\r\n","import {GameState } from \"../core/game-state\";\r\n\r\nexport class Transaction {\r\n    static isValidPurchase = (gameState: GameState, amount: number): boolean => false ;\r\n    static commitTransaction = (gameState: GameState, amount: number): GameState => {return gameState};\r\n    static updateClock: boolean = false;\r\n}\r\n","import { Transaction } from \"../Transaction\";\r\nimport {GameState} from \"../../core/game-state\";\r\nimport React from \"react\";\r\n\r\nexport class StudentTransaction extends Transaction{\r\n    updateClock = false;\r\n\r\n    static commitTransaction(gameState: GameState, amount: number): GameState {\r\n        if(StudentTransaction.isValidPurchase(gameState, amount)) {\r\n            const currCost = StudentTransaction.getCost(gameState, amount);\r\n\r\n            gameState.resourceState.relics -= currCost;\r\n            gameState.resourceState.students += amount;\r\n        }\r\n        return gameState;\r\n    }\r\n\r\n    static isValidPurchase(gameState: GameState, amount: number): boolean {\r\n        const currCost = StudentTransaction.getCost(gameState, amount);\r\n\r\n        return gameState.resourceState.relics >= currCost;\r\n    }\r\n\r\n    static getCost(gameState: GameState, purchaseAmount: number) {\r\n        let sum = 0;\r\n        let theoreticalAmt = gameState.resourceState.students || 0;\r\n        for (let i = 0; i < purchaseAmount; i++) {\r\n            sum += 10 + theoreticalAmt * 5;\r\n            theoreticalAmt++;\r\n        }\r\n        return sum;\r\n    }\r\n\r\n    static buildTooltip(gameState: GameState): any {\r\n        return (\r\n            <div className=\"relics-tooltip\">\r\n                <div className=\"relics-tooltip__description\">\r\n                    Hire some students to dust off relics for you.\r\n                    They work for relics.\r\n                </div>\r\n                <div className=\"relics-tooltip__cost\">\r\n                    <div>Relics: {StudentTransaction.getCost(gameState, 1)}</div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","import {GameState} from \"../core/game-state\";\r\n\r\nexport function assignGatherers(amount: number, gameState: GameState){\r\n    // Cache available in the future?\r\n    if(countAvailableStudents(gameState) >= amount) {\r\n        gameState.jobAssignments.gatherRelics += amount;\r\n    }\r\n}\r\n\r\nexport function removeGatherers(amount: number, gameState: GameState){\r\n    // Cache available in the future?\r\n    gameState.jobAssignments.gatherRelics -= amount;\r\n    if(gameState.jobAssignments.gatherRelics < 0) gameState.jobAssignments.gatherRelics = 0;\r\n}\r\n\r\nexport function assignStudyRelics(amount: number, gameState: GameState){\r\n    // Cache available in the future?\r\n    console.log(gameState)\r\n    if(countAvailableStudents(gameState) >= amount) {\r\n        gameState.jobAssignments.studyRelics += amount;\r\n    }\r\n}\r\n\r\nexport function removeStudyRelics(amount: number, gameState: GameState){\r\n    // Cache available in the future?\r\n    gameState.jobAssignments.studyRelics -= amount;\r\n    if(gameState.jobAssignments.studyRelics < 0) gameState.jobAssignments.studyRelics = 0;\r\n}\r\n\r\nexport function countAvailableStudents(gameState: GameState) {\r\n    const assignedStudents = (gameState.jobAssignments.gatherRelics || 0)\r\n        + (gameState.jobAssignments.studyRelics || 0);\r\n    return gameState.resourceState.students - assignedStudents;\r\n}\r\n","import React from \"react\";\r\nimport ReactTooltip from \"react-tooltip\";\r\n\r\ntype RelicsButtonProps = {\r\n  onClick: any;\r\n  id?: string; // Must be provided for tooltip to work\r\n  disabled?: any;\r\n  tooltip?: any;\r\n  compact?: boolean;\r\n  className?: string;\r\n}\r\n\r\nexport class RelicsButton extends React.Component<RelicsButtonProps> {\r\n\r\n    render() {\r\n        const { tooltip, id, children, disabled, onClick, compact } = this.props;\r\n        let className = \"relics-button\";\r\n        if(disabled) className += \" relics-button--disabled\";\r\n        if(compact) className += \" relics-button--compact\";\r\n        if(this.props.className) className += \" \" + this.props.className;\r\n\r\n        const clickFunc = disabled ? () => {} : onClick;\r\n        const dataTipAttr = {};\r\n        if(tooltip)\r\n        {\r\n            // @ts-ignore\r\n            dataTipAttr['data-tip'] = '';\r\n            // @ts-ignore\r\n            dataTipAttr['data-for'] = id;\r\n        }\r\n        return (\r\n            <span { ...dataTipAttr} id={id} className={className} onClick={clickFunc}>\r\n                {children}\r\n                {tooltip &&\r\n                    <ReactTooltip id={id} place=\"bottom\" effect=\"solid\">\r\n                        {tooltip}\r\n                    </ReactTooltip>\r\n                }\r\n            </span>\r\n        )\r\n    }\r\n}\r\n","import React from \"react\";\r\nimport {RelicsButton} from \"./relicsButton\";\r\nimport ReactTooltip from \"react-tooltip\";\r\n\r\ntype AssignWorkerOptionProps = {\r\n    id?:string,\r\n    tooltip?: string,\r\n    assignWorkers: any,\r\n    removeWorkers: any,\r\n    currentlyAssigned: number,\r\n    availableWorkers: number,\r\n}\r\n\r\nexport class AssignWorkerOptions extends React.Component<AssignWorkerOptionProps>{\r\n    render() {\r\n        const {\r\n            id,\r\n            tooltip,\r\n            children,\r\n            assignWorkers,\r\n            removeWorkers,\r\n            currentlyAssigned,\r\n            availableWorkers,\r\n        } = this.props;\r\n\r\n        const dataTipAttr = {};\r\n        if(tooltip)\r\n        {\r\n            // @ts-ignore\r\n            dataTipAttr['data-tip'] = '';\r\n            // @ts-ignore\r\n            dataTipAttr['data-for'] = id;\r\n        }\r\n        return (\r\n            <span { ...dataTipAttr} id={id} >\r\n                {children}: {currentlyAssigned || 0}\r\n                <span>\r\n                    <RelicsButton\r\n                        compact={true}\r\n                        disabled={currentlyAssigned <= 0}\r\n                        onClick={() => removeWorkers(1)}\r\n                    >\r\n                        -\r\n                    </RelicsButton>\r\n                    <RelicsButton\r\n                        compact={true}\r\n                        disabled={availableWorkers <= 0}\r\n                        onClick={() => assignWorkers(1)}>\r\n                        +\r\n                    </RelicsButton>\r\n                    <RelicsButton\r\n                        compact={true}\r\n                        disabled={availableWorkers <= 0}\r\n                        onClick={() => assignWorkers(availableWorkers)}>\r\n                        <u>+</u>\r\n                    </RelicsButton>\r\n                </span>\r\n                {tooltip &&\r\n                    <ReactTooltip id={id} place=\"bottom\" effect=\"solid\">\r\n                        {tooltip}\r\n                    </ReactTooltip>\r\n                }\r\n            </span>\r\n        );\r\n    }\r\n}\r\n","import * as React from \"react\";\r\nimport { GameState } from \"../core/game-state\";\r\nimport {StudentTransaction} from \"../economy/transactions/studentTransaction\";\r\nimport {assignGatherers, countAvailableStudents, removeGatherers} from \"../economy/jobAssignments\";\r\nimport {RelicsButton} from \"../shared/relicsButton\";\r\nimport {AssignWorkerOptions} from \"../shared/AssignWorkerOptions\";\r\n\r\ntype GeneratorProps = {\r\n    gameState: GameState,\r\n    onPurchase: any,\r\n    onAddCurrency: any\r\n}\r\n\r\nexport class RelicPanel extends React.Component<GeneratorProps> {\r\n    assignGather(amount: number) {\r\n        const { gameState } = this.props;\r\n        assignGatherers(amount, gameState);\r\n    }\r\n    removeGather(amount: number) {\r\n        const { gameState } = this.props;\r\n        removeGatherers(amount, gameState);\r\n    }\r\n\r\n    render() {\r\n        const { gameState, onAddCurrency, onPurchase } = this.props;\r\n        const availableStudents = countAvailableStudents(gameState);\r\n        const studentsHired = gameState.resourceState.students >= 1;\r\n\r\n        return (\r\n            <div className=\"panel--left-align\">\r\n                <div className=\"button-container\">\r\n                    <RelicsButton onClick={() => onAddCurrency(\"relics\", 1)}>Look for relics</RelicsButton>\r\n                </div>\r\n                {studentsHired &&\r\n                    <AssignWorkerOptions\r\n                        assignWorkers={(amount: number) =>this.assignGather(amount)}\r\n                        removeWorkers={(amount:number) => this.removeGather(amount)}\r\n                        currentlyAssigned={gameState.jobAssignments.gatherRelics}\r\n                        availableWorkers={availableStudents}>\r\n                        Gathering Relics\r\n                    </AssignWorkerOptions>\r\n                }\r\n                <br/>\r\n                <div>\r\n                    <div className=\"button-container\">\r\n                        <RelicsButton\r\n                                disabled={!StudentTransaction.isValidPurchase(gameState, 1)}\r\n                                onClick={() => onPurchase(1, StudentTransaction.commitTransaction)}\r\n                                id=\"hireStudent\"\r\n                                tooltip={StudentTransaction.buildTooltip(gameState)}\r\n                        >\r\n                            Hire a Student\r\n                        </RelicsButton>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","import React from \"react\";\r\n\r\nexport const themes = {\r\n    light: {\r\n        themeClass: 'app app--light',\r\n    },\r\n    dark: {\r\n        themeClass: 'app app--dark',\r\n    },\r\n};\r\n\r\nexport const ThemeContext = React.createContext({\r\n    theme: themes.dark, // default value\r\n    toggleTheme: () => {\r\n    },\r\n});","import {GameState} from \"../core/game-state\";\r\nimport {ThemeContext} from \"../layout/theme-context\";\r\nimport React from \"react\";\r\nimport {RelicsButton} from \"../shared/relicsButton\";\r\n\r\ntype SettingsProps = {\r\n    gameState: GameState,\r\n    onSave: any,\r\n    onClearSave: any\r\n}\r\n\r\nexport class Settings extends React.Component<SettingsProps> {\r\n    onToggleTheme(toggleTheme: any) {\r\n        const { gameState } = this.props;\r\n        gameState.settings.darkMode = !gameState.settings.darkMode;\r\n        toggleTheme();\r\n    }\r\n    render() {\r\n        const {onSave, onClearSave} = this.props;\r\n\r\n        return (\r\n            <div>\r\n                <div className={\"button-container\"}>\r\n                    <RelicsButton onClick={() => onSave()}>Save</RelicsButton>\r\n                    <RelicsButton onClick={() => onClearSave()}>Clear Save</RelicsButton>\r\n                </div>\r\n                <div>\r\n                    <ThemeContext.Consumer>\r\n                        {({theme, toggleTheme}) => (\r\n                            <div className={\"button-container\"}>\r\n                                <RelicsButton onClick={() => this.onToggleTheme(toggleTheme)}>\r\n                                    Toggle Dark Mode\r\n                                </RelicsButton>\r\n                            </div>\r\n                        )}\r\n                    </ThemeContext.Consumer>\r\n                </div>\r\n                <div>Relics - A game by bcm32.</div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","import {GameState} from \"./game-state\";\r\nimport {addDetailedJournalEntry, addJournalEntry, BLOOD_ENTRY_TYPE} from \"./journal\";\r\nimport {countAvailableStudents, removeGatherers, removeStudyRelics} from \"../economy/jobAssignments\";\r\n\r\nexport function randomEvent(gameState: GameState) {\r\n    const diceRoll = roll1d100();\r\n    if(diceRoll >= 95) {\r\n        addJournalEntry(gameState, \"The wind blows across the dusty plain\");\r\n    }\r\n    if( 10 <= diceRoll && diceRoll <= 15) {\r\n        addJournalEntry(gameState, \"A stranger shuffles up and hands something to you: +100 Relics!\");\r\n        gameState.resourceState.relics += 100\r\n    }\r\n    if(diceRoll === 1 && gameState.resourceState.students > 2) {\r\n        // A dark event occurs\r\n        if(!gameState.researchState.bloodWard) {\r\n            if (countAvailableStudents(gameState) <= 0) {\r\n                if (gameState.jobAssignments.gatherRelics >= 1) {\r\n                    removeGatherers(1, gameState);\r\n                } else if (gameState.jobAssignments.studyRelics >= 1) {\r\n                    removeStudyRelics(1, gameState);\r\n                }\r\n            }\r\n            gameState.resourceState.blood ? gameState.resourceState.blood++ : gameState.resourceState.blood = 1;\r\n            gameState.resourceState.students -= 1;\r\n\r\n            addDetailedJournalEntry(gameState, {\r\n                entry: \"You are short one student.\",\r\n                entryType: BLOOD_ENTRY_TYPE,\r\n            });\r\n        } else {\r\n            gameState.resourceState.blood ? gameState.resourceState.blood++ : gameState.resourceState.blood = 1;\r\n            addDetailedJournalEntry(gameState, {\r\n                entry: \"The ward protects the student in exchange for a drop shed.\",\r\n                entryType: BLOOD_ENTRY_TYPE,\r\n            });\r\n        }\r\n    }\r\n}\r\n\r\nfunction roll1d100() {\r\n    return Math.floor(Math.random() * 100 + 1);\r\n}\r\n","import {saveGame} from \"./saveService\";\r\nimport {GameState} from \"./game-state\";\r\nimport {TICK_SPEED} from \"../config/constants\";\r\nimport {randomEvent} from \"./event-manager\";\r\n\r\nexport class GameClock {\r\n    saveClockId: any;\r\n    resourceClockId: any;\r\n    gameState: GameState; // Not readonly, we're emitting the changes for the rest of the app\r\n    tickRatio: number;\r\n    emitTick: any;\r\n    maxTicks: number;\r\n    tickNumber: number = 0;\r\n\r\n    constructor(gameState: GameState, onTick: any) {\r\n        this.saveClockId = setInterval(\r\n            () => saveGame(gameState),\r\n            30000\r\n        );\r\n        this.gameState = gameState;\r\n        this.updateState(gameState);\r\n        this.tickRatio = TICK_SPEED / 1000; // 50ms / 1000ms, multiply by how many per second you want\r\n        this.maxTicks = (5 * 1000) / TICK_SPEED;\r\n        this.emitTick = onTick;\r\n    }\r\n\r\n    tick() {\r\n        // TODO: Tickcount, random event on tickcount\r\n        var newState = {...this.gameState};\r\n        if(this.gameState.jobAssignments.gatherRelics) {\r\n            const relicsMultiplier = 1\r\n                + (this.gameState.researchState.betterShovels ? .5 : 0);\r\n            newState.resourceState.relics += this.gameState.jobAssignments.gatherRelics*.5*this.tickRatio*relicsMultiplier;\r\n        }\r\n        if(this.gameState.jobAssignments.studyRelics && this.gameState.resourceState.relics >= this.gameState.jobAssignments.gatherRelics*50*this.tickRatio) {\r\n            newState.resourceState.relics -= this.gameState.jobAssignments.gatherRelics*50*this.tickRatio;\r\n            newState.resourceState.knowledge += this.gameState.jobAssignments.gatherRelics*.5*this.tickRatio;\r\n        }\r\n        if(this.gameState.researchState.profiteering) {\r\n            // Money accrual\r\n            this.gameState.resourceState.money += .25*this.tickRatio;\r\n        }\r\n\r\n        if(this.tickNumber >= this.maxTicks ) {\r\n            // every 5s, test for an event\r\n            randomEvent(newState);\r\n            this.tickNumber = 1;\r\n        }\r\n        this.gameState = newState;\r\n        this.emitTick(newState);\r\n        this.tickNumber++;\r\n    }\r\n\r\n    updateState(gameState: GameState) {\r\n        clearInterval(this.resourceClockId);\r\n        this.resourceClockId = setInterval(() => this.tick(), TICK_SPEED);\r\n    }\r\n\r\n    clearClock() {\r\n        clearInterval(this.resourceClockId);\r\n        clearInterval(this.saveClockId);\r\n    }\r\n\r\n}\r\n","import * as React from \"react\";\r\nimport {JournalState} from \"../core/game-state\";\r\nimport {RelicsButton} from \"../shared/relicsButton\";\r\nimport {ACHIEVEMENT_ENTRY_TYPE, BLOOD_ENTRY_TYPE, COMMON_ENTRY_TYPE, DetailedEntry} from \"../core/journal\";\r\n\r\ntype JournalProps = {\r\n    journalState: JournalState,\r\n    clearLog: any\r\n}\r\n\r\nexport class AdventureLog extends React.Component<JournalProps> {\r\n    getClassName(entry: DetailedEntry) {\r\n        let className = \"padded-text journal__entry\";\r\n        switch (entry.entryType) {\r\n            case ACHIEVEMENT_ENTRY_TYPE:\r\n                className += \" journal__entry--achievement\";\r\n                break;\r\n            case BLOOD_ENTRY_TYPE:\r\n                className += \" blood-text\";\r\n                break;\r\n            case COMMON_ENTRY_TYPE:\r\n            default:\r\n        }\r\n        return className;\r\n    }\r\n\r\n    render() {\r\n        const { journalState, clearLog } = this.props;\r\n        const entryList = journalState.entries.slice(0).reverse().map((entry) =>\r\n            <div className={this.getClassName(entry)}>\r\n                {entry.entry}\r\n            </div>\r\n        );\r\n        return (\r\n            <div className=\"panel--left-align journal-panel\">\r\n                <div className=\"button-container\">\r\n                    <RelicsButton onClick={() => clearLog()}>Clear Log</RelicsButton>\r\n                </div>\r\n                <div className=\"journal\">{entryList}</div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","import * as React from \"react\";\r\nimport { GameState } from \"../core/game-state\";\r\nimport {countAvailableStudents} from \"../economy/jobAssignments\";\r\n\r\ntype ResourceProps = {\r\n    gameState: GameState,\r\n}\r\n\r\nexport class ResourcePanel extends React.Component<ResourceProps> {\r\n\r\n    render() {\r\n        const { gameState } = this.props;\r\n\r\n        return (\r\n            <div>\r\n                <div className=\"panel--center-align resources__container\">\r\n                    {!!gameState.resourceState.relics &&\r\n                        <div>Relics: {gameState.resourceState.relics.toFixed()}</div>}\r\n                    {gameState.researchState.profiteering &&\r\n                        <div className=\"money-text\">Money: {gameState.resourceState.money.toFixed()}</div>}\r\n                    {!!gameState.resourceState.knowledge &&\r\n                        <div className=\"knowledge-text\">Knowledge: {gameState.resourceState.knowledge.toFixed()}</div>}\r\n                    {!!gameState.resourceState.blood &&\r\n                        <div className=\"blood-text\">Blood: {gameState.resourceState.blood.toFixed()}</div>}\r\n                </div>\r\n                {!!gameState.resourceState.students &&\r\n                    <div className=\"panel--center-align resources__container\">\r\n                        <div>Students: {countAvailableStudents(gameState)}/{gameState.resourceState.students}</div>\r\n                    </div>\r\n                }\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","import React from \"react\";\r\n\r\ntype NavButtonProps = {\r\n  onClick: any;\r\n  disabled?: any | undefined;\r\n  selected?: boolean | undefined;\r\n}\r\n\r\nexport class NavButton extends React.Component<NavButtonProps> {\r\n\r\n    render() {\r\n        let className = \"nav-button\";\r\n        if(this.props.disabled) className += \" nav-button--disabled\";\r\n        if(this.props.selected) className += \" nav-button--selected\";\r\n\r\n        const clickFunc = this.props.disabled ? () => {} : this.props.onClick;\r\n        return (\r\n            <span\r\n                className={className}\r\n                onClick={clickFunc}>\r\n                {this.props.children}\r\n            </span>\r\n        )\r\n    }\r\n}","import React from \"react\";\r\nimport {GENERATORS_PANEL_KEY, LAB_KEY, SETTINGS_PANEL_KEY} from \"../config/constants\";\r\nimport {NavButton} from \"./navButton\";\r\nimport {GameState} from \"../core/game-state\";\r\n\r\ntype PanelSelectorProps = {\r\n    onChangePanel: any,\r\n    selected: string,\r\n    gameState: GameState\r\n}\r\nexport class PanelSelector extends React.Component<PanelSelectorProps>{\r\n    render() {\r\n        const {onChangePanel, selected, gameState} = this.props;\r\n        return (\r\n            <div className={\"nav-panel\"}>\r\n                <NavButton selected={selected === GENERATORS_PANEL_KEY}\r\n                           onClick={() => onChangePanel(GENERATORS_PANEL_KEY)}>\r\n                    Dig Site 1\r\n                </NavButton>\r\n                {gameState.resourceState.students >= 10 &&\r\n                    <NavButton selected={selected === LAB_KEY}\r\n                               onClick={() => onChangePanel(LAB_KEY)}>\r\n                        Research Lab\r\n                    </NavButton>\r\n                }\r\n\r\n                <NavButton selected={selected === SETTINGS_PANEL_KEY}\r\n                           onClick={() => onChangePanel(SETTINGS_PANEL_KEY)}>\r\n                    Settings\r\n                </NavButton>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","import {GameState} from \"../../core/game-state\";\r\nimport {Transaction} from \"../Transaction\";\r\nimport React from \"react\";\r\n\r\nexport class KnowledgeTransaction extends Transaction {\r\n    static updateClock = false;\r\n\r\n    static commitTransaction(gameState: GameState, amount: number): GameState {\r\n        if(KnowledgeTransaction.isValidPurchase(gameState, amount)) {\r\n            const currCost = KnowledgeTransaction.getCost(gameState, amount);\r\n\r\n            gameState.resourceState.relics -= currCost;\r\n            gameState.resourceState.knowledge += amount;\r\n        }\r\n        return gameState;\r\n    }\r\n\r\n    static isValidPurchase(gameState: GameState, amount: number): boolean {\r\n        const currCost = KnowledgeTransaction.getCost(gameState, amount);\r\n        return gameState.resourceState.relics >= currCost;\r\n    }\r\n\r\n    static getCost(gameState: GameState, purchaseAmount: number) {\r\n        return 100 * purchaseAmount;\r\n    }\r\n\r\n    static buildTooltip(gameState: GameState): any {\r\n        return (\r\n            <div className=\"relics-tooltip\">\r\n                <div className=\"relics-tooltip__description\">\r\n                    Peruse your collection, perhaps you can find something useful.\r\n                </div>\r\n                <div className=\"relics-tooltip__cost\">\r\n                    <div>Relics: 100</div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","import { Transaction } from \"../Transaction\";\r\nimport {GameState} from \"../../core/game-state\";\r\nimport React from \"react\";\r\n\r\nexport class StudentKnowledge extends Transaction {\r\n    static updateClock = false;\r\n\r\n    static commitTransaction(gameState: GameState, amount: number): GameState {\r\n        if(StudentKnowledge.isValidPurchase(gameState, amount)) {\r\n            gameState.resourceState.knowledge -= 10;\r\n            gameState.researchState.studentKnowledge = true;\r\n        }\r\n        return gameState;\r\n    }\r\n\r\n    static isValidPurchase(gameState: GameState, amount: number): boolean {\r\n        return gameState.resourceState.knowledge >= 10;\r\n    }\r\n\r\n    static buildTooltip(gameState: GameState): any {\r\n        return (\r\n            <div className=\"relics-tooltip\">\r\n                <div className=\"relics-tooltip__description\">\r\n                    I know enough about this to teach others to do the work, albeit at a reduced efficiency.\r\n                </div>\r\n                <div className=\"relics-tooltip__cost\">\r\n                    <div className=\"knowledge-text\">Knowledge: 10</div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","import {Transaction} from \"../Transaction\";\r\nimport {GameState} from \"../../core/game-state\";\r\nimport {ACHIEVEMENT_ENTRY_TYPE, addDetailedJournalEntry} from \"../../core/journal\";\r\nimport React from \"react\";\r\n\r\nexport class Profit extends Transaction {\r\n    static updateClock = false;\r\n\r\n    static commitTransaction(gameState: GameState, amount: number): GameState {\r\n        if(Profit.isValidPurchase(gameState, amount)) {\r\n            gameState.resourceState.knowledge -= 20;\r\n            gameState.researchState.profiteering = true;\r\n            addDetailedJournalEntry(gameState, {\r\n                entry: \"A patron finds your work interesting, and provides a slow but steady drip of funding. Relic speed x 1.5.\",\r\n                entryType: ACHIEVEMENT_ENTRY_TYPE\r\n            });\r\n        }\r\n        return gameState;\r\n    }\r\n\r\n    static isValidPurchase(gameState: GameState, amount: number): boolean {\r\n        return gameState.resourceState.knowledge >= 20;\r\n    }\r\n\r\n    static buildTooltip(gameState: GameState): any {\r\n        return (\r\n            <div className=\"relics-tooltip\">\r\n                <div className=\"relics-tooltip__description\">\r\n                    With your student's help, you know enough now to fund this endeavor.\r\n                    A little embellishment never hurt...\r\n                </div>\r\n                <div className=\"relics-tooltip__cost\">\r\n                    <div className=\"knowledge-text\">Knowledge: 20</div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}","import {Transaction } from \"../Transaction\";\r\nimport {GameState} from \"../../core/game-state\";\r\nimport {ACHIEVEMENT_ENTRY_TYPE, addDetailedJournalEntry} from \"../../core/journal\";\r\nimport React from \"react\";\r\n\r\nexport class BetterShovels extends Transaction {\r\n    static updateClock = false;\r\n\r\n    static commitTransaction(gameState: GameState, amount: number): GameState {\r\n        if(BetterShovels.isValidPurchase(gameState, amount)) {\r\n            gameState.resourceState.money -= 50;\r\n            gameState.researchState.betterShovels = true;\r\n            addDetailedJournalEntry(gameState, {\r\n                entry: \"A patron finds your work interesting, and provides a slow but steady drip of funding.\",\r\n                entryType: ACHIEVEMENT_ENTRY_TYPE\r\n            });\r\n        }\r\n        return gameState;\r\n    }\r\n\r\n    static isValidPurchase(gameState: GameState, amount: number): boolean {\r\n        return gameState.resourceState.money >= 50;\r\n    }\r\n\r\n    static buildTooltip(gameState: GameState): any {\r\n        return (\r\n            <div className=\"relics-tooltip\">\r\n                <div className=\"relics-tooltip__description\">\r\n                    Buy the team their very first shovel. It's better than none.\r\n                </div>\r\n                <div className=\"relics-tooltip__cost\">\r\n                    <div className=\"money-text\">Money: 50</div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","import React from \"react\";\r\nimport {Transaction} from \"../Transaction\";\r\nimport {GameState} from \"../../core/game-state\";\r\nimport {addDetailedJournalEntry, BLOOD_ENTRY_TYPE} from \"../../core/journal\";\r\n\r\nexport class BloodWard extends Transaction {\r\n    static updateClock = false;\r\n\r\n    static commitTransaction(gameState: GameState, amount: number): GameState {\r\n        if(BloodWard.isValidPurchase(gameState, amount)) {\r\n            gameState.resourceState.relics -= 100;\r\n            gameState.resourceState.blood -= 1;\r\n            gameState.resourceState.knowledge -= 20;\r\n\r\n            gameState.researchState.bloodWard = true;\r\n            addDetailedJournalEntry(gameState, {\r\n                entry: \"Following instructions on the ruins, you assemble a ward. That should protect this place.\",\r\n                entryType: BLOOD_ENTRY_TYPE\r\n            });\r\n        }\r\n        return gameState;\r\n    }\r\n\r\n    static isValidPurchase(gameState: GameState, amount: number): boolean {\r\n        return gameState.resourceState.blood >= 1 && gameState.resourceState.knowledge >= 20 && gameState.resourceState.relics >= 100;\r\n    }\r\n\r\n    static buildTooltip(gameState: GameState): any {\r\n        return (\r\n            <div className=\"relics-tooltip\">\r\n                <div className=\"relics-tooltip__description\">\r\n                    The excavated ruins are carved with a repeating pattern, and no one has disappeared in there yet.\r\n                </div>\r\n                <div className=\"relics-tooltip__cost\">\r\n                    <div>Relics: 100</div>\r\n                    <div className=\"knowledge-text\">Knowledge: 20</div>\r\n                    <div className=\"blood-text\">Blood: 1</div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}","import React from \"react\";\r\nimport {GameState} from \"../core/game-state\";\r\nimport {labFirstUnlock} from \"../core/achievements\";\r\nimport {RelicsButton} from \"../shared/relicsButton\";\r\nimport {KnowledgeTransaction} from \"../economy/transactions/KnowledgeTransaction\";\r\nimport {StudentKnowledge} from \"../economy/researches/studentKnowledge\";\r\nimport {AssignWorkerOptions} from \"../shared/AssignWorkerOptions\";\r\nimport {\r\n    assignStudyRelics,\r\n    countAvailableStudents,\r\n    removeStudyRelics\r\n} from \"../economy/jobAssignments\";\r\nimport ReactTooltip from \"react-tooltip\";\r\nimport {Profit} from \"../economy/researches/profit\";\r\nimport {BetterShovels} from \"../economy/researches/betterShovels\";\r\nimport {BloodWard} from \"../economy/researches/bloodWard\";\r\n\r\ntype LabProps = {\r\n    gameState: GameState;\r\n    onPurchase: any;\r\n}\r\n\r\nexport class ResearchLab extends React.Component<LabProps> {\r\n    componentDidMount(): void {\r\n        labFirstUnlock(this.props.gameState);\r\n    }\r\n\r\n    assignStudentsStudy = (amount: number) => assignStudyRelics(amount, this.props.gameState);\r\n    removeStudentsStudy = (amount: number) => removeStudyRelics(amount, this.props.gameState);\r\n\r\n    render() {\r\n        const { gameState, onPurchase } = this.props;\r\n        const availableStudents = countAvailableStudents(gameState);\r\n        return (\r\n            <div>\r\n                <div className=\"button-container\">\r\n                    <RelicsButton\r\n                        disabled={!KnowledgeTransaction.isValidPurchase(gameState, 1)}\r\n                        onClick={() => onPurchase(1, KnowledgeTransaction.commitTransaction)}\r\n                        id=\"studyRelics\"\r\n                        tooltip={KnowledgeTransaction.buildTooltip(gameState)}\r\n                    >\r\n                        Study Relics\r\n                    </RelicsButton>\r\n                </div>\r\n                {gameState.researchState.studentKnowledge &&\r\n                    <div>\r\n                        <AssignWorkerOptions\r\n                            id=\"studentsStudying\"\r\n                            assignWorkers={(amount: number) =>this.assignStudentsStudy(amount)}\r\n                            removeWorkers={(amount:number) => this.removeStudentsStudy(amount)}\r\n                            currentlyAssigned={gameState.jobAssignments.studyRelics}\r\n                            availableWorkers={availableStudents}\r\n                            tooltip={\"Produces 1 knowledge per 100 relics.\"}\r\n                        >\r\n                            Student Studying Relics\r\n                        </AssignWorkerOptions>\r\n                    </div>\r\n                }\r\n\r\n                <div>\r\n                    <p>Research</p>\r\n                    {!gameState.researchState.studentKnowledge && (\r\n                            <RelicsButton\r\n                                disabled={!StudentKnowledge.isValidPurchase(gameState, 1)}\r\n                                onClick={() => onPurchase(1, StudentKnowledge.commitTransaction)}\r\n                                id=\"researchStudyRelics\"\r\n                                className={\"knowledge-button\"}\r\n                                tooltip={StudentKnowledge.buildTooltip(gameState)}\r\n                            >\r\n                                Studious Students\r\n                            </RelicsButton>\r\n                    )}\r\n                    {(gameState.researchState.studentKnowledge && !gameState.researchState.profiteering) && (\r\n                        <RelicsButton\r\n                            disabled={!Profit.isValidPurchase(gameState, 1)}\r\n                            onClick={() => onPurchase(1, Profit.commitTransaction)}\r\n                            id=\"profiteering\"\r\n                            className={\"knowledge-button\"}\r\n                            tooltip={Profit.buildTooltip(gameState)}\r\n                        >\r\n                            Procure Funding\r\n                        </RelicsButton>\r\n                    )}\r\n                    {(gameState.researchState.profiteering && !gameState.researchState.betterShovels) && (\r\n                        <RelicsButton\r\n                            disabled={!BetterShovels.isValidPurchase(gameState, 1)}\r\n                            onClick={() => onPurchase(1, BetterShovels.commitTransaction)}\r\n                            id=\"shovel1\"\r\n                            className={\"money-button\"}\r\n                            tooltip={BetterShovels.buildTooltip(gameState)}\r\n                        >\r\n                            Better Shovels\r\n                        </RelicsButton>\r\n                    )}\r\n                    {(gameState.researchState.profiteering && !gameState.researchState.bloodWard) && (\r\n                        <RelicsButton\r\n                            disabled={!BloodWard.isValidPurchase(gameState, 1)}\r\n                            onClick={() => onPurchase(1, BloodWard.commitTransaction)}\r\n                            id=\"blood-ward\"\r\n                            className={\"blood-button\"}\r\n                            tooltip={BloodWard.buildTooltip(gameState)}\r\n                        >\r\n                            Inscribe a ward\r\n                        </RelicsButton>\r\n                    )}\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","import {GameState} from \"./game-state\";\r\nimport {ACHIEVEMENT_ENTRY_TYPE, addDetailedJournalEntry} from \"./journal\";\r\n\r\nexport function labFirstUnlock(gameState: GameState) {\r\n    if(!gameState.achievements.labUnlocked) {\r\n        gameState.achievements.labUnlocked = true;\r\n        addDetailedJournalEntry(gameState, {\r\n            entry: \"With your new found stash of relics, you retreat to your personal laboratory!\",\r\n            entryType: ACHIEVEMENT_ENTRY_TYPE,\r\n        });\r\n    }\r\n}\r\n","import * as React from \"react\";\r\nimport {loadSave, newSave, saveGame, saveGameExists} from \"./saveService\";\r\nimport {RelicPanel} from \"../panels/relicPanel\";\r\nimport {Settings} from \"../panels/settings\";\r\nimport {GameState} from \"./game-state\";\r\nimport {GameClock} from \"./game-clock\";\r\nimport {GENERATORS_PANEL_KEY, LAB_KEY, SETTINGS_PANEL_KEY} from \"../config/constants\";\r\nimport {addJournalEntry, clearJournal} from \"./journal\";\r\nimport {AdventureLog} from \"../panels/adventureLog\";\r\nimport {ResourcePanel} from \"../panels/resourcePanel\";\r\nimport {PanelSelector} from \"../layout/panelSelector\";\r\nimport {ResearchLab} from \"../panels/lab\";\r\n\r\ntype CoreProps = {}\r\ntype CoreState = {\r\n    gameState: GameState,\r\n    activePanel: string\r\n}\r\n\r\nexport class CorePanel extends React.Component<CoreProps, CoreState> {\r\n    clock: GameClock | undefined;\r\n    readonly state = {\r\n        gameState: saveGameExists() ? loadSave() : newSave(),\r\n        activePanel: GENERATORS_PANEL_KEY\r\n    };\r\n\r\n    componentDidMount(): void {\r\n        // TODO: Calculate offline progress before starting clock\r\n        this.clock = new GameClock(this.state.gameState, (newState: GameState) => this.onTick(newState));\r\n        this.setState({activePanel: GENERATORS_PANEL_KEY});\r\n    }\r\n\r\n    onTick(newState: GameState) {\r\n        this.setState({gameState: newState});\r\n    }\r\n\r\n    addCurrency(currencyName: string, currencyAmount: number) {\r\n        // TODO: Abstract this for manual action & future FAME multiplier\r\n        const newState = {...this.state.gameState};\r\n        newState.resourceState.relics += currencyAmount;\r\n        addJournalEntry(newState, \"You dust off some potsherds.\");\r\n        this.setState({gameState: newState})\r\n    }\r\n\r\n    makePurchase(purchaseAmount: number, transaction: any) {\r\n        let newState = {...this.state.gameState};\r\n        newState = transaction(newState, purchaseAmount);\r\n\r\n        this.setState({gameState: newState});\r\n        // if(purchaseType.updateClock) {\r\n        //     // @ts-ignore\r\n        //     this.clock.updateState(newState);\r\n        // }\r\n    }\r\n\r\n    clearLog() {\r\n        clearJournal(this.state.gameState)\r\n    }\r\n\r\n    changeActivePanel(panelKey: string) {\r\n        this.setState({activePanel: panelKey});\r\n    }\r\n\r\n    save() {\r\n        const newState = {...this.state.gameState};\r\n        this.setState({gameState: newState});\r\n        saveGame(newState, true);\r\n    }\r\n\r\n    clearSave() {\r\n        // @ts-ignore\r\n        this.clock.clearClock();\r\n        const newState = newSave();\r\n        newState.saveTime = new Date();\r\n        this.setState({gameState: newState});\r\n        saveGame(newState);\r\n        // eslint-disable-next-line no-restricted-globals\r\n        location.reload();\r\n    }\r\n\r\n    render() {\r\n        let activePanel;\r\n        switch (this.state.activePanel) {\r\n            case SETTINGS_PANEL_KEY:\r\n                activePanel = (\r\n                    <Settings\r\n                        gameState={this.state.gameState}\r\n                        onSave={() => this.save()}\r\n                        onClearSave={() => this.clearSave()}\r\n                    />\r\n                );\r\n                break;\r\n            case LAB_KEY:\r\n                activePanel = (\r\n                    <ResearchLab\r\n                        gameState={this.state.gameState}\r\n                        onPurchase={(purchaseAmount: number, transaction: any) => this.makePurchase(purchaseAmount, transaction)}\r\n                    />\r\n                );\r\n                break;\r\n            case GENERATORS_PANEL_KEY:\r\n            default:\r\n                activePanel = (\r\n                    <RelicPanel\r\n                        gameState={this.state.gameState}\r\n                        onAddCurrency={(currencyName: string, currencyAmount: number) => this.addCurrency(currencyName, currencyAmount)}\r\n                        onPurchase={(purchaseAmount: number, transaction: any) => this.makePurchase(purchaseAmount, transaction)}\r\n                    />\r\n                );\r\n        }\r\n\r\n        return (\r\n            <div className=\"core-panel\">\r\n                <div className=\"core-panel__flex\">\r\n                    <div className=\"core-panel__left-column\">\r\n                        <AdventureLog clearLog={() => this.clearLog()} journalState={this.state.gameState.journalState}/>\r\n                    </div>\r\n                    <div className=\"core-panel__center-column\">\r\n                        <PanelSelector onChangePanel={(panelKey: string) => this.changeActivePanel(panelKey)}\r\n                            selected={this.state.activePanel}\r\n                            gameState={this.state.gameState}\r\n                        />\r\n                        {activePanel}\r\n                    </div>\r\n                    <div className=\"core-panel__right-column\">\r\n                        <ResourcePanel gameState={this.state.gameState}/>\r\n                    </div>\r\n                </div>\r\n\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","import React from 'react';\r\nimport './app.scss';\r\nimport {CorePanel} from \"./core/corePanel\";\r\nimport {ThemeContext, themes} from \"./layout/theme-context\";\r\nimport {loadSave, newSave, saveGameExists} from \"./core/saveService\";\r\n\r\ntype AppProps = {}\r\ntype AppState = {\r\n    theme: any,\r\n    toggleTheme: () => {}\r\n}\r\n\r\nclass App extends React.Component<AppProps, AppState> {\r\n    readonly state: AppState;\r\n    toggleTheme: any;\r\n\r\n    constructor(props: any) {\r\n        super(props);\r\n        const darkMode = saveGameExists() && loadSave().settings.darkMode;\r\n\r\n        this.toggleTheme = () => {\r\n            this.setState(state => ({\r\n                theme:\r\n                    state.theme === themes.dark\r\n                        ? themes.light\r\n                        : themes.dark,\r\n            }));\r\n        };\r\n\r\n        this.state = {\r\n            theme: darkMode ? themes.dark : themes.light,\r\n            toggleTheme: this.toggleTheme,\r\n        };\r\n\r\n    }\r\n\r\n    render() {\r\n        return (\r\n                <ThemeContext.Provider value={this.state}>\r\n                    <div className={this.state.theme.themeClass}>\r\n                        <CorePanel/>\r\n                    </div>\r\n                </ThemeContext.Provider>\r\n        );\r\n    }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resource-display are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(\r\n      process.env.PUBLIC_URL,\r\n      window.location.href\r\n    );\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './app';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}