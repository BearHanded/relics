{"version":3,"sources":["core/journal.ts","config/constants.ts","core/game-state.ts","core/saveService.ts","economy/Transaction.ts","economy/transactions/studentTransaction.tsx","economy/jobAssignments.ts","shared/relicsButton.tsx","shared/AssignWorkerOptions.tsx","economy/transactions/shedTransaction.tsx","panels/relicPanel.tsx","layout/theme-context.ts","panels/settings.tsx","core/event-manager.ts","core/game-clock.ts","panels/adventureLog.tsx","panels/resourcePanel.tsx","layout/navButton.tsx","layout/panelSelector.tsx","economy/transactions/KnowledgeTransaction.tsx","economy/research/betterShovels.tsx","economy/research/bloodWard.tsx","economy/research/profit.tsx","economy/research/studentKnowledge.tsx","economy/research/mapTheRuins.tsx","economy/research/tours.tsx","economy/researchManager.ts","shared/researchButton.tsx","panels/lab.tsx","core/achievements.ts","core/corePanel.tsx","app.tsx","serviceWorker.ts","index.tsx"],"names":["addJournalEntry","gameState","entry","journalState","entries","push","entryType","length","shift","addDetailedJournalEntry","GameState","resourceState","ResourceState","jobAssignments","JobAssignments","JournalState","saveTime","Date","settings","SettingsState","achievements","Achievements","researchState","ResearchState","relics","relicCap","relicRate","relicGenerator","sheds","students","knowledge","knowledgeRate","blood","bloodRate","money","moneyRate","moneyCap","fame","whispers","gatherRelics","studyRelics","giftShop","darkMode","labUnlocked","studentKnowledge","profiteering","betterShovels","bloodWard","mapTheGrounds","tours","saveGameExists","localStorage","getItem","loadSave","string","newState","mergeStateWithDefault","JSON","parse","atob","newSave","saveGame","manualSave","setItem","btoa","stringify","Transaction","isValidPurchase","amount","commitTransaction","updateClock","Research","isAvailable","buildTooltip","title","className","id","StudentTransaction","currCost","getCost","purchaseAmount","sum","theoreticalAmt","i","removeGatherers","assignStudyRelics","countAvailableStudents","removeStudyRelics","assignedStudents","RelicsButton","this","props","tooltip","children","disabled","onClick","compact","clickFunc","dataTipAttr","key","place","effect","React","Component","AssignWorkerOptions","assignWorkers","removeWorkers","currentlyAssigned","availableWorkers","ShedTransaction","RelicPanel","onAddCurrency","onPurchase","availableStudents","studentsHired","assignGatherers","assignGiftShop","removeGiftShop","themes","light","themeClass","dark","ThemeContext","createContext","theme","toggleTheme","Settings","onSave","onClearSave","Consumer","onToggleTheme","href","randomEvent","diceRoll","Math","floor","random","GameClock","onTick","saveClockId","resourceClockId","tickRatio","emitTick","maxTicks","lastTickDate","randomEventTimer","setInterval","updateState","TICK_SPEED","tickTimeStamp","seconds","getTime","randomEventsForDuration","calibrate","relicsPerSecond","knowledgePerSecond","moneyPerSecond","relicsMultiplier","manageRandomEvent","clearInterval","tick","AdventureLog","clearLog","entryList","slice","reverse","map","getClassName","ResourcePanelEntry","renderRate","undefined","rate","rateText","cap","ResourcePanel","toFixed","NavButton","selected","PanelSelector","onChangePanel","KnowledgeTransaction","BetterShovels","BloodWard","Profit","StudentKnowledge","MapTheRuins","Tours","allResearches","ResearchButton","research","ResearchLab","assignStudentsStudy","removeStudentsStudy","availableResearch","filter","r","getAvailableResearches","createResearchButton","CorePanel","clock","state","activePanel","setState","currencyName","currencyAmount","transaction","panelKey","confirm","clearClock","location","reload","save","clearSave","makePurchase","addCurrency","changeActivePanel","App","Provider","value","Boolean","window","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.c3441c32.chunk.js","sourcesContent":["import {GameState} from \"./game-state\";\r\nimport {MAX_LOG_SIZE} from \"../config/constants\";\r\n\r\nexport const ACHIEVEMENT_ENTRY_TYPE = \"ACHIEVEMENT\";\r\nexport const COMMON_ENTRY_TYPE = \"COMMON\";\r\nexport const BLOOD_ENTRY_TYPE = \"BLOOD\";\r\n\r\nexport type DetailedEntry = {\r\n    entry: string,\r\n    entryType: string,\r\n}\r\n\r\nexport function addJournalEntry(gameState: GameState, entry: string){\r\n    gameState.journalState.entries.push({\r\n        entry: entry,\r\n        entryType: COMMON_ENTRY_TYPE\r\n    });\r\n    if(gameState.journalState.entries.length >= MAX_LOG_SIZE) {\r\n        gameState.journalState.entries.shift();\r\n    }\r\n    return gameState;\r\n}\r\n\r\nexport function addDetailedJournalEntry(gameState: GameState, entry: DetailedEntry){\r\n    gameState.journalState.entries.push(entry);\r\n    if(gameState.journalState.entries.length >= MAX_LOG_SIZE) {\r\n        gameState.journalState.entries.shift();\r\n    }\r\n    return gameState;\r\n}\r\n\r\nexport function clearJournal(gameState: GameState) {\r\n    gameState.journalState.entries = [];\r\n}\r\n","export const MIN_SAVE_REWARD_TIME = 24;\r\nexport const TICK_SPEED = 50;\r\nexport const SECONDS_PER_EVENT_CHECK = 5;\r\nexport const MAX_LOG_SIZE = 25;\r\n\r\n// Base Caps\r\nexport const BASE_RELIC_CAP = 100;\r\nexport const BASE_MONEY_CAP = 50;\r\n\r\n// Panel Keys\r\nexport const SETTINGS_PANEL_KEY = \"SETTINGS\";\r\nexport const GENERATORS_PANEL_KEY = \"GENERATORS\";\r\nexport const LAB_KEY = \"LAB\";\r\n","import {COMMON_ENTRY_TYPE, DetailedEntry} from \"./journal\";\r\n\r\nexport class GameState {\r\n    resourceState: ResourceState = new ResourceState();\r\n    jobAssignments: JobAssignments = new JobAssignments();\r\n    journalState: JournalState = new JournalState();\r\n    saveTime: Date = new Date();\r\n    settings: SettingsState = new SettingsState();\r\n    achievements: Achievements = new Achievements();\r\n    researchState: ResearchState = new ResearchState();\r\n}\r\n\r\nexport class ResourceState {\r\n    relics: number = 0;\r\n    relicCap: number = 0;\r\n    relicRate: number = 0;\r\n    relicGenerator: number = 0;\r\n    sheds: number = 0;\r\n    students: number = 0;\r\n    knowledge: number = 0;\r\n    knowledgeRate: number = 0;\r\n    blood: number = 0;\r\n    bloodRate = 0;\r\n    money: number = 0;\r\n    moneyRate = 0;\r\n    moneyCap = 0;\r\n    fame: number = 0;\r\n    whispers: number = 0;\r\n}\r\n\r\nexport class JobAssignments {\r\n    gatherRelics: number = 0;\r\n    studyRelics: number = 0;\r\n    giftShop: number = 0;\r\n}\r\n\r\nexport class JournalState {\r\n    entries: DetailedEntry[] = [{\r\n        entry: \"The new dig site lays before me, I wonder what treasures lay yet unearthed?\",\r\n        entryType: COMMON_ENTRY_TYPE\r\n    }];\r\n}\r\n\r\nexport class SettingsState {\r\n    darkMode: boolean = true;\r\n}\r\n\r\nexport class Achievements {\r\n    labUnlocked: boolean = false;\r\n}\r\n\r\nexport class ResearchState {\r\n    studentKnowledge: boolean = false;\r\n    profiteering: boolean = false;\r\n    betterShovels: boolean = false;\r\n    bloodWard: boolean = false;\r\n    mapTheGrounds: boolean = false;\r\n    tours: boolean = false;\r\n}\r\n\r\nexport function mergeStateWithDefault(gameState: GameState): GameState {\r\n    const newState = {...new GameState(), ...gameState};\r\n    newState.resourceState = {...newState.resourceState, ...gameState.resourceState};\r\n    newState.jobAssignments = {...newState.jobAssignments, ...gameState.jobAssignments};\r\n    newState.journalState = {...newState.journalState, ...gameState.journalState};\r\n    newState.saveTime = gameState.saveTime;\r\n    newState.settings = {...newState.settings, ...gameState.settings};\r\n    newState.achievements = {...newState.achievements, ...gameState.achievements};\r\n    newState.researchState = {...newState.researchState, ...gameState.researchState};\r\n\r\n    return newState;\r\n}\r\n","import {GameState, mergeStateWithDefault} from \"./game-state\";\r\nimport {addJournalEntry} from \"./journal\";\r\n\r\nexport function saveGameExists() {\r\n    return !!localStorage.getItem(\"RelicsSave\");\r\n}\r\n\r\nexport function loadSave() {\r\n    const string = localStorage.getItem(\"RelicsSave\");\r\n    const save =  string ? JSON.parse(atob(string)) : null;\r\n    return mergeStateWithDefault(save);\r\n}\r\n\r\nexport function newSave(): GameState {\r\n    return new GameState();\r\n}\r\n\r\nexport function saveGame(gameState: GameState, manualSave: boolean = false) {\r\n    gameState.saveTime = new Date();\r\n    if(manualSave) addJournalEntry(gameState, \"Game Saved\");\r\n    localStorage.setItem(\"RelicsSave\", btoa(JSON.stringify(gameState)));\r\n}\r\n\r\n\r\nexport function exportSave(gameState: GameState) {\r\n    saveGame(gameState);\r\n    // TODO: export\r\n}\r\n\r\nexport function importSave(gameState: GameState) {\r\n    saveGame(gameState);\r\n    // TODO: import\r\n}\r\n","import {GameState } from \"../core/game-state\";\r\n\r\nexport class Transaction {\r\n    static isValidPurchase = (gameState: GameState, amount: number): boolean => false ;\r\n    static commitTransaction = (gameState: GameState, amount: number): GameState => {return gameState};\r\n    static updateClock: boolean = false;\r\n}\r\n\r\nexport class Research extends Transaction {\r\n    static isAvailable = (gameState: GameState): boolean => false;\r\n    static buildTooltip = (gameState: GameState): any => \"MISSING TOOLTIP\";\r\n    static title: string = \"MISSING TITLE\";\r\n    static className = \"\";\r\n    static id = \"\";\r\n}\r\n","import { Transaction } from \"../Transaction\";\r\nimport {GameState} from \"../../core/game-state\";\r\nimport React from \"react\";\r\n\r\nexport class StudentTransaction extends Transaction{\r\n    updateClock = false;\r\n\r\n    static commitTransaction(gameState: GameState, amount: number): GameState {\r\n        if(StudentTransaction.isValidPurchase(gameState, amount)) {\r\n            const currCost = StudentTransaction.getCost(gameState, amount);\r\n\r\n            gameState.resourceState.relics -= currCost;\r\n            gameState.resourceState.students += amount;\r\n        }\r\n        return gameState;\r\n    }\r\n\r\n    static isValidPurchase(gameState: GameState, amount: number): boolean {\r\n        const currCost = StudentTransaction.getCost(gameState, amount);\r\n\r\n        return gameState.resourceState.relics >= currCost;\r\n    }\r\n\r\n    static getCost(gameState: GameState, purchaseAmount: number) {\r\n        let sum = 0;\r\n        let theoreticalAmt = gameState.resourceState.students || 0;\r\n        for (let i = 0; i < purchaseAmount; i++) {\r\n            sum += 10 + theoreticalAmt * 5;\r\n            theoreticalAmt++;\r\n        }\r\n        return sum;\r\n    }\r\n\r\n    static buildTooltip(gameState: GameState): any {\r\n        return (\r\n            <div className=\"relics-tooltip\">\r\n                <div className=\"relics-tooltip__description\">\r\n                    Hire some students to dust off relics for you.\r\n                    They work for relics.\r\n                </div>\r\n                <div className=\"relics-tooltip__cost\">\r\n                    <div>Relics: {StudentTransaction.getCost(gameState, 1)}</div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","import {GameState} from \"../core/game-state\";\r\n\r\n// Gather\r\nexport function assignGatherers(amount: number, gameState: GameState){\r\n    if(countAvailableStudents(gameState) >= amount) {\r\n        gameState.jobAssignments.gatherRelics += amount;\r\n    }\r\n}\r\nexport function removeGatherers(amount: number, gameState: GameState){\r\n    gameState.jobAssignments.gatherRelics -= amount;\r\n    if(gameState.jobAssignments.gatherRelics < 0) gameState.jobAssignments.gatherRelics = 0;\r\n}\r\n\r\n// Study\r\nexport function assignStudyRelics(amount: number, gameState: GameState){\r\n    if(countAvailableStudents(gameState) >= amount) {\r\n        gameState.jobAssignments.studyRelics += amount;\r\n    }\r\n}\r\nexport function removeStudyRelics(amount: number, gameState: GameState){\r\n    gameState.jobAssignments.studyRelics -= amount;\r\n    if(gameState.jobAssignments.studyRelics < 0) gameState.jobAssignments.studyRelics = 0;\r\n}\r\n\r\n// Work the gift shop\r\nexport function assignGiftShop(amount: number, gameState: GameState){\r\n    if(countAvailableStudents(gameState) >= amount) {\r\n        gameState.jobAssignments.giftShop += amount;\r\n    }\r\n}\r\nexport function removeGiftShop(amount: number, gameState: GameState){\r\n    gameState.jobAssignments.giftShop -= amount;\r\n    if(gameState.jobAssignments.giftShop < 0) gameState.jobAssignments.studyRelics = 0;\r\n}\r\n\r\nexport function countAvailableStudents(gameState: GameState) {\r\n    const assignedStudents = (gameState.jobAssignments.gatherRelics || 0)\r\n        + (gameState.jobAssignments.studyRelics || 0);\r\n    return gameState.resourceState.students - assignedStudents;\r\n}\r\n","import React from \"react\";\r\nimport ReactTooltip from \"react-tooltip\";\r\n\r\ntype RelicsButtonProps = {\r\n  onClick: any;\r\n  id?: string; // Must be provided for tooltip to work\r\n  disabled?: any;\r\n  tooltip?: any;\r\n  compact?: boolean;\r\n  className?: string;\r\n}\r\n\r\nexport class RelicsButton extends React.Component<RelicsButtonProps> {\r\n\r\n    render() {\r\n        const { tooltip, id, children, disabled, onClick, compact } = this.props;\r\n        let className = \"relics-button\";\r\n        if(disabled) className += \" relics-button--disabled\";\r\n        if(compact) className += \" relics-button--compact\";\r\n        if(this.props.className) className += \" \" + this.props.className;\r\n\r\n        const clickFunc = disabled ? () => {} : onClick;\r\n        const dataTipAttr = {};\r\n        if(tooltip)\r\n        {\r\n            // @ts-ignore\r\n            dataTipAttr['data-tip'] = '';\r\n            // @ts-ignore\r\n            dataTipAttr['data-for'] = id;\r\n        }\r\n        return (\r\n            <span { ...dataTipAttr} id={id} key={id} className={className} onClick={clickFunc}>\r\n                {children}\r\n                {tooltip &&\r\n                    <ReactTooltip id={id} key={id} place=\"bottom\" effect=\"solid\">\r\n                        {tooltip}\r\n                    </ReactTooltip>\r\n                }\r\n            </span>\r\n        )\r\n    }\r\n}\r\n","import React from \"react\";\r\nimport {RelicsButton} from \"./relicsButton\";\r\nimport ReactTooltip from \"react-tooltip\";\r\n\r\ntype AssignWorkerOptionProps = {\r\n    id?:string,\r\n    tooltip?: string,\r\n    assignWorkers: any,\r\n    removeWorkers: any,\r\n    currentlyAssigned: number,\r\n    availableWorkers: number,\r\n}\r\n\r\nexport class AssignWorkerOptions extends React.Component<AssignWorkerOptionProps>{\r\n    render() {\r\n        const {\r\n            id,\r\n            tooltip,\r\n            children,\r\n            assignWorkers,\r\n            removeWorkers,\r\n            currentlyAssigned,\r\n            availableWorkers,\r\n        } = this.props;\r\n\r\n        const dataTipAttr = {};\r\n        if(tooltip)\r\n        {\r\n            // @ts-ignore\r\n            dataTipAttr['data-tip'] = '';\r\n            // @ts-ignore\r\n            dataTipAttr['data-for'] = id;\r\n        }\r\n        return (\r\n            <span { ...dataTipAttr} id={id} >\r\n                {children}: {currentlyAssigned || 0}\r\n                <span>\r\n                    <RelicsButton\r\n                        compact={true}\r\n                        disabled={currentlyAssigned <= 0}\r\n                        onClick={() => removeWorkers(1)}\r\n                    >\r\n                        -\r\n                    </RelicsButton>\r\n                    <RelicsButton\r\n                        compact={true}\r\n                        disabled={availableWorkers <= 0}\r\n                        onClick={() => assignWorkers(1)}>\r\n                        +\r\n                    </RelicsButton>\r\n                    <RelicsButton\r\n                        compact={true}\r\n                        disabled={availableWorkers <= 0}\r\n                        onClick={() => assignWorkers(availableWorkers)}>\r\n                        <u>+</u>\r\n                    </RelicsButton>\r\n                </span>\r\n                {tooltip &&\r\n                    <ReactTooltip id={id} place=\"bottom\" effect=\"solid\">\r\n                        {tooltip}\r\n                    </ReactTooltip>\r\n                }\r\n            </span>\r\n        );\r\n    }\r\n}\r\n","import { Transaction } from \"../Transaction\";\r\nimport {GameState} from \"../../core/game-state\";\r\nimport React from \"react\";\r\n\r\nexport class ShedTransaction extends Transaction{\r\n    updateClock = false;\r\n\r\n    static commitTransaction(gameState: GameState, amount: number): GameState {\r\n        if(ShedTransaction.isValidPurchase(gameState, amount)) {\r\n            const currCost = ShedTransaction.getCost(gameState, amount);\r\n\r\n            gameState.resourceState.money -= currCost;\r\n            gameState.resourceState.sheds += amount;\r\n        }\r\n        return gameState;\r\n    }\r\n\r\n    static isValidPurchase(gameState: GameState, amount: number): boolean {\r\n        const currCost = ShedTransaction.getCost(gameState, amount);\r\n        return gameState.resourceState.money >= currCost;\r\n    }\r\n\r\n    static getCost(gameState: GameState, purchaseAmount: number) {\r\n        let sum = 0;\r\n        let theoreticalAmt = gameState.resourceState.sheds || 0;\r\n        for (let i = 0; i < purchaseAmount; i++) {\r\n            sum += 5 + theoreticalAmt * 15;\r\n            theoreticalAmt++;\r\n        }\r\n        return sum;\r\n    }\r\n\r\n    static buildTooltip(gameState: GameState): any {\r\n        return (\r\n            <div className=\"relics-tooltip\">\r\n                <div className=\"relics-tooltip__description\">\r\n                    It turns out we don't need to keep our relics in a pile under a tarp.\r\n                    <br/>+50 relic storage.\r\n                </div>\r\n                <div className=\"relics-tooltip__cost\">\r\n                    <div className={\"money-text\"}>Money: {ShedTransaction.getCost(gameState, 1)}</div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","import * as React from \"react\";\r\nimport { GameState } from \"../core/game-state\";\r\nimport {StudentTransaction} from \"../economy/transactions/studentTransaction\";\r\nimport {\r\n    assignGatherers,\r\n    assignGiftShop,\r\n    countAvailableStudents,\r\n    removeGatherers,\r\n    removeGiftShop\r\n} from \"../economy/jobAssignments\";\r\nimport {RelicsButton} from \"../shared/relicsButton\";\r\nimport {AssignWorkerOptions} from \"../shared/AssignWorkerOptions\";\r\nimport {ShedTransaction} from \"../economy/transactions/shedTransaction\";\r\n\r\ntype GeneratorProps = {\r\n    gameState: GameState,\r\n    onPurchase: any,\r\n    onAddCurrency: any\r\n}\r\n\r\nexport class RelicPanel extends React.Component<GeneratorProps> {\r\n\r\n    render() {\r\n        const { gameState, onAddCurrency, onPurchase } = this.props;\r\n        const availableStudents = countAvailableStudents(gameState);\r\n        const studentsHired = gameState.resourceState.students >= 1;\r\n\r\n        return (\r\n            <div className=\"panel--left-align\">\r\n                <div className=\"button-container\">\r\n                    <RelicsButton onClick={() => onAddCurrency(\"relics\", 1)}>Look for relics</RelicsButton>\r\n                </div>\r\n                {studentsHired &&\r\n                    <AssignWorkerOptions\r\n                        assignWorkers={(amount: number) => assignGatherers(amount, this.props.gameState)}\r\n                        removeWorkers={(amount:number) => removeGatherers(amount, this.props.gameState)}\r\n                        currentlyAssigned={gameState.jobAssignments.gatherRelics}\r\n                        availableWorkers={availableStudents}>\r\n                        Gathering Relics\r\n                    </AssignWorkerOptions>\r\n                }\r\n                {gameState.researchState.tours &&\r\n                    <div>\r\n                        <AssignWorkerOptions\r\n                            assignWorkers={(amount: number) => assignGiftShop(amount, this.props.gameState)}\r\n                            removeWorkers={(amount:number) => removeGiftShop(amount, this.props.gameState)}\r\n                            currentlyAssigned={gameState.jobAssignments.giftShop}\r\n                            availableWorkers={availableStudents}>\r\n                            Gift Shop\r\n                        </AssignWorkerOptions>\r\n                    </div>\r\n                }\r\n                <br/>\r\n                <div>\r\n                    <div className=\"button-container\">\r\n                        <RelicsButton\r\n                                disabled={!StudentTransaction.isValidPurchase(gameState, 1)}\r\n                                onClick={() => onPurchase(1, StudentTransaction.commitTransaction)}\r\n                                id=\"hireStudent\"\r\n                                tooltip={StudentTransaction.buildTooltip(gameState)}\r\n                        >\r\n                            Hire a Student\r\n                        </RelicsButton>\r\n                    </div>\r\n                    {gameState.researchState.profiteering && <p>Buildings:</p> }\r\n                    {gameState.researchState.profiteering &&\r\n                        <RelicsButton\r\n                            disabled={!ShedTransaction.isValidPurchase(gameState, 1)}\r\n                            onClick={() => onPurchase(1, ShedTransaction.commitTransaction)}\r\n                            id=\"shed\"\r\n                            tooltip={ShedTransaction.buildTooltip(gameState)}\r\n                        >\r\n                            Storage Shed: {gameState.resourceState.sheds}\r\n                        </RelicsButton>\r\n                    }\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","import React from \"react\";\r\n\r\nexport const themes = {\r\n    light: {\r\n        themeClass: 'app app--light',\r\n    },\r\n    dark: {\r\n        themeClass: 'app app--dark',\r\n    },\r\n};\r\n\r\nexport const ThemeContext = React.createContext({\r\n    theme: themes.dark, // default value\r\n    toggleTheme: () => {\r\n    },\r\n});","import {GameState} from \"../core/game-state\";\r\nimport {ThemeContext} from \"../layout/theme-context\";\r\nimport React from \"react\";\r\nimport {RelicsButton} from \"../shared/relicsButton\";\r\n\r\ntype SettingsProps = {\r\n    gameState: GameState,\r\n    onSave: any,\r\n    onClearSave: any\r\n}\r\n\r\nexport class Settings extends React.Component<SettingsProps> {\r\n    onToggleTheme(toggleTheme: any) {\r\n        const { gameState } = this.props;\r\n        gameState.settings.darkMode = !gameState.settings.darkMode;\r\n        toggleTheme();\r\n    }\r\n    render() {\r\n        const {onSave, onClearSave} = this.props;\r\n\r\n        return (\r\n            <div>\r\n                <div className={\"button-container\"}>\r\n                    <RelicsButton onClick={() => onSave()}>Save</RelicsButton>\r\n                    <RelicsButton onClick={() => onClearSave()}>Clear Save</RelicsButton>\r\n                </div>\r\n                <div>\r\n                    <ThemeContext.Consumer>\r\n                        {({theme, toggleTheme}) => (\r\n                            <div className={\"button-container\"}>\r\n                                <RelicsButton onClick={() => this.onToggleTheme(toggleTheme)}>\r\n                                    Toggle Dark Mode\r\n                                </RelicsButton>\r\n                            </div>\r\n                        )}\r\n                    </ThemeContext.Consumer>\r\n                </div>\r\n                <p>Relics - A game by bearhanded.</p>\r\n                <p><a href=\"https://github.com/bearhanded/relics\">GitHub</a></p>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","import {GameState} from \"./game-state\";\r\nimport {addDetailedJournalEntry, addJournalEntry, BLOOD_ENTRY_TYPE} from \"./journal\";\r\nimport {countAvailableStudents, removeGatherers, removeStudyRelics} from \"../economy/jobAssignments\";\r\n\r\nexport function randomEventsForDuration(gameState: GameState, amount: number) {\r\n    for (let i = 0; i < amount; i++) {\r\n        randomEvent(gameState);\r\n    }\r\n}\r\n\r\nexport function randomEvent(gameState: GameState) {\r\n    const diceRoll = roll1d100();\r\n    if(diceRoll >= 95) {\r\n        addJournalEntry(gameState, \"The wind blows across the dusty plain\");\r\n    }\r\n    if( 10 <= diceRoll && diceRoll <= 15) {\r\n        addJournalEntry(gameState, \"A stranger shuffles up and hands something to you: +100 Relics!\");\r\n        gameState.resourceState.relics += 100\r\n    }\r\n    if(diceRoll === 1 && gameState.resourceState.students > 2) {\r\n        // A dark event occurs\r\n        if(!gameState.researchState.bloodWard) {\r\n            if (countAvailableStudents(gameState) <= 0) {\r\n                if (gameState.jobAssignments.gatherRelics >= 1) {\r\n                    removeGatherers(1, gameState);\r\n                } else if (gameState.jobAssignments.studyRelics >= 1) {\r\n                    removeStudyRelics(1, gameState);\r\n                }\r\n            }\r\n            gameState.resourceState.blood ? gameState.resourceState.blood++ : gameState.resourceState.blood = 1;\r\n            gameState.resourceState.students -= 1;\r\n\r\n            addDetailedJournalEntry(gameState, {\r\n                entry: \"A shout in the dark. You are short one student.\",\r\n                entryType: BLOOD_ENTRY_TYPE,\r\n            });\r\n        } else {\r\n            gameState.resourceState.blood ? gameState.resourceState.blood++ : gameState.resourceState.blood = 1;\r\n            addDetailedJournalEntry(gameState, {\r\n                entry: \"The ward protects the student in exchange for a drop shed.\",\r\n                entryType: BLOOD_ENTRY_TYPE,\r\n            });\r\n        }\r\n    }\r\n}\r\n\r\nfunction roll1d100() {\r\n    return Math.floor(Math.random() * 100 + 1);\r\n}\r\n","import {saveGame} from \"./saveService\";\r\nimport {GameState} from \"./game-state\";\r\nimport {TICK_SPEED, SECONDS_PER_EVENT_CHECK, BASE_RELIC_CAP, BASE_MONEY_CAP} from \"../config/constants\";\r\nimport {randomEventsForDuration} from \"./event-manager\";\r\n\r\nexport class GameClock {\r\n    saveClockId: any;\r\n    resourceClockId: any;\r\n    gameState: GameState; // Not readonly, we're emitting the changes for the rest of the app\r\n    tickRatio: number; // Modified each pass of the clock so that we can deal with running in the background\r\n    emitTick: any;\r\n    maxTicks: number;\r\n    lastTickDate: Date;\r\n    randomEventTimer = 0;\r\n\r\n    constructor(gameState: GameState, onTick: any) {\r\n        this.saveClockId = setInterval(\r\n            () => saveGame(gameState),\r\n            30000\r\n        );\r\n        this.gameState = gameState;\r\n        this.updateState(gameState);\r\n        this.tickRatio = TICK_SPEED / 1000; // Default: 50ms / 1000ms, multiply by how many per second you want\r\n        this.maxTicks = (5 * 1000) / TICK_SPEED;\r\n        this.emitTick = onTick;\r\n        this.lastTickDate = new Date(gameState.saveTime); //Easy offline progress solution?\r\n    }\r\n\r\n    private calibrate() {\r\n        const tickTimeStamp = new Date();\r\n        const seconds = (tickTimeStamp.getTime() - this.lastTickDate.getTime()) / 1000;\r\n        this.lastTickDate = tickTimeStamp;\r\n        this.tickRatio = seconds;\r\n        this.randomEventTimer += seconds;\r\n    }\r\n\r\n    private manageRandomEvent(newState: GameState) {\r\n        if(this.randomEventTimer >= SECONDS_PER_EVENT_CHECK ) {\r\n            // every 5s, test for an event\r\n\r\n            randomEventsForDuration(newState, Math.floor(this.randomEventTimer / SECONDS_PER_EVENT_CHECK));\r\n            this.randomEventTimer = 0;\r\n        }\r\n    }\r\n\r\n    tick() {\r\n        this.calibrate();\r\n        const newState = {...this.gameState};\r\n\r\n        // Rates & Stats\r\n        let relicsPerSecond = 0;\r\n        let knowledgePerSecond = 0;\r\n        let moneyPerSecond = 0;\r\n\r\n        // Calculate rates and side effects\r\n        if(this.gameState.jobAssignments.gatherRelics) {\r\n            const relicsMultiplier = 1\r\n                + (this.gameState.researchState.betterShovels ? .5 : 0);\r\n            relicsPerSecond = this.gameState.jobAssignments.gatherRelics*.5*relicsMultiplier;\r\n        }\r\n        if(this.gameState.jobAssignments.studyRelics && this.gameState.resourceState.relics >= this.gameState.jobAssignments.gatherRelics*10*this.tickRatio) {\r\n            const relicConsumptionRate = this.gameState.jobAssignments.studyRelics*10;\r\n            relicsPerSecond -= relicConsumptionRate;\r\n            knowledgePerSecond = this.gameState.jobAssignments.studyRelics*.1;\r\n        }\r\n        if(this.gameState.researchState.profiteering) {\r\n            moneyPerSecond = .25;\r\n            if(this.gameState.jobAssignments.giftShop) {\r\n                moneyPerSecond += this.gameState.jobAssignments.giftShop*.125;\r\n                relicsPerSecond -= this.gameState.jobAssignments.giftShop*2.5;\r\n            }\r\n        }\r\n\r\n        // Apply rates to resources\r\n        newState.resourceState.money     += moneyPerSecond      *this.tickRatio;\r\n        newState.resourceState.relics    += relicsPerSecond     *this.tickRatio;\r\n        newState.resourceState.knowledge += knowledgePerSecond  *this.tickRatio;\r\n\r\n        // Apply caps\r\n        const relicCap = BASE_RELIC_CAP + this.gameState.resourceState.sheds*50;\r\n        if(newState.resourceState.relics >= relicCap) newState.resourceState.relics = relicCap;\r\n        newState.resourceState.relicCap = relicCap;\r\n\r\n        const moneyCap = BASE_MONEY_CAP;\r\n        if(newState.resourceState.money >= moneyCap) newState.resourceState.money = moneyCap;\r\n        newState.resourceState.moneyCap = BASE_MONEY_CAP;\r\n\r\n        // Aggregate stats\r\n        newState.resourceState.relicRate     = relicsPerSecond;\r\n        newState.resourceState.moneyRate     = moneyPerSecond;\r\n        newState.resourceState.knowledgeRate = knowledgePerSecond;\r\n\r\n        // Kick off any events that have transpired\r\n        this.manageRandomEvent(newState);\r\n\r\n        // Save and output\r\n        this.gameState = newState;\r\n        this.emitTick(newState);\r\n    }\r\n\r\n    updateState(gameState: GameState) {\r\n        clearInterval(this.resourceClockId);\r\n        this.resourceClockId = setInterval(() => this.tick(), TICK_SPEED);\r\n    }\r\n\r\n    clearClock() {\r\n        clearInterval(this.resourceClockId);\r\n        clearInterval(this.saveClockId);\r\n    }\r\n\r\n}\r\n","import * as React from \"react\";\r\nimport {JournalState} from \"../core/game-state\";\r\nimport {RelicsButton} from \"../shared/relicsButton\";\r\nimport {ACHIEVEMENT_ENTRY_TYPE, BLOOD_ENTRY_TYPE, COMMON_ENTRY_TYPE, DetailedEntry} from \"../core/journal\";\r\n\r\ntype JournalProps = {\r\n    journalState: JournalState,\r\n    clearLog: any\r\n}\r\n\r\nexport class AdventureLog extends React.Component<JournalProps> {\r\n    getClassName(entry: DetailedEntry) {\r\n        let className = \"padded-text journal__entry\";\r\n        switch (entry.entryType) {\r\n            case ACHIEVEMENT_ENTRY_TYPE:\r\n                className += \" journal__entry--achievement\";\r\n                break;\r\n            case BLOOD_ENTRY_TYPE:\r\n                className += \" blood-text\";\r\n                break;\r\n            case COMMON_ENTRY_TYPE:\r\n            default:\r\n        }\r\n        return className;\r\n    }\r\n\r\n    render() {\r\n        const { journalState, clearLog } = this.props;\r\n        const entryList = journalState.entries.slice(0).reverse().map((entry) =>\r\n            <div className={this.getClassName(entry)}>\r\n                {entry.entry}\r\n            </div>\r\n        );\r\n        return (\r\n            <div className=\"panel--left-align journal-panel\">\r\n                <div className=\"button-container\">\r\n                    <RelicsButton onClick={() => clearLog()}>Clear Log</RelicsButton>\r\n                </div>\r\n                <div className=\"journal\">{entryList}</div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","import * as React from \"react\";\r\nimport { GameState } from \"../core/game-state\";\r\nimport {countAvailableStudents} from \"../economy/jobAssignments\";\r\n\r\ntype ResourceProps = {\r\n    gameState: GameState,\r\n}\r\n\r\ntype ResourcePanelEntryProps = {\r\n    rate?: number;\r\n    cap?: number;\r\n    className?: string;\r\n}\r\n\r\nexport class ResourcePanelEntry extends React.Component<ResourcePanelEntryProps> {\r\n    render() {\r\n        const renderRate = this.props.rate !== undefined && this.props.rate !== 0;\r\n        const rateText = this.props.rate + \"/s\";\r\n        const renderCap = this.props.cap !== undefined && this.props.cap !== 0;\r\n\r\n        return (\r\n            <div className=\"resources__entry\">\r\n                <div className={this.props.className}>\r\n                    {this.props.children}\r\n                    {this.props.cap && (\r\n                        <span className=\"resources__rate\">/{this.props.cap}</span>\r\n                    )}\r\n                </div>\r\n                <div className=\"resources__rate\">{renderRate && rateText}</div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\nexport class ResourcePanel extends React.Component<ResourceProps> {\r\n    render() {\r\n        const { gameState } = this.props;\r\n\r\n        return (\r\n            <div>\r\n                <div className=\"panel--center-align resources__container\">\r\n                    {!!gameState.resourceState.relics &&\r\n                        <ResourcePanelEntry rate={gameState.resourceState.relicRate}\r\n                                            cap={gameState.resourceState.relicCap}>\r\n                            Relics: {gameState.resourceState.relics.toFixed()}\r\n                        </ResourcePanelEntry>}\r\n                    {gameState.researchState.profiteering &&\r\n                        <ResourcePanelEntry className=\"money-text\" rate={gameState.resourceState.moneyRate}\r\n                                            cap={gameState.resourceState.moneyCap}>\r\n                            Money: {gameState.resourceState.money.toFixed()}\r\n                        </ResourcePanelEntry>}\r\n                    {!!gameState.resourceState.knowledge &&\r\n                        <ResourcePanelEntry className=\"knowledge-text\" rate={gameState.resourceState.knowledgeRate}>\r\n                            Knowledge: {gameState.resourceState.knowledge.toFixed()}\r\n                        </ResourcePanelEntry>}\r\n                    {!!gameState.resourceState.blood &&\r\n                        <ResourcePanelEntry className=\"blood-text\">\r\n                            Blood: {gameState.resourceState.blood.toFixed()}\r\n                        </ResourcePanelEntry>}\r\n                </div>\r\n                {!!gameState.resourceState.students &&\r\n                    <div className=\"panel--center-align resources__container\">\r\n                        <div>Students: {countAvailableStudents(gameState)}/{gameState.resourceState.students}</div>\r\n                    </div>\r\n                }\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","import React from \"react\";\r\n\r\ntype NavButtonProps = {\r\n  onClick: any;\r\n  disabled?: any | undefined;\r\n  selected?: boolean | undefined;\r\n}\r\n\r\nexport class NavButton extends React.Component<NavButtonProps> {\r\n\r\n    render() {\r\n        let className = \"nav-button\";\r\n        if(this.props.disabled) className += \" nav-button--disabled\";\r\n        if(this.props.selected) className += \" nav-button--selected\";\r\n\r\n        const clickFunc = this.props.disabled ? () => {} : this.props.onClick;\r\n        return (\r\n            <span\r\n                className={className}\r\n                onClick={clickFunc}>\r\n                {this.props.children}\r\n            </span>\r\n        )\r\n    }\r\n}","import React from \"react\";\r\nimport {GENERATORS_PANEL_KEY, LAB_KEY, SETTINGS_PANEL_KEY} from \"../config/constants\";\r\nimport {NavButton} from \"./navButton\";\r\nimport {GameState} from \"../core/game-state\";\r\n\r\ntype PanelSelectorProps = {\r\n    onChangePanel: any,\r\n    selected: string,\r\n    gameState: GameState\r\n}\r\nexport class PanelSelector extends React.Component<PanelSelectorProps>{\r\n    render() {\r\n        const {onChangePanel, selected, gameState} = this.props;\r\n        return (\r\n            <div className={\"nav-panel\"}>\r\n                <NavButton selected={selected === GENERATORS_PANEL_KEY}\r\n                           onClick={() => onChangePanel(GENERATORS_PANEL_KEY)}>\r\n                    Dig Site 1\r\n                </NavButton>\r\n                {(gameState.resourceState.students >= 10 || gameState.achievements.labUnlocked) &&\r\n                    <NavButton selected={selected === LAB_KEY}\r\n                               onClick={() => onChangePanel(LAB_KEY)}>\r\n                        Research Lab\r\n                    </NavButton>\r\n                }\r\n\r\n                <NavButton selected={selected === SETTINGS_PANEL_KEY}\r\n                           onClick={() => onChangePanel(SETTINGS_PANEL_KEY)}>\r\n                    Settings\r\n                </NavButton>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","import {GameState} from \"../../core/game-state\";\r\nimport {Transaction} from \"../Transaction\";\r\nimport React from \"react\";\r\n\r\nexport class KnowledgeTransaction extends Transaction {\r\n    static updateClock = false;\r\n\r\n    static commitTransaction(gameState: GameState, amount: number): GameState {\r\n        if(KnowledgeTransaction.isValidPurchase(gameState, amount)) {\r\n            const currCost = KnowledgeTransaction.getCost(gameState, amount);\r\n\r\n            gameState.resourceState.relics -= currCost;\r\n            gameState.resourceState.knowledge += amount;\r\n        }\r\n        return gameState;\r\n    }\r\n\r\n    static isValidPurchase(gameState: GameState, amount: number): boolean {\r\n        const currCost = KnowledgeTransaction.getCost(gameState, amount);\r\n        return gameState.resourceState.relics >= currCost;\r\n    }\r\n\r\n    static getCost(gameState: GameState, purchaseAmount: number) {\r\n        return 100 * purchaseAmount;\r\n    }\r\n\r\n    static buildTooltip(gameState: GameState): any {\r\n        return (\r\n            <div className=\"relics-tooltip\">\r\n                <div className=\"relics-tooltip__description\">\r\n                    Peruse your collection, perhaps you can find something useful.\r\n                </div>\r\n                <div className=\"relics-tooltip__cost\">\r\n                    <div>Relics: 100</div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","import {Research} from \"../Transaction\";\r\nimport {GameState} from \"../../core/game-state\";\r\nimport {ACHIEVEMENT_ENTRY_TYPE, addDetailedJournalEntry} from \"../../core/journal\";\r\nimport React from \"react\";\r\n\r\nexport class BetterShovels extends Research {\r\n    static updateClock = false;\r\n\r\n    static commitTransaction(gameState: GameState, amount: number): GameState {\r\n        if(BetterShovels.isValidPurchase(gameState, amount)) {\r\n            gameState.resourceState.money -= 25;\r\n            gameState.researchState.betterShovels = true;\r\n            addDetailedJournalEntry(gameState, {\r\n                entry: \"A patron finds your work interesting, and provides a slow but steady drip of funding.\",\r\n                entryType: ACHIEVEMENT_ENTRY_TYPE\r\n            });\r\n        }\r\n        return gameState;\r\n    }\r\n\r\n    static isValidPurchase(gameState: GameState, amount: number): boolean {\r\n        return gameState.resourceState.money >= 25;\r\n    }\r\n\r\n    static buildTooltip(gameState: GameState): any {\r\n        return (\r\n            <div className=\"relics-tooltip\">\r\n                <div className=\"relics-tooltip__description\">\r\n                    Buy the team their very first shovel. It's better than none.\r\n                    <br/>Student base gathering rate +.5 relics/s\r\n                </div>\r\n                <div className=\"relics-tooltip__cost\">\r\n                    <div className=\"money-text\">Money: 25</div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    static isAvailable(gameState: GameState): boolean {\r\n        return gameState.researchState.profiteering && !gameState.researchState.betterShovels;\r\n    }\r\n\r\n    static title = \"Better Shovels\";\r\n    static id = \"better-shovels\";\r\n    static className = \"money-button\";\r\n}\r\n","import React from \"react\";\r\nimport {Research} from \"../Transaction\";\r\nimport {GameState} from \"../../core/game-state\";\r\nimport {addDetailedJournalEntry, BLOOD_ENTRY_TYPE} from \"../../core/journal\";\r\n\r\nexport class BloodWard extends Research {\r\n    static updateClock = false;\r\n\r\n    static commitTransaction(gameState: GameState, amount: number): GameState {\r\n        if(BloodWard.isValidPurchase(gameState, amount)) {\r\n            gameState.resourceState.relics -= 100;\r\n            gameState.resourceState.blood -= 1;\r\n            gameState.resourceState.knowledge -= 20;\r\n\r\n            gameState.researchState.bloodWard = true;\r\n            addDetailedJournalEntry(gameState, {\r\n                entry: \"Following instructions on the ruins, you assemble a ward. That should protect this place.\",\r\n                entryType: BLOOD_ENTRY_TYPE\r\n            });\r\n        }\r\n        return gameState;\r\n    }\r\n\r\n    static isValidPurchase(gameState: GameState, amount: number): boolean {\r\n        return gameState.resourceState.blood >= 1 && gameState.resourceState.knowledge >= 20 && gameState.resourceState.relics >= 100;\r\n    }\r\n\r\n    static buildTooltip(gameState: GameState): any {\r\n        return (\r\n            <div className=\"relics-tooltip\">\r\n                <div className=\"relics-tooltip__description\">\r\n                    The excavated ruins are carved with a repeating pattern, and no one has disappeared in there yet.\r\n                </div>\r\n                <div className=\"relics-tooltip__cost\">\r\n                    <div>Relics: 100</div>\r\n                    <div className=\"knowledge-text\">Knowledge: 20</div>\r\n                    <div className=\"blood-text\">Blood: 1</div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    static isAvailable(gameState: GameState): boolean {\r\n        return gameState.researchState.profiteering && !gameState.researchState.bloodWard;\r\n    }\r\n\r\n    static title = \"Inscribe a ward\";\r\n    static id = \"blood-ward\";\r\n    static className = \"blood-button\";\r\n}","import {Research} from \"../Transaction\";\r\nimport {GameState} from \"../../core/game-state\";\r\nimport {ACHIEVEMENT_ENTRY_TYPE, addDetailedJournalEntry} from \"../../core/journal\";\r\nimport React from \"react\";\r\n\r\nexport class Profit extends Research {\r\n    static updateClock = false;\r\n\r\n    static commitTransaction(gameState: GameState, amount: number): GameState {\r\n        if(Profit.isValidPurchase(gameState, amount)) {\r\n            gameState.resourceState.knowledge -= 10;\r\n            gameState.researchState.profiteering = true;\r\n            addDetailedJournalEntry(gameState, {\r\n                entry: \"A patron finds your work interesting, and provides a slow but steady drip of funding.\",\r\n                entryType: ACHIEVEMENT_ENTRY_TYPE\r\n            });\r\n        }\r\n        return gameState;\r\n    }\r\n\r\n    static isValidPurchase(gameState: GameState, amount: number): boolean {\r\n        return gameState.resourceState.knowledge >= 10;\r\n    }\r\n\r\n    static buildTooltip(gameState: GameState): any {\r\n        return (\r\n            <div className=\"relics-tooltip\">\r\n                <div className=\"relics-tooltip__description\">\r\n                    With your student's help, you know enough now to fund this endeavor.\r\n                    A little embellishment never hurt...\r\n                </div>\r\n                <div className=\"relics-tooltip__cost\">\r\n                    <div className=\"knowledge-text\">Knowledge: 10</div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    static isAvailable(gameState: GameState): boolean {\r\n        return gameState.researchState.studentKnowledge && !gameState.researchState.profiteering;\r\n    }\r\n\r\n    static title = \"Procure Funding\";\r\n    static id = \"profiteering\";\r\n    static className = \"money-button\";\r\n}","import {Research} from \"../Transaction\";\r\nimport {GameState} from \"../../core/game-state\";\r\nimport React from \"react\";\r\n\r\nexport class StudentKnowledge extends Research {\r\n    static updateClock = false;\r\n\r\n    static commitTransaction(gameState: GameState, amount: number): GameState {\r\n        if(StudentKnowledge.isValidPurchase(gameState, amount)) {\r\n            gameState.resourceState.knowledge -= 5;\r\n            gameState.researchState.studentKnowledge = true;\r\n        }\r\n        return gameState;\r\n    }\r\n\r\n    static isValidPurchase(gameState: GameState, amount: number): boolean {\r\n        return gameState.resourceState.knowledge >= 5;\r\n    }\r\n\r\n    static buildTooltip(gameState: GameState): any {\r\n        return (\r\n            <div className=\"relics-tooltip\">\r\n                <div className=\"relics-tooltip__description\">\r\n                    I know enough about this to teach others to do the work, albeit at a reduced efficiency.\r\n                </div>\r\n                <div className=\"relics-tooltip__cost\">\r\n                    <div className=\"knowledge-text\">Knowledge: 5</div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n    static isAvailable(gameState: GameState): boolean {\r\n        return !gameState.researchState.studentKnowledge;\r\n    }\r\n\r\n    static title = \"Studious Students\";\r\n    static id = \"student-knowledge\";\r\n    static className = \"knowledge-button\";\r\n}\r\n","import {Research} from \"../Transaction\";\r\nimport {GameState} from \"../../core/game-state\";\r\nimport React from \"react\";\r\n\r\nexport class MapTheRuins extends Research {\r\n    static updateClock = false;\r\n\r\n    static commitTransaction(gameState: GameState, amount: number): GameState {\r\n        if(MapTheRuins.isValidPurchase(gameState, amount)) {\r\n            gameState.resourceState.knowledge -= 1;\r\n            gameState.researchState.mapTheGrounds = true;\r\n        }\r\n        return gameState;\r\n    }\r\n\r\n    static isValidPurchase(gameState: GameState, amount: number): boolean {\r\n        return gameState.resourceState.knowledge >= 1;\r\n    }\r\n\r\n    static buildTooltip(gameState: GameState): any {\r\n        return (\r\n            <div className=\"relics-tooltip\">\r\n                <div className=\"relics-tooltip__description\">\r\n                    These relics seem to be found near a few particular features.\r\n                    <br/>Increases manual base relic search rate by 1.\r\n                </div>\r\n                <div className=\"relics-tooltip__cost\">\r\n                    <div className=\"knowledge-text\">Knowledge: 1</div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n    static isAvailable(gameState: GameState): boolean {\r\n        return !gameState.researchState.mapTheGrounds;\r\n    }\r\n\r\n    static title = \"Map the Ruins\";\r\n    static id = \"map-ruins\";\r\n    static className = \"knowledge-button\";\r\n}\r\n","import {Research} from \"../Transaction\";\r\nimport {GameState} from \"../../core/game-state\";\r\nimport {ACHIEVEMENT_ENTRY_TYPE, addDetailedJournalEntry, COMMON_ENTRY_TYPE} from \"../../core/journal\";\r\nimport React from \"react\";\r\n\r\nexport class Tours extends Research {\r\n    static updateClock = false;\r\n\r\n    static commitTransaction(gameState: GameState, amount: number): GameState {\r\n        if(Tours.isValidPurchase(gameState, amount)) {\r\n            gameState.resourceState.knowledge -= 25;\r\n            gameState.researchState.tours = true;\r\n            addDetailedJournalEntry(gameState, {\r\n                entry: \"Wait, people will pay to see this place?\",\r\n                entryType: COMMON_ENTRY_TYPE\r\n            });\r\n        }\r\n        return gameState;\r\n    }\r\n\r\n    static isValidPurchase(gameState: GameState, amount: number): boolean {\r\n        return gameState.resourceState.knowledge >= 25;\r\n    }\r\n\r\n    static buildTooltip(gameState: GameState): any {\r\n        return (\r\n            <div className=\"relics-tooltip\">\r\n                <div className=\"relics-tooltip__description\">\r\n                    You form a committee of students to think very hard about how to make more money.\r\n                </div>\r\n                <div className=\"relics-tooltip__cost\">\r\n                    <div className=\"knowledge-text\">Knowledge: 25</div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    static isAvailable(gameState: GameState): boolean {\r\n        return gameState.researchState.betterShovels && !gameState.researchState.tours;\r\n    }\r\n\r\n    static title = \"More funding\";\r\n    static id = \"tours\";\r\n    static className = \"money-button\";\r\n}","import {GameState} from \"../core/game-state\";\r\nimport {Research} from \"./Transaction\";\r\nimport {BetterShovels} from \"./research/betterShovels\";\r\nimport {BloodWard} from \"./research/bloodWard\";\r\nimport {Profit} from \"./research/profit\";\r\nimport {StudentKnowledge} from \"./research/studentKnowledge\";\r\nimport {MapTheRuins} from \"./research/mapTheRuins\";\r\nimport {Tours} from \"./research/tours\";\r\n\r\nexport const allResearches: typeof Research[] = [\r\n    BetterShovels,\r\n    BloodWard,\r\n    Profit,\r\n    StudentKnowledge,\r\n    MapTheRuins,\r\n    Tours\r\n];\r\n\r\nexport function getAvailableResearches(gameState: GameState): typeof Research[] {\r\n    return allResearches.filter((r) => r.isAvailable(gameState));\r\n}\r\n","import React from \"react\";\r\nimport {RelicsButton} from \"./relicsButton\";\r\nimport {Research} from \"../economy/Transaction\";\r\nimport {GameState} from \"../core/game-state\";\r\n\r\ntype ResearchButtonProps = {\r\n    research: typeof Research;\r\n    gameState: GameState;\r\n    onPurchase: any;\r\n}\r\n\r\nexport class ResearchButton extends React.Component<ResearchButtonProps>{\r\n    render() {\r\n        const {gameState, research, onPurchase} = this.props;\r\n        return (\r\n            <RelicsButton\r\n                disabled={!research.isValidPurchase(gameState, 1)}\r\n                onClick={() => onPurchase(1, research.commitTransaction)}\r\n                id={research.id}\r\n                key={research.id}\r\n                className={research.className}\r\n                tooltip={research.buildTooltip(gameState)}\r\n            >\r\n                {research.title}\r\n            </RelicsButton>\r\n        );\r\n    }\r\n}","import React from \"react\";\r\nimport {GameState} from \"../core/game-state\";\r\nimport {labFirstUnlock} from \"../core/achievements\";\r\nimport {RelicsButton} from \"../shared/relicsButton\";\r\nimport {KnowledgeTransaction} from \"../economy/transactions/KnowledgeTransaction\";\r\nimport {AssignWorkerOptions} from \"../shared/AssignWorkerOptions\";\r\nimport {\r\n    assignStudyRelics,\r\n    countAvailableStudents,\r\n    removeStudyRelics\r\n} from \"../economy/jobAssignments\";\r\nimport {getAvailableResearches} from \"../economy/researchManager\";\r\nimport {ResearchButton} from \"../shared/researchButton\";\r\nimport {Research} from \"../economy/Transaction\";\r\n\r\ntype LabProps = {\r\n    gameState: GameState;\r\n    onPurchase: any;\r\n}\r\n\r\nexport class ResearchLab extends React.Component<LabProps> {\r\n    componentDidMount(): void {\r\n        labFirstUnlock(this.props.gameState);\r\n    }\r\n\r\n    assignStudentsStudy = (amount: number) => assignStudyRelics(amount, this.props.gameState);\r\n    removeStudentsStudy = (amount: number) => removeStudyRelics(amount, this.props.gameState);\r\n\r\n    createResearchButton(research: typeof Research): any {\r\n        return (\r\n            <ResearchButton key={research.id} research={research} gameState={this.props.gameState} onPurchase={this.props.onPurchase}/>\r\n        );\r\n    }\r\n\r\n    render() {\r\n        const { gameState, onPurchase } = this.props;\r\n        const availableStudents = countAvailableStudents(gameState);\r\n        const availableResearch = getAvailableResearches(gameState).map((research) => this.createResearchButton(research));\r\n\r\n        return (\r\n            <div>\r\n                <div className=\"button-container\">\r\n                    <RelicsButton\r\n                        disabled={!KnowledgeTransaction.isValidPurchase(gameState, 1)}\r\n                        onClick={() => onPurchase(1, KnowledgeTransaction.commitTransaction)}\r\n                        id=\"studyRelics\"\r\n                        tooltip={KnowledgeTransaction.buildTooltip(gameState)}\r\n                    >\r\n                        Study Relics\r\n                    </RelicsButton>\r\n                </div>\r\n                {gameState.researchState.studentKnowledge &&\r\n                    <div>\r\n                        <AssignWorkerOptions\r\n                            id=\"studentsStudying\"\r\n                            assignWorkers={(amount: number) =>this.assignStudentsStudy(amount)}\r\n                            removeWorkers={(amount:number) => this.removeStudentsStudy(amount)}\r\n                            currentlyAssigned={gameState.jobAssignments.studyRelics}\r\n                            availableWorkers={availableStudents}\r\n                            tooltip={\"Produces 1 knowledge per 100 relics.\"}\r\n                        >\r\n                            Student Studying Relics\r\n                        </AssignWorkerOptions>\r\n                    </div>\r\n                }\r\n\r\n                <div>\r\n                    <p>Research</p>\r\n                    { availableResearch }\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","import {GameState} from \"./game-state\";\r\nimport {ACHIEVEMENT_ENTRY_TYPE, addDetailedJournalEntry} from \"./journal\";\r\n\r\nexport function labFirstUnlock(gameState: GameState) {\r\n    if(!gameState.achievements.labUnlocked) {\r\n        gameState.achievements.labUnlocked = true;\r\n        addDetailedJournalEntry(gameState, {\r\n            entry: \"With your new found stash of relics, you retreat to your personal laboratory!\",\r\n            entryType: ACHIEVEMENT_ENTRY_TYPE,\r\n        });\r\n    }\r\n}\r\n","import * as React from \"react\";\r\nimport {loadSave, newSave, saveGame, saveGameExists} from \"./saveService\";\r\nimport {RelicPanel} from \"../panels/relicPanel\";\r\nimport {Settings} from \"../panels/settings\";\r\nimport {GameState} from \"./game-state\";\r\nimport {GameClock} from \"./game-clock\";\r\nimport {GENERATORS_PANEL_KEY, LAB_KEY, SETTINGS_PANEL_KEY} from \"../config/constants\";\r\nimport {addJournalEntry, clearJournal} from \"./journal\";\r\nimport {AdventureLog} from \"../panels/adventureLog\";\r\nimport {ResourcePanel} from \"../panels/resourcePanel\";\r\nimport {PanelSelector} from \"../layout/panelSelector\";\r\nimport {ResearchLab} from \"../panels/lab\";\r\n\r\ntype CoreProps = {}\r\ntype CoreState = {\r\n    gameState: GameState,\r\n    activePanel: string\r\n}\r\n\r\nexport class CorePanel extends React.Component<CoreProps, CoreState> {\r\n    clock: GameClock | undefined;\r\n    readonly state = {\r\n        gameState: saveGameExists() ? loadSave() : newSave(),\r\n        activePanel: GENERATORS_PANEL_KEY\r\n    };\r\n\r\n    componentDidMount(): void {\r\n        // TODO: Calculate offline progress before starting clock\r\n        this.clock = new GameClock(this.state.gameState, (newState: GameState) => this.onTick(newState));\r\n        this.setState({activePanel: GENERATORS_PANEL_KEY});\r\n    }\r\n\r\n    onTick(newState: GameState) {\r\n        this.setState({gameState: newState});\r\n    }\r\n\r\n    addCurrency(currencyName: string, currencyAmount: number) {\r\n        const newState = {...this.state.gameState};\r\n        let relicRate = currencyAmount;\r\n        if(this.state.gameState.researchState.mapTheGrounds) relicRate += 1;\r\n        newState.resourceState.relics += relicRate;\r\n        addJournalEntry(newState, \"You dust off some potsherds.\");\r\n        this.setState({gameState: newState})\r\n    }\r\n\r\n    makePurchase(purchaseAmount: number, transaction: any) {\r\n        let newState = {...this.state.gameState};\r\n        newState = transaction(newState, purchaseAmount);\r\n\r\n        this.setState({gameState: newState});\r\n        // if(purchaseType.updateClock) {\r\n        //     // @ts-ignore\r\n        //     this.clock.updateState(newState);\r\n        // }\r\n    }\r\n\r\n    clearLog() {\r\n        clearJournal(this.state.gameState)\r\n    }\r\n\r\n    changeActivePanel(panelKey: string) {\r\n        this.setState({activePanel: panelKey});\r\n    }\r\n\r\n    save() {\r\n        const newState = {...this.state.gameState};\r\n        this.setState({gameState: newState});\r\n        saveGame(newState, true);\r\n    }\r\n\r\n    clearSave() {\r\n        // eslint-disable-next-line no-restricted-globals\r\n        const response = confirm(\"Are you sure you want to clear your save?\");\r\n        if (!response) {\r\n            return;\r\n        }\r\n        // @ts-ignore\r\n        this.clock.clearClock();\r\n        const newState = newSave();\r\n        newState.saveTime = new Date();\r\n        this.setState({gameState: newState});\r\n        saveGame(newState);\r\n        // eslint-disable-next-line no-restricted-globals\r\n        location.reload();\r\n    }\r\n\r\n    render() {\r\n        let activePanel;\r\n        switch (this.state.activePanel) {\r\n            case SETTINGS_PANEL_KEY:\r\n                activePanel = (\r\n                    <Settings\r\n                        gameState={this.state.gameState}\r\n                        onSave={() => this.save()}\r\n                        onClearSave={() => this.clearSave()}\r\n                    />\r\n                );\r\n                break;\r\n            case LAB_KEY:\r\n                activePanel = (\r\n                    <ResearchLab\r\n                        gameState={this.state.gameState}\r\n                        onPurchase={(purchaseAmount: number, transaction: any) => this.makePurchase(purchaseAmount, transaction)}\r\n                    />\r\n                );\r\n                break;\r\n            case GENERATORS_PANEL_KEY:\r\n            default:\r\n                activePanel = (\r\n                    <RelicPanel\r\n                        gameState={this.state.gameState}\r\n                        onAddCurrency={(currencyName: string, currencyAmount: number) => this.addCurrency(currencyName, currencyAmount)}\r\n                        onPurchase={(purchaseAmount: number, transaction: any) => this.makePurchase(purchaseAmount, transaction)}\r\n                    />\r\n                );\r\n        }\r\n\r\n        return (\r\n            <div className=\"core-panel\">\r\n                <div className=\"core-panel__flex\">\r\n                    <div className=\"core-panel__left-column\">\r\n                        <AdventureLog clearLog={() => this.clearLog()} journalState={this.state.gameState.journalState}/>\r\n                    </div>\r\n                    <div className=\"core-panel__center-column\">\r\n                        <PanelSelector onChangePanel={(panelKey: string) => this.changeActivePanel(panelKey)}\r\n                            selected={this.state.activePanel}\r\n                            gameState={this.state.gameState}\r\n                        />\r\n                        {activePanel}\r\n                    </div>\r\n                    <div className=\"core-panel__right-column\">\r\n                        <ResourcePanel gameState={this.state.gameState}/>\r\n                    </div>\r\n                </div>\r\n\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","import React from 'react';\r\nimport './app.scss';\r\nimport {CorePanel} from \"./core/corePanel\";\r\nimport {ThemeContext, themes} from \"./layout/theme-context\";\r\nimport {loadSave, saveGameExists} from \"./core/saveService\";\r\n\r\ntype AppProps = {}\r\ntype AppState = {\r\n    theme: any,\r\n    toggleTheme: () => {}\r\n}\r\n\r\nclass App extends React.Component<AppProps, AppState> {\r\n    readonly state: AppState;\r\n    toggleTheme: any;\r\n\r\n    constructor(props: any) {\r\n        super(props);\r\n        const darkMode = saveGameExists() && loadSave().settings.darkMode;\r\n\r\n        this.toggleTheme = () => {\r\n            this.setState(state => ({\r\n                theme:\r\n                    state.theme === themes.dark\r\n                        ? themes.light\r\n                        : themes.dark,\r\n            }));\r\n        };\r\n\r\n        this.state = {\r\n            theme: darkMode ? themes.dark : themes.light,\r\n            toggleTheme: this.toggleTheme,\r\n        };\r\n\r\n    }\r\n\r\n    render() {\r\n        return (\r\n                <ThemeContext.Provider value={this.state}>\r\n                    <div className={this.state.theme.themeClass}>\r\n                        <CorePanel/>\r\n                    </div>\r\n                </ThemeContext.Provider>\r\n        );\r\n    }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resource-display are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(\r\n      process.env.PUBLIC_URL,\r\n      window.location.href\r\n    );\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './app';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}