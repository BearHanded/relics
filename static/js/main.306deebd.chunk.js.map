{"version":3,"sources":["core/game-state.ts","core/saveService.ts","layout/Header.tsx","economy/generators/RelicGenerator.ts","generators/generators.tsx","layout/theme-context.ts","settings/Settings.tsx","adventure-log/journal.ts","config/constants.ts","core/event-manager.ts","core/game-clock.ts","adventure-log/AdventureLog.tsx","layout/PanelSelector.tsx","core/CorePanel.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["GameState","currencies","CurrencyState","generators","GeneratorState","journalState","JournalState","saveTime","Date","relics","relicGenerator","entries","saveGameExists","localStorage","getItem","loadSave","string","save","JSON","parse","atob","newSave","saveGame","gameState","setItem","btoa","stringify","Header","this","getStory","React","RelicGenerator","updateClock","amount","isValidPurchase","currCost","getCost","purchaseAmount","sum","theoreticalAmt","i","Generators","studentPurchasable","props","onAddCurrency","onPurchase","onClick","toFixed","themes","light","themeClass","dark","ThemeContext","createContext","theme","toggleTheme","Settings","onSave","onClearSave","Consumer","toString","Component","addJournalEntry","entry","push","length","shift","randomEvent","diceRoll","Math","floor","random","console","log","GameClock","onTick","saveClockId","resourceClockId","tickRatio","emitTick","maxTicks","tickNumber","setInterval","updateState","TICK_SPEED","newState","clearInterval","tick","AdventureLog","clearLog","entryList","map","PanelSelector","onChangePanel","CorePanel","clock","state","activePanel","setState","currencyName","currencyAmount","purchaseType","commitTransaction","panelKey","clearClock","location","reload","clearSave","addCurrency","makePurchase","className","changeActivePanel","App","Provider","value","Boolean","window","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.306deebd.chunk.js","sourcesContent":["export class GameState {\n    currencies: CurrencyState = new CurrencyState();\n    generators: GeneratorState = new GeneratorState();\n    journalState: JournalState = new JournalState();\n    saveTime: Date = new Date();\n}\n\nexport class CurrencyState {\n    relics: number = 0;\n}\n\nexport class GeneratorState {\n    relicGenerator: number = 0;\n}\n\nexport class JournalState {\n    entries: string[] = [\"Where am I?\"];\n}\n","import {GameState} from \"./game-state\";\n\nexport function saveGameExists() {\n    return !!localStorage.getItem(\"RelicsSave\");\n}\n\nexport function loadSave() {\n    const string = localStorage.getItem(\"RelicsSave\");\n    const save =  string ? JSON.parse(atob(string)) : null;\n    const merged = {...new GameState(), ...save};\n    return merged;\n}\n\nexport function newSave(): GameState {\n    return new GameState();\n}\n\nexport function saveGame(gameState: GameState) {\n    localStorage.setItem(\"RelicsSave\", btoa(JSON.stringify(gameState)));\n}\n\n\nexport function exportSave(gameState: GameState) {\n    saveGame(gameState);\n    // TODO: export\n}\n","import * as React from \"react\";\nimport {GameState} from \"../core/game-state\";\n\ntype LogProps = {\n    gameState: GameState\n}\n\nexport class Header extends React.Component<LogProps> {\n\n    getStory() {\n        return `These dusty relics are probably worth something!`\n    }\n\n\n    render() {\n        return (\n            <h1>{this.getStory()}</h1>\n        );\n    }\n}\n","import {IPurchasable } from \"../IPurchaseable\";\nimport {GameState} from \"../../core/game-state\";\n\nexport class RelicGenerator implements IPurchasable {\n    updateClock = true;\n\n    commitTransaction(gameState: GameState, amount: number): GameState {\n        if(this.isValidPurchase(gameState, amount)) {\n            const currCost = this.getCost(gameState, amount);\n\n            gameState.currencies.relics -= currCost;\n            gameState.generators.relicGenerator += amount;\n        }\n        return gameState;\n    }\n\n    isValidPurchase(gameState: GameState, amount: number): boolean {\n        const currCost = this.getCost(gameState, amount);\n\n        return gameState.currencies.relics >= currCost;\n    }\n\n    getCost(gameState: GameState, purchaseAmount: number) {\n        let sum = 0;\n        let theoreticalAmt = gameState.generators.relicGenerator || 0;\n        for (let i = 0; i < purchaseAmount; i++) {\n            sum += 25 + theoreticalAmt * 10;\n            theoreticalAmt++;\n        }\n        return sum;\n    }\n}\n","import * as React from \"react\";\nimport { GameState } from \"../core/game-state\";\nimport {RelicGenerator} from \"../economy/generators/RelicGenerator\";\n\ntype GeneratorProps = {\n    gameState: GameState,\n    onPurchase: any,\n    onAddCurrency: any\n}\n\nexport class Generators extends React.Component<GeneratorProps> {\n    readonly studentPurchasable = new RelicGenerator();\n\n    render() {\n\n        const { gameState, onAddCurrency, onPurchase } = this.props;\n        return (\n            <div>\n                <button onClick={() => onAddCurrency(\"relics\", 1)}>Look for relics</button>\n                <br/>\n                <p>You have {gameState.currencies.relics.toFixed()} relics</p>\n                <br/>\n                <div>\n                    Hire some students to dust off relics for you. They work for relics.\n                    (You have {gameState.generators.relicGenerator})\n                    <button onClick={() => onPurchase(1, this.studentPurchasable)}>{this.studentPurchasable.getCost(gameState, 1)}</button>\n                </div>\n            </div>\n        );\n    }\n}\n","import React from \"react\";\n\nexport const themes = {\n    light: {\n        themeClass: 'app app--light',\n    },\n    dark: {\n        themeClass: 'app app--dark',\n    },\n};\n\nexport const ThemeContext = React.createContext({\n    theme: themes.dark, // default value\n    toggleTheme: () => {\n    },\n});","import {GameState} from \"../core/game-state\";\nimport {ThemeContext} from \"../layout/theme-context\";\nimport React from \"react\";\n\ntype SettingsProps = {\n    gameState: GameState,\n    onSave: any,\n    onClearSave: any\n}\n\nexport class Settings extends React.Component<SettingsProps> {\n    render() {\n        const {onSave, onClearSave} = this.props;\n        return (\n            <div>\n                <div>\n                    <button onClick={() => onSave()}>Save</button>\n                    <button onClick={() => onClearSave()}>Clear Save</button>\n                </div>\n                <div>\n                    <ThemeContext.Consumer>\n                        {({theme, toggleTheme}) => (\n                            <button onClick={() => toggleTheme()}>\n                                Toggle Dark Mode\n                            </button>\n                        )}\n                    </ThemeContext.Consumer>\n                </div>\n                <p>Last Saved at ${this.props.gameState.saveTime ? this.props.gameState.saveTime.toString() : \"\"}</p>\n            </div>\n        );\n    }\n}\n","import {GameState} from \"../core/game-state\";\nimport {MAX_LOG_SIZE} from \"../config/constants\";\n\nexport function addJournalEntry(gameState: GameState, entry: string){\n    gameState.journalState.entries.push(entry);\n    if(gameState.journalState.entries.length >= MAX_LOG_SIZE) {\n        gameState.journalState.entries.shift();\n    }\n    return gameState;\n}\n\nexport function clearJournal(gameState: GameState) {\n    gameState.journalState.entries = [];\n}","export const MIN_SAVE_REWARD_TIME = 24;\nexport const TICK_SPEED = 50;\nexport const MAX_LOG_SIZE = 25;\n\n// Panel Keys\nexport const SETTINGS_PANEL_KEY = \"SETTINGS\";\nexport const GENERATORS_PANEL_KEY = \"GENERATORS\"","import {GameState} from \"./game-state\";\nimport {addJournalEntry} from \"../adventure-log/journal\";\n\nexport function randomEvent(gameState: GameState) {\n    const diceRoll = roll1d100();\n    console.log(diceRoll);\n    if(diceRoll >= 95) {\n        addJournalEntry(gameState, \"The wind blows across the dusty plain\")\n    }\n    if( 10 <= diceRoll && diceRoll <= 15) {\n        addJournalEntry(gameState, \"A stranger shuffles up and hands something to you: +100 Relics!\")\n        gameState.currencies.relics += 100\n    }\n}\n\nfunction roll1d100() {\n    return Math.floor(Math.random() * 100 + 1);\n}","import {saveGame} from \"./saveService\";\nimport {GameState} from \"./game-state\";\nimport {TICK_SPEED} from \"../config/constants\";\nimport {randomEvent} from \"./event-manager\";\n\nexport class GameClock {\n    saveClockId: any;\n    resourceClockId: any;\n    gameState: GameState; // Not readonly, we're emitting the changes for the rest of the app\n    tickRatio: number;\n    emitTick: any;\n    maxTicks: number;\n    tickNumber: number = 0;\n\n    constructor(gameState: GameState, onTick: any) {\n        this.saveClockId = setInterval(\n            () => saveGame(gameState),\n            30000\n        );\n        this.gameState = gameState;\n        this.updateState(gameState);\n        this.tickRatio = TICK_SPEED / 1000;\n        this.maxTicks = (5 * 1000) / TICK_SPEED;\n        this.emitTick = onTick;\n    }\n\n    tick() {\n        // TODO: Tickcount, random event on tickcount\n        var newState = {...this.gameState};\n        if(this.gameState.generators.relicGenerator) {\n            newState.currencies.relics += this.gameState.generators.relicGenerator*this.tickRatio;\n        }\n\n        if(this.tickNumber >= this.maxTicks ) {\n            // every 5s, test for an event\n            randomEvent(newState);\n            this.tickNumber = 1;\n        }\n        this.gameState = newState;\n        this.emitTick(newState);\n        this.tickNumber++;\n    }\n\n    updateState(gameState: GameState) {\n        clearInterval(this.resourceClockId);\n        this.resourceClockId = setInterval(() => this.tick(), TICK_SPEED);\n    }\n\n    clearClock() {\n        clearInterval(this.resourceClockId);\n        clearInterval(this.saveClockId);\n    }\n\n}\n","import * as React from \"react\";\nimport {JournalState} from \"../core/game-state\";\n\ntype JournalProps = {\n    journalState: JournalState,\n    clearLog: any\n}\n\nexport class AdventureLog extends React.Component<JournalProps> {\n\n    getStory() {\n        return `These dusty relics are probably worth something!`\n    }\n\n    render() {\n        const { journalState, clearLog } = this.props;\n        const entryList = journalState.entries.map((entry) =>\n            <p>{entry}</p>\n        );\n        return (\n            <div>\n                <button onClick={() => clearLog()}>Clear Log</button>\n                <div>{entryList}</div>\n            </div>\n        );\n    }\n}\n","import React from \"react\";\nimport {GENERATORS_PANEL_KEY, SETTINGS_PANEL_KEY} from \"../config/constants\";\n\ntype PanelSelectorProps = {\n    onChangePanel: any\n}\nexport class PanelSelector extends React.Component<PanelSelectorProps>{\n    render() {\n        const {onChangePanel} = this.props;\n        return (\n            <div>\n                <button onClick={() => onChangePanel(GENERATORS_PANEL_KEY)}>The Fields</button>\n                <button onClick={() => onChangePanel(SETTINGS_PANEL_KEY)}>Settings</button>\n            </div>\n        );\n    }\n}","import * as React from \"react\";\nimport {loadSave, newSave, saveGame, saveGameExists} from \"./saveService\";\nimport {Header} from \"../layout/Header\";\nimport {Generators} from \"../generators/generators\";\nimport {Settings} from \"../settings/Settings\";\nimport {GameState} from \"./game-state\";\nimport {IPurchasable} from \"../economy/IPurchaseable\";\nimport {GameClock} from \"./game-clock\";\nimport {AdventureLog} from \"../adventure-log/AdventureLog\";\nimport {addJournalEntry, clearJournal} from \"../adventure-log/journal\";\nimport {PanelSelector} from \"../layout/PanelSelector\";\nimport {GENERATORS_PANEL_KEY, SETTINGS_PANEL_KEY} from \"../config/constants\";\n\ntype CoreProps = {}\ntype CoreState = {\n    gameState: GameState,\n    activePanel: string\n}\n\nexport class CorePanel extends React.Component<CoreProps, CoreState> {\n    clock: GameClock | undefined;\n    readonly state = {\n        gameState: saveGameExists() ? loadSave() : newSave(),\n        activePanel: GENERATORS_PANEL_KEY\n    };\n\n    componentDidMount(): void {\n        this.clock = new GameClock(this.state.gameState, (newState: GameState) => this.onTick(newState));\n        this.setState({activePanel: GENERATORS_PANEL_KEY});\n    }\n\n    onTick(newState: GameState) {\n        this.setState({gameState: newState});\n    }\n\n    addCurrency(currencyName: string, currencyAmount: number) {\n        // TODO: Abstract this for manual action & future FAME multiplier\n        const newState = {...this.state.gameState};\n        newState.currencies.relics += currencyAmount;\n        addJournalEntry(newState, \"You dust off some potsherds.\");\n        this.setState({gameState: newState})\n    }\n\n    makePurchase(purchaseAmount: number, purchaseType: IPurchasable) {\n        let newState = {...this.state.gameState};\n        newState = purchaseType.commitTransaction(newState, purchaseAmount);\n\n        this.setState({gameState: newState});\n        if(purchaseType.updateClock) {\n            // @ts-ignore\n            this.clock.updateState(newState);\n        }\n    }\n\n    clearLog() {\n        clearJournal(this.state.gameState)\n    }\n\n    changeActivePanel(panelKey: string) {\n        this.setState({activePanel: panelKey});\n    }\n\n    save() {\n        const newState = {...this.state.gameState};\n        newState.saveTime = new Date();\n        this.setState({gameState: newState});\n        saveGame(newState);\n    }\n\n    clearSave() {\n        console.log(\"CLEARING SAVE\")\n        // @ts-ignore\n        this.clock.clearClock();\n        const newState = newSave();\n        newState.saveTime = new Date();\n        this.setState({gameState: newState});\n        saveGame(newState);\n        // eslint-disable-next-line no-restricted-globals\n        location.reload();\n    }\n\n    render() {\n        let activePanel;\n        switch (this.state.activePanel) {\n            case SETTINGS_PANEL_KEY:\n                activePanel = (\n                    <Settings\n                        gameState={this.state.gameState}\n                        onSave={() => this.save()}\n                        onClearSave={() => this.clearSave()}\n                    />\n                )\n                break;\n            case GENERATORS_PANEL_KEY:\n            default:\n                activePanel = (\n                    <Generators\n                        gameState={this.state.gameState}\n                        onAddCurrency={(currencyName: string, currencyAmount: number) => this.addCurrency(currencyName, currencyAmount)}\n                        onPurchase={(purchaseAmount: number, purchaseType: IPurchasable) => this.makePurchase(purchaseAmount, purchaseType)}\n                    />\n                );\n        }\n\n        return (\n            <div>\n                <header className=\"app-header\">\n                    <Header gameState={this.state.gameState}/>\n                </header>\n                <PanelSelector onChangePanel={(panelKey: string) => this.changeActivePanel(panelKey)}/>\n                <div className=\"core-panel__flex\">\n                    {activePanel}\n                    <div>\n                        <AdventureLog clearLog={() => this.clearLog()} journalState={this.state.gameState.journalState}/>\n                    </div>\n                </div>\n\n            </div>\n        );\n    }\n}\n","import React from 'react';\nimport './App.scss';\nimport {CorePanel} from \"./core/CorePanel\";\nimport {ThemeContext, themes} from \"./layout/theme-context\";\n\ntype AppProps = {}\ntype AppState = {\n    theme: any,\n    toggleTheme: () => {}\n}\n\nclass App extends React.Component<AppProps, AppState> {\n    readonly state: AppState;\n    toggleTheme: any;\n\n    constructor(props: any) {\n        super(props);\n\n        this.toggleTheme = () => {\n            this.setState(state => ({\n                theme:\n                    state.theme === themes.dark\n                        ? themes.light\n                        : themes.dark,\n            }));\n        };\n\n        this.state = {\n            theme: themes.light,\n            toggleTheme: this.toggleTheme,\n        };\n\n    }\n\n    render() {\n        return (\n                <ThemeContext.Provider value={this.state}>\n                    <div className={this.state.theme.themeClass}>\n                        <CorePanel/>\n                    </div>\n                </ThemeContext.Provider>\n        );\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resource-display are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}