{"version":3,"sources":["core/journal.ts","config/constants.ts","core/game-state.ts","core/saveService.ts","economy/transactions/studentTransaction.ts","economy/jobAssignments.ts","shared/relicsButton.tsx","panels/relicPanel.tsx","layout/theme-context.ts","panels/settings.tsx","core/event-manager.ts","core/game-clock.ts","panels/adventureLog.tsx","panels/resourcePanel.tsx","layout/navButton.tsx","layout/panelSelector.tsx","economy/transactions/KnowledgeTransaction.ts","panels/lab.tsx","core/achievements.ts","core/corePanel.tsx","app.tsx","serviceWorker.ts","index.tsx"],"names":["addJournalEntry","gameState","entry","journalState","entries","push","entryType","length","shift","addDetailedJournalEntry","GameState","resourceState","ResourceState","jobAssignments","JobAssignments","JournalState","saveTime","Date","settings","SettingsState","achievements","Achievements","relics","relicGenerator","students","knowledge","blood","money","fame","whispers","gatherRelics","darkMode","labUnlocked","saveGameExists","localStorage","getItem","loadSave","string","save","JSON","parse","atob","newSave","saveGame","setItem","btoa","stringify","StudentTransaction","updateClock","amount","this","isValidPurchase","currCost","getCost","purchaseAmount","sum","theoreticalAmt","i","removeGatherers","countAvailableStudents","assignedStudents","RelicsButton","props","tooltip","id","children","disabled","onClick","className","compact","clickFunc","dataTipAttr","place","effect","React","Component","RelicPanel","studentTransaction","assignGatherers","onAddCurrency","onPurchase","availableStudents","studentsHired","assignGather","removeGather","themes","light","themeClass","dark","ThemeContext","createContext","theme","toggleTheme","Settings","onSave","onClearSave","Consumer","onToggleTheme","toString","randomEvent","diceRoll","Math","floor","random","console","log","GameClock","onTick","saveClockId","resourceClockId","tickRatio","emitTick","maxTicks","tickNumber","setInterval","updateState","TICK_SPEED","newState","clearInterval","tick","AdventureLog","clearLog","entryList","slice","reverse","map","getClassName","ResourcePanel","toFixed","NavButton","selected","PanelSelector","onChangePanel","KnowledgeTransaction","ResearchLab","knowledgeTransaction","CorePanel","clock","state","activePanel","setState","currencyName","currencyAmount","purchaseType","commitTransaction","panelKey","clearClock","location","reload","clearSave","makePurchase","addCurrency","changeActivePanel","App","Provider","value","Boolean","window","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.58e762bf.chunk.js","sourcesContent":["import {GameState} from \"./game-state\";\r\nimport {MAX_LOG_SIZE} from \"../config/constants\";\r\n\r\nexport const ACHIEVEMENT_ENTRY_TYPE = \"ACHIEVEMENT\";\r\nexport const COMMON_ENTRY_TYPE = \"COMMON\";\r\nexport const BLOOD_ENTRY_TYPE = \"BLOOD\";\r\n\r\nexport type DetailedEntry = {\r\n    entry: string,\r\n    entryType: string,\r\n}\r\n\r\nexport function addJournalEntry(gameState: GameState, entry: string){\r\n    gameState.journalState.entries.push({\r\n        entry: entry,\r\n        entryType: COMMON_ENTRY_TYPE\r\n    });\r\n    if(gameState.journalState.entries.length >= MAX_LOG_SIZE) {\r\n        gameState.journalState.entries.shift();\r\n    }\r\n    return gameState;\r\n}\r\n\r\nexport function addDetailedJournalEntry(gameState: GameState, entry: DetailedEntry){\r\n    gameState.journalState.entries.push(entry);\r\n    if(gameState.journalState.entries.length >= MAX_LOG_SIZE) {\r\n        gameState.journalState.entries.shift();\r\n    }\r\n    return gameState;\r\n}\r\n\r\nexport function clearJournal(gameState: GameState) {\r\n    gameState.journalState.entries = [];\r\n}\r\n","export const MIN_SAVE_REWARD_TIME = 24;\r\nexport const TICK_SPEED = 50;\r\nexport const MAX_LOG_SIZE = 25;\r\n\r\n// Panel Keys\r\nexport const SETTINGS_PANEL_KEY = \"SETTINGS\";\r\nexport const GENERATORS_PANEL_KEY = \"GENERATORS\";\r\nexport const LAB_KEY = \"LAB\";\r\n","import {COMMON_ENTRY_TYPE, DetailedEntry} from \"./journal\";\r\n\r\nexport class GameState {\r\n    resourceState: ResourceState = new ResourceState();\r\n    jobAssignments: JobAssignments = new JobAssignments();\r\n    journalState: JournalState = new JournalState();\r\n    saveTime: Date = new Date();\r\n    settings: SettingsState = new SettingsState();\r\n    achievements: Achievements = new Achievements();\r\n}\r\n\r\nexport class ResourceState {\r\n    relics: number = 0;\r\n    relicGenerator: number = 0;\r\n    students: number = 0;\r\n    knowledge: number = 0;\r\n    blood: number = 0;\r\n    money: number = 0;\r\n    fame: number = 0;\r\n    whispers: number = 0;\r\n}\r\n\r\nexport class JobAssignments {\r\n    gatherRelics: number = 0;\r\n}\r\n\r\nexport class JournalState {\r\n    entries: DetailedEntry[] = [{\r\n        entry: \"The new dig site lays before me, I wonder what treasures lay yet unearthed?\",\r\n        entryType: COMMON_ENTRY_TYPE\r\n    }];\r\n}\r\n\r\nexport class SettingsState {\r\n    darkMode: boolean = false;\r\n}\r\n\r\nexport class Achievements {\r\n    labUnlocked: boolean = false;\r\n}\r\n","import {GameState} from \"./game-state\";\r\n\r\nexport function saveGameExists() {\r\n    return !!localStorage.getItem(\"RelicsSave\");\r\n}\r\n\r\nexport function loadSave() {\r\n    const string = localStorage.getItem(\"RelicsSave\");\r\n    const save =  string ? JSON.parse(atob(string)) : null;\r\n    const merged = {...new GameState(), ...save};\r\n    return merged;\r\n}\r\n\r\nexport function newSave(): GameState {\r\n    return new GameState();\r\n}\r\n\r\nexport function saveGame(gameState: GameState) {\r\n    gameState.saveTime = new Date();\r\n    localStorage.setItem(\"RelicsSave\", btoa(JSON.stringify(gameState)));\r\n}\r\n\r\n\r\nexport function exportSave(gameState: GameState) {\r\n    saveGame(gameState);\r\n    // TODO: export\r\n}\r\n\r\nexport function importSave(gameState: GameState) {\r\n    saveGame(gameState);\r\n    // TODO: import\r\n}\r\n","import {ITransaction } from \"./ITransaction\";\r\nimport {GameState} from \"../../core/game-state\";\r\n\r\nexport class StudentTransaction implements ITransaction {\r\n    updateClock = false;\r\n\r\n    commitTransaction(gameState: GameState, amount: number): GameState {\r\n        if(this.isValidPurchase(gameState, amount)) {\r\n            const currCost = this.getCost(gameState, amount);\r\n\r\n            gameState.resourceState.relics -= currCost;\r\n            gameState.resourceState.students += amount;\r\n        }\r\n        return gameState;\r\n    }\r\n\r\n    isValidPurchase(gameState: GameState, amount: number): boolean {\r\n        const currCost = this.getCost(gameState, amount);\r\n\r\n        return gameState.resourceState.relics >= currCost;\r\n    }\r\n\r\n    getCost(gameState: GameState, purchaseAmount: number) {\r\n        let sum = 0;\r\n        let theoreticalAmt = gameState.resourceState.students || 0;\r\n        for (let i = 0; i < purchaseAmount; i++) {\r\n            sum += 15 + theoreticalAmt * 10;\r\n            theoreticalAmt++;\r\n        }\r\n        return sum;\r\n    }\r\n}\r\n","import {GameState} from \"../core/game-state\";\r\n\r\nexport function assignGatherers(amount: number, gameState: GameState){\r\n    // Cache available in the future?\r\n    if(countAvailableStudents(gameState) >= amount) {\r\n        gameState.jobAssignments.gatherRelics += amount;\r\n    }\r\n}\r\n\r\nexport function removeGatherers(amount: number, gameState: GameState){\r\n    // Cache available in the future?\r\n    gameState.jobAssignments.gatherRelics -= amount;\r\n    if(gameState.jobAssignments.gatherRelics < 0) gameState.jobAssignments.gatherRelics = 0;\r\n}\r\n\r\nexport function countAvailableStudents(gameState: GameState) {\r\n    const assignedStudents = gameState.jobAssignments.gatherRelics;\r\n    return gameState.resourceState.students - assignedStudents;\r\n}","import React from \"react\";\r\nimport ReactTooltip from \"react-tooltip\";\r\n\r\ntype RelicsButtonProps = {\r\n  onClick: any;\r\n  id?: string; // Must be provided for tooltip to work\r\n  disabled?: any;\r\n  tooltip?: string;\r\n  compact?: boolean;\r\n}\r\n\r\nexport class RelicsButton extends React.Component<RelicsButtonProps> {\r\n\r\n    render() {\r\n        const { tooltip, id, children, disabled, onClick, compact } = this.props;\r\n        let className = \"relics-button\";\r\n        if(disabled) className += \" relics-button--disabled\";\r\n        if(compact) className += \" relics-button--compact\";\r\n        const clickFunc = disabled ? () => {} : onClick;\r\n        const dataTipAttr = {};\r\n        if(tooltip)\r\n        {\r\n            // @ts-ignore\r\n            dataTipAttr['data-tip'] = '';\r\n            // @ts-ignore\r\n            dataTipAttr['data-for'] = id;\r\n        }\r\n        return (\r\n            <span { ...dataTipAttr} id={id} className={className} onClick={clickFunc}>\r\n                {children}\r\n                {tooltip &&\r\n                    <ReactTooltip id={id} place=\"bottom\" effect=\"solid\">\r\n                        {tooltip}\r\n                    </ReactTooltip>\r\n                }\r\n            </span>\r\n        )\r\n    }\r\n}\r\n","import * as React from \"react\";\r\nimport { GameState } from \"../core/game-state\";\r\nimport {RelicGenerator} from \"../economy/transactions/relicGenerator\";\r\nimport {StudentTransaction} from \"../economy/transactions/studentTransaction\";\r\nimport {assignGatherers, countAvailableStudents, removeGatherers} from \"../economy/jobAssignments\";\r\nimport {RelicsButton} from \"../shared/relicsButton\";\r\nimport {KnowledgeTransaction} from \"../economy/transactions/KnowledgeTransaction\";\r\n\r\ntype GeneratorProps = {\r\n    gameState: GameState,\r\n    onPurchase: any,\r\n    onAddCurrency: any\r\n}\r\n\r\nexport class RelicPanel extends React.Component<GeneratorProps> {\r\n    readonly studentTransaction = new StudentTransaction();\r\n\r\n    assignGather() {\r\n        const { gameState } = this.props;\r\n        assignGatherers(1, gameState);\r\n    }\r\n    removeGather() {\r\n        const { gameState } = this.props;\r\n        removeGatherers(1, gameState);\r\n    }\r\n\r\n    render() {\r\n        const { gameState, onAddCurrency, onPurchase } = this.props;\r\n        const availableStudents = countAvailableStudents(gameState);\r\n        const studentsHired = gameState.resourceState.students >= 1;\r\n\r\n        return (\r\n            <div className=\"panel--left-align\">\r\n                <div className=\"button-container\">\r\n                    <RelicsButton onClick={() => onAddCurrency(\"relics\", 1)}>Look for relics</RelicsButton>\r\n                </div>\r\n                {studentsHired &&\r\n                    <div>\r\n                        <div>Students:</div>\r\n                        <div>\r\n                            Gathering Relics: {gameState.jobAssignments.gatherRelics}\r\n                            <span><RelicsButton\r\n                                compact={true}\r\n                                disabled={availableStudents <= 0}\r\n                                onClick={() => this.assignGather()}>+</RelicsButton>\r\n                            <RelicsButton\r\n                                compact={true}\r\n                                disabled={gameState.jobAssignments.gatherRelics <= 0}\r\n                                onClick={() => this.removeGather()}\r\n                            >\r\n                                -\r\n                            </RelicsButton></span>\r\n                        </div>\r\n                    </div>\r\n                }\r\n                <br/>\r\n                <div>\r\n                    <div className=\"button-container\">\r\n                        <RelicsButton\r\n                                disabled={!this.studentTransaction.isValidPurchase(gameState, 1)}\r\n                                onClick={() => onPurchase(1, this.studentTransaction)}\r\n                                id=\"hireStudent\"\r\n                                tooltip={\"Hire some students to dust off relics for you. They work for relics.\\n\"\r\n                                    + \"Relics: \" + this.studentTransaction.getCost(gameState, 1)}\r\n                        >\r\n                            Hire a Student\r\n                        </RelicsButton>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","import React from \"react\";\r\n\r\nexport const themes = {\r\n    light: {\r\n        themeClass: 'app app--light',\r\n    },\r\n    dark: {\r\n        themeClass: 'app app--dark',\r\n    },\r\n};\r\n\r\nexport const ThemeContext = React.createContext({\r\n    theme: themes.dark, // default value\r\n    toggleTheme: () => {\r\n    },\r\n});","import {GameState} from \"../core/game-state\";\r\nimport {ThemeContext} from \"../layout/theme-context\";\r\nimport React from \"react\";\r\nimport {RelicsButton} from \"../shared/relicsButton\";\r\n\r\ntype SettingsProps = {\r\n    gameState: GameState,\r\n    onSave: any,\r\n    onClearSave: any\r\n}\r\n\r\nexport class Settings extends React.Component<SettingsProps> {\r\n    onToggleTheme(toggleTheme: any) {\r\n        const { gameState } = this.props;\r\n        gameState.settings.darkMode = !gameState.settings.darkMode;\r\n        toggleTheme();\r\n    }\r\n    render() {\r\n        const {onSave, onClearSave} = this.props;\r\n\r\n        return (\r\n            <div>\r\n                <div className={\"button-container\"}>\r\n                    <RelicsButton onClick={() => onSave()}>Save</RelicsButton>\r\n                    <RelicsButton onClick={() => onClearSave()}>Clear Save</RelicsButton>\r\n                </div>\r\n                <div>\r\n                    <ThemeContext.Consumer>\r\n                        {({theme, toggleTheme}) => (\r\n                            <div className={\"button-container\"}>\r\n                                <RelicsButton onClick={() => this.onToggleTheme(toggleTheme)}>\r\n                                    Toggle Dark Mode\r\n                                </RelicsButton>\r\n                            </div>\r\n                        )}\r\n                    </ThemeContext.Consumer>\r\n                </div>\r\n                <p>Last Saved at ${this.props.gameState.saveTime ? this.props.gameState.saveTime.toString() : \"\"}</p>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","import {GameState} from \"./game-state\";\r\nimport {addDetailedJournalEntry, addJournalEntry, BLOOD_ENTRY_TYPE} from \"./journal\";\r\nimport {countAvailableStudents, removeGatherers} from \"../economy/jobAssignments\";\r\n\r\nexport function randomEvent(gameState: GameState) {\r\n    const diceRoll = roll1d100();\r\n    if(diceRoll >= 95) {\r\n        addJournalEntry(gameState, \"The wind blows across the dusty plain\");\r\n    }\r\n    if( 10 <= diceRoll && diceRoll <= 15) {\r\n        addJournalEntry(gameState, \"A stranger shuffles up and hands something to you: +100 Relics!\");\r\n        gameState.resourceState.relics += 100\r\n    }\r\n    console.log(diceRoll);\r\n    if(diceRoll === 1 && gameState.resourceState.students > 2) {\r\n        // A dark event occurs\r\n        if(countAvailableStudents(gameState) <= 0) {\r\n            removeGatherers(1, gameState);\r\n        }\r\n        gameState.resourceState.blood ? gameState.resourceState.blood++ : gameState.resourceState.blood = 1;\r\n        gameState.resourceState.students -= 1;\r\n\r\n        addDetailedJournalEntry(gameState, {\r\n            entry: \"You are short one student.\",\r\n            entryType: BLOOD_ENTRY_TYPE,\r\n        });\r\n    }\r\n}\r\n\r\nfunction roll1d100() {\r\n    return Math.floor(Math.random() * 100 + 1);\r\n}\r\n","import {saveGame} from \"./saveService\";\r\nimport {GameState} from \"./game-state\";\r\nimport {TICK_SPEED} from \"../config/constants\";\r\nimport {randomEvent} from \"./event-manager\";\r\n\r\nexport class GameClock {\r\n    saveClockId: any;\r\n    resourceClockId: any;\r\n    gameState: GameState; // Not readonly, we're emitting the changes for the rest of the app\r\n    tickRatio: number;\r\n    emitTick: any;\r\n    maxTicks: number;\r\n    tickNumber: number = 0;\r\n\r\n    constructor(gameState: GameState, onTick: any) {\r\n        this.saveClockId = setInterval(\r\n            () => saveGame(gameState),\r\n            30000\r\n        );\r\n        this.gameState = gameState;\r\n        this.updateState(gameState);\r\n        this.tickRatio = TICK_SPEED / 1000;\r\n        this.maxTicks = (5 * 1000) / TICK_SPEED;\r\n        this.emitTick = onTick;\r\n    }\r\n\r\n    tick() {\r\n        // TODO: Tickcount, random event on tickcount\r\n        var newState = {...this.gameState};\r\n        if(this.gameState.jobAssignments.gatherRelics) {\r\n            newState.resourceState.relics += this.gameState.jobAssignments.gatherRelics*this.tickRatio;\r\n        }\r\n\r\n        if(this.tickNumber >= this.maxTicks ) {\r\n            // every 5s, test for an event\r\n            randomEvent(newState);\r\n            this.tickNumber = 1;\r\n        }\r\n        this.gameState = newState;\r\n        this.emitTick(newState);\r\n        this.tickNumber++;\r\n    }\r\n\r\n    updateState(gameState: GameState) {\r\n        clearInterval(this.resourceClockId);\r\n        this.resourceClockId = setInterval(() => this.tick(), TICK_SPEED);\r\n    }\r\n\r\n    clearClock() {\r\n        clearInterval(this.resourceClockId);\r\n        clearInterval(this.saveClockId);\r\n    }\r\n\r\n}\r\n","import * as React from \"react\";\r\nimport {JournalState} from \"../core/game-state\";\r\nimport {RelicsButton} from \"../shared/relicsButton\";\r\nimport {ACHIEVEMENT_ENTRY_TYPE, BLOOD_ENTRY_TYPE, COMMON_ENTRY_TYPE, DetailedEntry} from \"../core/journal\";\r\n\r\ntype JournalProps = {\r\n    journalState: JournalState,\r\n    clearLog: any\r\n}\r\n\r\nexport class AdventureLog extends React.Component<JournalProps> {\r\n    getClassName(entry: DetailedEntry) {\r\n        let className = \"padded-text journal__entry\";\r\n        switch (entry.entryType) {\r\n            case ACHIEVEMENT_ENTRY_TYPE:\r\n                className += \" journal__entry--achievement\";\r\n                break;\r\n            case BLOOD_ENTRY_TYPE:\r\n                className += \" blood-text\";\r\n                break;\r\n            case COMMON_ENTRY_TYPE:\r\n            default:\r\n        }\r\n        return className;\r\n    }\r\n\r\n    render() {\r\n        const { journalState, clearLog } = this.props;\r\n        const entryList = journalState.entries.slice(0).reverse().map((entry) =>\r\n            <div className={this.getClassName(entry)}>\r\n                {entry.entry}\r\n            </div>\r\n        );\r\n        return (\r\n            <div className=\"panel--left-align journal-panel\">\r\n                <RelicsButton onClick={() => clearLog()}>Clear Log</RelicsButton>\r\n                <div className=\"journal\">{entryList}</div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","import * as React from \"react\";\r\nimport { GameState } from \"../core/game-state\";\r\nimport {RelicGenerator} from \"../economy/transactions/relicGenerator\";\r\nimport {countAvailableStudents} from \"../economy/jobAssignments\";\r\n\r\ntype ResourceProps = {\r\n    gameState: GameState,\r\n}\r\n\r\nexport class ResourcePanel extends React.Component<ResourceProps> {\r\n\r\n    render() {\r\n        const { gameState } = this.props;\r\n        return (\r\n            <div className=\"panel--right-align\">\r\n                {gameState.resourceState.students &&\r\n                    <div className=\"padded-text\">Students: {countAvailableStudents(gameState)}/{gameState.resourceState.students}</div>}\r\n                {gameState.resourceState.relics &&\r\n                    <div className=\"padded-text\">Relics: {gameState.resourceState.relics.toFixed()}</div>}\r\n                {gameState.resourceState.knowledge &&\r\n                    <div className=\"padded-text knowledge-text\">Knowledge: {gameState.resourceState.knowledge.toFixed()}</div>}\r\n                {gameState.resourceState.blood &&\r\n                    <div className=\"padded-text blood-text\">Blood: {gameState.resourceState.blood.toFixed()}</div>}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","import React from \"react\";\r\n\r\ntype NavButtonProps = {\r\n  onClick: any;\r\n  disabled?: any | undefined;\r\n  selected?: boolean | undefined;\r\n}\r\n\r\nexport class NavButton extends React.Component<NavButtonProps> {\r\n\r\n    render() {\r\n        let className = \"nav-button\";\r\n        if(this.props.disabled) className += \" nav-button--disabled\";\r\n        if(this.props.selected) className += \" nav-button--selected\";\r\n\r\n        const clickFunc = this.props.disabled ? () => {} : this.props.onClick;\r\n        return (\r\n            <span\r\n                className={className}\r\n                onClick={clickFunc}>\r\n                {this.props.children}\r\n            </span>\r\n        )\r\n    }\r\n}","import React from \"react\";\r\nimport {GENERATORS_PANEL_KEY, LAB_KEY, SETTINGS_PANEL_KEY} from \"../config/constants\";\r\nimport {NavButton} from \"./navButton\";\r\nimport {GameState} from \"../core/game-state\";\r\n\r\ntype PanelSelectorProps = {\r\n    onChangePanel: any,\r\n    selected: string,\r\n    gameState: GameState\r\n}\r\nexport class PanelSelector extends React.Component<PanelSelectorProps>{\r\n    render() {\r\n        const {onChangePanel, selected, gameState} = this.props;\r\n        return (\r\n            <div className={\"nav-panel\"}>\r\n                <NavButton selected={selected === GENERATORS_PANEL_KEY}\r\n                           onClick={() => onChangePanel(GENERATORS_PANEL_KEY)}>\r\n                    Dig Site 1\r\n                </NavButton>\r\n                {gameState.resourceState.students >= 10 &&\r\n                    <NavButton selected={selected === LAB_KEY}\r\n                               onClick={() => onChangePanel(LAB_KEY)}>\r\n                        Research Lab\r\n                    </NavButton>\r\n                }\r\n\r\n                <NavButton selected={selected === SETTINGS_PANEL_KEY}\r\n                           onClick={() => onChangePanel(SETTINGS_PANEL_KEY)}>\r\n                    Settings\r\n                </NavButton>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","import {ITransaction } from \"./ITransaction\";\r\nimport {GameState} from \"../../core/game-state\";\r\n\r\nexport class KnowledgeTransaction implements ITransaction {\r\n    updateClock = false;\r\n\r\n    commitTransaction(gameState: GameState, amount: number): GameState {\r\n        if(this.isValidPurchase(gameState, amount)) {\r\n            const currCost = this.getCost(gameState, amount);\r\n\r\n            gameState.resourceState.relics -= currCost;\r\n            gameState.resourceState.knowledge += amount;\r\n        }\r\n        return gameState;\r\n    }\r\n\r\n    isValidPurchase(gameState: GameState, amount: number): boolean {\r\n        const currCost = this.getCost(gameState, amount);\r\n        return gameState.resourceState.relics >= currCost;\r\n    }\r\n\r\n    getCost(gameState: GameState, purchaseAmount: number) {\r\n        return 100 * purchaseAmount;\r\n    }\r\n}\r\n","import React from \"react\";\r\nimport {GameState} from \"../core/game-state\";\r\nimport {labFirstUnlock} from \"../core/achievements\";\r\nimport {RelicsButton} from \"../shared/relicsButton\";\r\nimport {KnowledgeTransaction} from \"../economy/transactions/KnowledgeTransaction\";\r\n\r\ntype LabProps = {\r\n    gameState: GameState;\r\n    onPurchase: any;\r\n}\r\n\r\nexport class ResearchLab extends React.Component<LabProps> {\r\n    readonly knowledgeTransaction = new KnowledgeTransaction();\r\n\r\n    componentDidMount(): void {\r\n        labFirstUnlock(this.props.gameState);\r\n    }\r\n\r\n    render() {\r\n        const { gameState, onPurchase } = this.props;\r\n        return (\r\n            <div>\r\n                <RelicsButton\r\n                    disabled={!this.knowledgeTransaction.isValidPurchase(gameState, 1)}\r\n                    onClick={() => onPurchase(1, this.knowledgeTransaction)}\r\n                    id=\"studyRelics\"\r\n                    tooltip={\"Peruse your collection, perhaps you can find something useful.\\n\"\r\n                    + \"Relics: \" + this.knowledgeTransaction.getCost(gameState, 1)}\r\n                >\r\n                    Study Relics\r\n                </RelicsButton>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","import {GameState} from \"./game-state\";\r\nimport {ACHIEVEMENT_ENTRY_TYPE, addDetailedJournalEntry} from \"./journal\";\r\n\r\nexport function labFirstUnlock(gameState: GameState) {\r\n    if(!gameState.achievements.labUnlocked) {\r\n        gameState.achievements.labUnlocked = true;\r\n        addDetailedJournalEntry(gameState, {\r\n            entry: \"With your new found stash of relics, you retreat to your personal laboratory!\",\r\n            entryType: ACHIEVEMENT_ENTRY_TYPE,\r\n        });\r\n    }\r\n}\r\n","import * as React from \"react\";\r\nimport {loadSave, newSave, saveGame, saveGameExists} from \"./saveService\";\r\nimport {RelicPanel} from \"../panels/relicPanel\";\r\nimport {Settings} from \"../panels/settings\";\r\nimport {GameState} from \"./game-state\";\r\nimport {ITransaction} from \"../economy/transactions/ITransaction\";\r\nimport {GameClock} from \"./game-clock\";\r\nimport {GENERATORS_PANEL_KEY, LAB_KEY, SETTINGS_PANEL_KEY} from \"../config/constants\";\r\nimport {addJournalEntry, clearJournal} from \"./journal\";\r\nimport {AdventureLog} from \"../panels/adventureLog\";\r\nimport {ResourcePanel} from \"../panels/resourcePanel\";\r\nimport {PanelSelector} from \"../layout/panelSelector\";\r\nimport {ResearchLab} from \"../panels/lab\";\r\n\r\ntype CoreProps = {}\r\ntype CoreState = {\r\n    gameState: GameState,\r\n    activePanel: string\r\n}\r\n\r\nexport class CorePanel extends React.Component<CoreProps, CoreState> {\r\n    clock: GameClock | undefined;\r\n    readonly state = {\r\n        gameState: saveGameExists() ? loadSave() : newSave(),\r\n        activePanel: GENERATORS_PANEL_KEY\r\n    };\r\n\r\n    componentDidMount(): void {\r\n        // TODO: Calculate offline progress before starting clock\r\n        this.clock = new GameClock(this.state.gameState, (newState: GameState) => this.onTick(newState));\r\n        this.setState({activePanel: GENERATORS_PANEL_KEY});\r\n    }\r\n\r\n    onTick(newState: GameState) {\r\n        this.setState({gameState: newState});\r\n    }\r\n\r\n    addCurrency(currencyName: string, currencyAmount: number) {\r\n        // TODO: Abstract this for manual action & future FAME multiplier\r\n        const newState = {...this.state.gameState};\r\n        newState.resourceState.relics += currencyAmount;\r\n        addJournalEntry(newState, \"You dust off some potsherds.\");\r\n        this.setState({gameState: newState})\r\n    }\r\n\r\n    makePurchase(purchaseAmount: number, purchaseType: ITransaction) {\r\n        let newState = {...this.state.gameState};\r\n        newState = purchaseType.commitTransaction(newState, purchaseAmount);\r\n\r\n        this.setState({gameState: newState});\r\n        if(purchaseType.updateClock) {\r\n            // @ts-ignore\r\n            this.clock.updateState(newState);\r\n        }\r\n    }\r\n\r\n    clearLog() {\r\n        clearJournal(this.state.gameState)\r\n    }\r\n\r\n    changeActivePanel(panelKey: string) {\r\n        this.setState({activePanel: panelKey});\r\n    }\r\n\r\n    save() {\r\n        const newState = {...this.state.gameState};\r\n        this.setState({gameState: newState});\r\n        saveGame(newState);\r\n    }\r\n\r\n    clearSave() {\r\n        // @ts-ignore\r\n        this.clock.clearClock();\r\n        const newState = newSave();\r\n        newState.saveTime = new Date();\r\n        this.setState({gameState: newState});\r\n        saveGame(newState);\r\n        // eslint-disable-next-line no-restricted-globals\r\n        location.reload();\r\n    }\r\n\r\n    render() {\r\n        let activePanel;\r\n        switch (this.state.activePanel) {\r\n            case SETTINGS_PANEL_KEY:\r\n                activePanel = (\r\n                    <Settings\r\n                        gameState={this.state.gameState}\r\n                        onSave={() => this.save()}\r\n                        onClearSave={() => this.clearSave()}\r\n                    />\r\n                );\r\n                break;\r\n            case LAB_KEY:\r\n                activePanel = (\r\n                    <ResearchLab\r\n                        gameState={this.state.gameState}\r\n                        onPurchase={(purchaseAmount: number, purchaseType: ITransaction) => this.makePurchase(purchaseAmount, purchaseType)}\r\n                    />\r\n                );\r\n                break;\r\n            case GENERATORS_PANEL_KEY:\r\n            default:\r\n                activePanel = (\r\n                    <RelicPanel\r\n                        gameState={this.state.gameState}\r\n                        onAddCurrency={(currencyName: string, currencyAmount: number) => this.addCurrency(currencyName, currencyAmount)}\r\n                        onPurchase={(purchaseAmount: number, purchaseType: ITransaction) => this.makePurchase(purchaseAmount, purchaseType)}\r\n                    />\r\n                );\r\n        }\r\n\r\n        return (\r\n            <div className=\"core-panel\">\r\n                <div className=\"core-panel__flex\">\r\n                    <div className=\"core-panel__left-column\">\r\n                        <AdventureLog clearLog={() => this.clearLog()} journalState={this.state.gameState.journalState}/>\r\n                    </div>\r\n                    <div className=\"core-panel__center-column\">\r\n                        <PanelSelector onChangePanel={(panelKey: string) => this.changeActivePanel(panelKey)}\r\n                            selected={this.state.activePanel}\r\n                            gameState={this.state.gameState}\r\n                        />\r\n                        {activePanel}\r\n                    </div>\r\n                    <div className=\"core-panel__right-column\">\r\n                        <ResourcePanel gameState={this.state.gameState}/>\r\n                    </div>\r\n                </div>\r\n\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","import React from 'react';\r\nimport './app.scss';\r\nimport {CorePanel} from \"./core/corePanel\";\r\nimport {ThemeContext, themes} from \"./layout/theme-context\";\r\nimport {loadSave, newSave, saveGameExists} from \"./core/saveService\";\r\n\r\ntype AppProps = {}\r\ntype AppState = {\r\n    theme: any,\r\n    toggleTheme: () => {}\r\n}\r\n\r\nclass App extends React.Component<AppProps, AppState> {\r\n    readonly state: AppState;\r\n    toggleTheme: any;\r\n\r\n    constructor(props: any) {\r\n        super(props);\r\n        const darkMode = saveGameExists() && loadSave().settings.darkMode;\r\n\r\n        this.toggleTheme = () => {\r\n            this.setState(state => ({\r\n                theme:\r\n                    state.theme === themes.dark\r\n                        ? themes.light\r\n                        : themes.dark,\r\n            }));\r\n        };\r\n\r\n        this.state = {\r\n            theme: darkMode ? themes.dark : themes.light,\r\n            toggleTheme: this.toggleTheme,\r\n        };\r\n\r\n    }\r\n\r\n    render() {\r\n        return (\r\n                <ThemeContext.Provider value={this.state}>\r\n                    <div className={this.state.theme.themeClass}>\r\n                        <CorePanel/>\r\n                    </div>\r\n                </ThemeContext.Provider>\r\n        );\r\n    }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resource-display are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(\r\n      process.env.PUBLIC_URL,\r\n      window.location.href\r\n    );\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './app';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}