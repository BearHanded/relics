{"version":3,"sources":["core/journal.ts","config/constants.ts","core/game-state.ts","core/saveService.ts","economy/Transaction.ts","economy/transactions/studentTransaction.tsx","economy/jobAssignments.ts","shared/relicsButton.tsx","shared/AssignWorkerOptions.tsx","economy/transactions/shedTransaction.tsx","economy/transactions/bankTransaction.tsx","panels/relicPanel.tsx","layout/theme-context.ts","panels/settings.tsx","core/event-manager.ts","core/game-clock.ts","panels/adventureLog.tsx","panels/resourcePanel.tsx","shared/formatNumbers.ts","layout/navButton.tsx","layout/panelSelector.tsx","economy/transactions/KnowledgeTransaction.tsx","economy/research/betterShovels.tsx","economy/research/bloodWard.tsx","economy/research/profit.tsx","economy/research/studentKnowledge.tsx","economy/research/mapTheRuins.tsx","economy/research/tours.tsx","economy/research/banks.tsx","economy/research/ritualCircle.tsx","economy/researchManager.ts","shared/researchButton.tsx","panels/lab.tsx","core/achievements.ts","economy/rituals/bleedingStones.tsx","panels/ritualPanel.tsx","core/corePanel.tsx","app.tsx","serviceWorker.ts","index.tsx"],"names":["addJournalEntry","gameState","entry","journalState","entries","push","entryType","length","shift","addDetailedJournalEntry","GameState","resourceState","ResourceState","jobAssignments","JobAssignments","JournalState","saveTime","Date","settings","SettingsState","achievements","Achievements","researchState","ResearchState","relics","relicCap","relicRate","relicGenerator","sheds","students","knowledge","knowledgeRate","knowledgeCap","blood","bloodRate","money","moneyRate","moneyCap","banks","bleedingStones","fame","whispers","gatherRelics","studyRelics","giftShop","darkMode","labUnlocked","banksOpen","studentKnowledge","profiteering","betterShovels","bloodWard","mapTheGrounds","tours","ritualCircle","saveGameExists","localStorage","getItem","loadSave","loadSaveFromString","string","newState","mergeStateWithDefault","JSON","parse","atob","newSave","saveGame","manualSave","setItem","btoa","stringify","Transaction","isValidPurchase","amount","commitTransaction","updateClock","Research","safeResource","resource","undefined","isAvailable","buildTooltip","title","className","id","StudentTransaction","currCost","getCost","purchaseAmount","sum","theoreticalAmt","i","removeGatherers","assignStudyRelics","countAvailableStudents","removeStudyRelics","removeGiftShop","assignedStudents","RelicsButton","this","props","tooltip","children","disabled","onClick","compact","clickFunc","dataTipAttr","key","place","effect","React","Component","AssignWorkerOptions","assignWorkers","removeWorkers","currentlyAssigned","availableWorkers","ShedTransaction","BankTransaction","RelicPanel","onAddCurrency","onPurchase","availableStudents","studentsHired","assignGatherers","assignGiftShop","themes","light","themeClass","dark","ThemeContext","createContext","theme","toggleTheme","Settings","state","saveString","displayExport","save","importText","prompt","importSave","onImportSave","setState","onSave","onClearSave","tryImportSave","onExport","Consumer","onToggleTheme","href","randomEvent","diceRoll","Math","floor","random","GameClock","onTick","saveClockId","resourceClockId","tickRatio","emitTick","maxTicks","lastTickDate","randomEventTimer","setInterval","updateState","TICK_SPEED","tickTimeStamp","seconds","getTime","randomEventsForDuration","calibrate","relicsPerSecond","knowledgePerSecond","moneyPerSecond","bloodPerSecond","relicsMultiplier","requiredRelicConsumption","manageRandomEvent","clearInterval","tick","AdventureLog","clearLog","entryList","slice","reverse","map","getClassName","ResourcePanelEntry","number","rateText","renderRate","rate","toLocaleString","minimumFractionDigits","maximumFractionDigits","renderCap","cap","ResourcePanel","toFixed","NavButton","selected","PanelSelector","onChangePanel","KnowledgeTransaction","BetterShovels","BloodWard","Profit","StudentKnowledge","MapTheRuins","Tours","Banks","RitualCircle","allResearches","ResearchButton","research","ResearchLab","assignStudentsStudy","removeStudentsStudy","availableResearch","filter","r","getAvailableResearches","createResearchButton","BleedingStonesTransaction","costs","bloodSum","knowledgeSum","relicSum","RitualPanel","CorePanel","clock","activePanel","currencyName","currencyAmount","transaction","panelKey","confirm","clearClock","clearSave","makePurchase","addCurrency","changeActivePanel","App","Provider","value","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.18392976.chunk.js","sourcesContent":["import {GameState} from \"./game-state\";\r\nimport {MAX_LOG_SIZE} from \"../config/constants\";\r\n\r\nexport const ACHIEVEMENT_ENTRY_TYPE = \"ACHIEVEMENT\";\r\nexport const COMMON_ENTRY_TYPE = \"COMMON\";\r\nexport const BLOOD_ENTRY_TYPE = \"BLOOD\";\r\n\r\nexport type DetailedEntry = {\r\n    entry: string,\r\n    entryType: string,\r\n}\r\n\r\nexport function addJournalEntry(gameState: GameState, entry: string){\r\n    gameState.journalState.entries.push({\r\n        entry: entry,\r\n        entryType: COMMON_ENTRY_TYPE\r\n    });\r\n    if(gameState.journalState.entries.length >= MAX_LOG_SIZE) {\r\n        gameState.journalState.entries.shift();\r\n    }\r\n    return gameState;\r\n}\r\n\r\nexport function addDetailedJournalEntry(gameState: GameState, entry: DetailedEntry){\r\n    gameState.journalState.entries.push(entry);\r\n    if(gameState.journalState.entries.length >= MAX_LOG_SIZE) {\r\n        gameState.journalState.entries.shift();\r\n    }\r\n    return gameState;\r\n}\r\n\r\nexport function clearJournal(gameState: GameState) {\r\n    gameState.journalState.entries = [];\r\n}\r\n","export const MIN_SAVE_REWARD_TIME = 24;\r\nexport const TICK_SPEED = 50;\r\nexport const SECONDS_PER_EVENT_CHECK = 5;\r\nexport const MAX_LOG_SIZE = 25;\r\n\r\n// Base Caps\r\nexport const BASE_RELIC_CAP = 100;\r\nexport const BASE_MONEY_CAP = 50;\r\nexport const BASE_KNOWLEDGE_CAP = 10;\r\n\r\n// Panel Keys\r\nexport const SETTINGS_PANEL_KEY = \"SETTINGS\";\r\nexport const GENERATORS_PANEL_KEY = \"GENERATORS\";\r\nexport const LAB_KEY = \"LAB\";\r\nexport const RITUAL_PANEL_KEY = \"RITUALS\";\r\n","import {COMMON_ENTRY_TYPE, DetailedEntry} from \"./journal\";\r\n\r\nexport class GameState {\r\n    resourceState: ResourceState = new ResourceState();\r\n    jobAssignments: JobAssignments = new JobAssignments();\r\n    journalState: JournalState = new JournalState();\r\n    saveTime: Date = new Date();\r\n    settings: SettingsState = new SettingsState();\r\n    achievements: Achievements = new Achievements();\r\n    researchState: ResearchState = new ResearchState();\r\n}\r\n\r\nexport class ResourceState {\r\n    relics: number = 0;\r\n    relicCap: number = 0;\r\n    relicRate: number = 0;\r\n    relicGenerator: number = 0;\r\n    sheds: number = 0;\r\n    students: number = 0;\r\n    knowledge: number = 0;\r\n    knowledgeRate: number = 0;\r\n    knowledgeCap: number = 0;\r\n    blood: number = 0;\r\n    bloodRate: number = 0;\r\n    money: number = 0;\r\n    moneyRate = 0;\r\n    moneyCap = 0;\r\n    banks = 0;\r\n    bleedingStones = 0;\r\n    fame: number = 0;\r\n    whispers: number = 0;\r\n}\r\n\r\nexport class JobAssignments {\r\n    gatherRelics: number = 0;\r\n    studyRelics: number = 0;\r\n    giftShop: number = 0;\r\n}\r\n\r\nexport class JournalState {\r\n    entries: DetailedEntry[] = [{\r\n        entry: \"The new dig site lays before me, I wonder what treasures lay yet unearthed?\",\r\n        entryType: COMMON_ENTRY_TYPE\r\n    }];\r\n}\r\n\r\nexport class SettingsState {\r\n    darkMode: boolean = true;\r\n}\r\n\r\nexport class Achievements {\r\n    labUnlocked: boolean = false;\r\n}\r\n\r\nexport class ResearchState {\r\n    banksOpen: boolean = false;\r\n    studentKnowledge: boolean = false;\r\n    profiteering: boolean = false;\r\n    betterShovels: boolean = false;\r\n    bloodWard: boolean = false;\r\n    mapTheGrounds: boolean = false;\r\n    tours: boolean = false;\r\n    ritualCircle: boolean = false;\r\n}\r\n\r\nexport function mergeStateWithDefault(gameState: GameState): GameState {\r\n    const newState = {...new GameState(), ...gameState};\r\n    newState.resourceState = {...newState.resourceState, ...gameState.resourceState};\r\n    newState.jobAssignments = {...newState.jobAssignments, ...gameState.jobAssignments};\r\n    newState.journalState = {...newState.journalState, ...gameState.journalState};\r\n    newState.saveTime = gameState.saveTime;\r\n    newState.settings = {...newState.settings, ...gameState.settings};\r\n    newState.achievements = {...newState.achievements, ...gameState.achievements};\r\n    newState.researchState = {...newState.researchState, ...gameState.researchState};\r\n\r\n    return newState;\r\n}\r\n","import {GameState, mergeStateWithDefault} from \"./game-state\";\r\nimport {addJournalEntry} from \"./journal\";\r\n\r\nexport function saveGameExists() {\r\n    return !!localStorage.getItem(\"RelicsSave\");\r\n}\r\n\r\nexport function loadSave() {\r\n    const string = localStorage.getItem(\"RelicsSave\");\r\n    return loadSaveFromString(string);\r\n}\r\n\r\nfunction loadSaveFromString(string: string | null) {\r\n    const save =  string ? JSON.parse(atob(string)) : null;\r\n    return mergeStateWithDefault(save);\r\n}\r\n\r\nexport function newSave(): GameState {\r\n    return new GameState();\r\n}\r\n\r\nexport function saveGame(gameState: GameState, manualSave: boolean = false) {\r\n    gameState.saveTime = new Date();\r\n    if(manualSave) addJournalEntry(gameState, \"Game Saved\");\r\n    localStorage.setItem(\"RelicsSave\", btoa(JSON.stringify(gameState)));\r\n}\r\n\r\n\r\nexport function importSave(): GameState | null {\r\n    const importText  = prompt(\"Import Save\", \"\");\r\n\r\n    if (importText == null || importText === \"\") {\r\n        return null;\r\n    } else {\r\n        // Try to parse\r\n        return loadSaveFromString(importText);\r\n    }}\r\n\r\nexport function exportSave(gameState: GameState): string {\r\n    saveGame(gameState);\r\n    return btoa(JSON.stringify(gameState));\r\n}\r\n","import {GameState } from \"../core/game-state\";\r\n\r\nexport class Transaction {\r\n    static isValidPurchase = (gameState: GameState, amount: number): boolean => false ;\r\n    static commitTransaction = (gameState: GameState, amount: number): GameState => {return gameState};\r\n    static updateClock: boolean = false;\r\n}\r\n\r\nexport class Research extends Transaction {\r\n    static isAvailable = (gameState: GameState): boolean => false;\r\n    static buildTooltip = (gameState: GameState): any => \"MISSING TOOLTIP\";\r\n    static title: string = \"MISSING TITLE\";\r\n    static className = \"\";\r\n    static id = \"\";\r\n}\r\n\r\nexport function safeResource(resource: any): number {\r\n    return (resource == undefined || resource == null) ? 0 : resource;\r\n}\r\n","import { Transaction } from \"../Transaction\";\r\nimport {GameState} from \"../../core/game-state\";\r\nimport React from \"react\";\r\n\r\nexport class StudentTransaction extends Transaction{\r\n    updateClock = false;\r\n\r\n    static commitTransaction(gameState: GameState, amount: number): GameState {\r\n        if(StudentTransaction.isValidPurchase(gameState, amount)) {\r\n            const currCost = StudentTransaction.getCost(gameState, amount);\r\n\r\n            gameState.resourceState.relics -= currCost;\r\n            gameState.resourceState.students += amount;\r\n        }\r\n        return gameState;\r\n    }\r\n\r\n    static isValidPurchase(gameState: GameState, amount: number): boolean {\r\n        const currCost = StudentTransaction.getCost(gameState, amount);\r\n\r\n        return gameState.resourceState.relics >= currCost;\r\n    }\r\n\r\n    static getCost(gameState: GameState, purchaseAmount: number) {\r\n        let sum = 0;\r\n        let theoreticalAmt = gameState.resourceState.students || 0;\r\n        for (let i = 0; i < purchaseAmount; i++) {\r\n            sum += 10 + theoreticalAmt * 5;\r\n            theoreticalAmt++;\r\n        }\r\n        return sum;\r\n    }\r\n\r\n    static buildTooltip(gameState: GameState): any {\r\n        return (\r\n            <div className=\"relics-tooltip\">\r\n                <div className=\"relics-tooltip__description\">\r\n                    Hire some students to dust off relics for you.\r\n                    They work for relics.\r\n                    { gameState.achievements.labUnlocked && (<div className={\"knowledge-text\"}>+5 Knowledge cap</div>)}\r\n                </div>\r\n                <div className=\"relics-tooltip__cost\">\r\n                    <div>Relics: {StudentTransaction.getCost(gameState, 1)}</div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","import {GameState} from \"../core/game-state\";\r\n\r\n// Gather\r\nexport function assignGatherers(amount: number, gameState: GameState){\r\n    if(countAvailableStudents(gameState) >= amount) {\r\n        gameState.jobAssignments.gatherRelics += amount;\r\n    }\r\n}\r\nexport function removeGatherers(amount: number, gameState: GameState){\r\n    gameState.jobAssignments.gatherRelics -= amount;\r\n    if(gameState.jobAssignments.gatherRelics < 0) gameState.jobAssignments.gatherRelics = 0;\r\n}\r\n\r\n// Study\r\nexport function assignStudyRelics(amount: number, gameState: GameState){\r\n    if(countAvailableStudents(gameState) >= amount) {\r\n        gameState.jobAssignments.studyRelics += amount;\r\n    }\r\n}\r\nexport function removeStudyRelics(amount: number, gameState: GameState){\r\n    gameState.jobAssignments.studyRelics -= amount;\r\n    if(gameState.jobAssignments.studyRelics < 0) gameState.jobAssignments.studyRelics = 0;\r\n}\r\n\r\n// Work the gift shop\r\nexport function assignGiftShop(amount: number, gameState: GameState){\r\n    if(countAvailableStudents(gameState) >= amount) {\r\n        gameState.jobAssignments.giftShop += amount;\r\n    }\r\n}\r\nexport function removeGiftShop(amount: number, gameState: GameState){\r\n    gameState.jobAssignments.giftShop -= amount;\r\n    if(gameState.jobAssignments.giftShop < 0) gameState.jobAssignments.studyRelics = 0;\r\n}\r\n\r\nexport function countAvailableStudents(gameState: GameState) {\r\n    const assignedStudents = (gameState.jobAssignments.gatherRelics || 0)\r\n        + (gameState.jobAssignments.studyRelics || 0)\r\n        + (gameState.jobAssignments.giftShop|| 0);\r\n    return gameState.resourceState.students - assignedStudents;\r\n}\r\n","import React from \"react\";\r\nimport ReactTooltip from \"react-tooltip\";\r\n\r\ntype RelicsButtonProps = {\r\n  onClick: any;\r\n  id?: string; // Must be provided for tooltip to work\r\n  disabled?: any;\r\n  tooltip?: any;\r\n  compact?: boolean;\r\n  className?: string;\r\n}\r\n\r\nexport class RelicsButton extends React.Component<RelicsButtonProps> {\r\n\r\n    render() {\r\n        const { tooltip, id, children, disabled, onClick, compact } = this.props;\r\n        let className = \"relics-button\";\r\n        if(disabled) className += \" relics-button--disabled\";\r\n        if(compact) className += \" relics-button--compact\";\r\n        if(this.props.className) className += \" \" + this.props.className;\r\n\r\n        const clickFunc = disabled ? () => {} : onClick;\r\n        const dataTipAttr = {};\r\n        if(tooltip)\r\n        {\r\n            // @ts-ignore\r\n            dataTipAttr['data-tip'] = '';\r\n            // @ts-ignore\r\n            dataTipAttr['data-for'] = id;\r\n        }\r\n        return (\r\n            <span { ...dataTipAttr} id={id} key={id} className={className} onClick={clickFunc}>\r\n                {children}\r\n                {tooltip &&\r\n                    <ReactTooltip id={id} key={id} place=\"bottom\" effect=\"solid\">\r\n                        {tooltip}\r\n                    </ReactTooltip>\r\n                }\r\n            </span>\r\n        )\r\n    }\r\n}\r\n","import React from \"react\";\r\nimport {RelicsButton} from \"./relicsButton\";\r\nimport ReactTooltip from \"react-tooltip\";\r\n\r\ntype AssignWorkerOptionProps = {\r\n    id?:string,\r\n    tooltip?: string,\r\n    assignWorkers: any,\r\n    removeWorkers: any,\r\n    currentlyAssigned: number,\r\n    availableWorkers: number,\r\n}\r\n\r\nexport class AssignWorkerOptions extends React.Component<AssignWorkerOptionProps>{\r\n    render() {\r\n        const {\r\n            id,\r\n            tooltip,\r\n            children,\r\n            assignWorkers,\r\n            removeWorkers,\r\n            currentlyAssigned,\r\n            availableWorkers,\r\n        } = this.props;\r\n\r\n        const dataTipAttr = {};\r\n        if(tooltip)\r\n        {\r\n            // @ts-ignore\r\n            dataTipAttr['data-tip'] = '';\r\n            // @ts-ignore\r\n            dataTipAttr['data-for'] = id;\r\n        }\r\n        return (\r\n            <span { ...dataTipAttr} id={id} >\r\n                {children}: {currentlyAssigned || 0}\r\n                <span>\r\n                    <RelicsButton\r\n                        compact={true}\r\n                        disabled={currentlyAssigned <= 0}\r\n                        onClick={() => removeWorkers(1)}\r\n                    >\r\n                        -\r\n                    </RelicsButton>\r\n                    <RelicsButton\r\n                        compact={true}\r\n                        disabled={availableWorkers <= 0}\r\n                        onClick={() => assignWorkers(1)}>\r\n                        +\r\n                    </RelicsButton>\r\n                    <RelicsButton\r\n                        compact={true}\r\n                        disabled={availableWorkers <= 0}\r\n                        onClick={() => assignWorkers(availableWorkers)}>\r\n                        <u>+</u>\r\n                    </RelicsButton>\r\n                </span>\r\n                {tooltip &&\r\n                    <ReactTooltip id={id} place=\"bottom\" effect=\"solid\">\r\n                        {tooltip}\r\n                    </ReactTooltip>\r\n                }\r\n            </span>\r\n        );\r\n    }\r\n}\r\n","import { Transaction } from \"../Transaction\";\r\nimport {GameState} from \"../../core/game-state\";\r\nimport React from \"react\";\r\n\r\nexport class ShedTransaction extends Transaction{\r\n    updateClock = false;\r\n\r\n    static commitTransaction(gameState: GameState, amount: number): GameState {\r\n        if(ShedTransaction.isValidPurchase(gameState, amount)) {\r\n            const currCost = ShedTransaction.getCost(gameState, amount);\r\n\r\n            gameState.resourceState.money -= currCost;\r\n            gameState.resourceState.sheds += amount;\r\n        }\r\n        return gameState;\r\n    }\r\n\r\n    static isValidPurchase(gameState: GameState, amount: number): boolean {\r\n        const currCost = ShedTransaction.getCost(gameState, amount);\r\n        return gameState.resourceState.money >= currCost;\r\n    }\r\n\r\n    static getCost(gameState: GameState, purchaseAmount: number) {\r\n        let sum = 0;\r\n        let theoreticalAmt = gameState.resourceState.sheds || 0;\r\n        for (let i = 0; i < purchaseAmount; i++) {\r\n            sum += 5 + theoreticalAmt * 15;\r\n            theoreticalAmt++;\r\n        }\r\n        return sum;\r\n    }\r\n\r\n    static buildTooltip(gameState: GameState): any {\r\n        return (\r\n            <div className=\"relics-tooltip\">\r\n                <div className=\"relics-tooltip__description\">\r\n                    It turns out we don't need to keep our relics in a pile under a tarp.\r\n                    <br/>+50 relic storage.\r\n                </div>\r\n                <div className=\"relics-tooltip__cost\">\r\n                    <div className={\"money-text\"}>Money: {ShedTransaction.getCost(gameState, 1)}</div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","import {safeResource, Transaction} from \"../Transaction\";\r\nimport {GameState} from \"../../core/game-state\";\r\nimport React from \"react\";\r\n\r\nexport class BankTransaction extends Transaction{\r\n    updateClock = false;\r\n\r\n    static commitTransaction(gameState: GameState, amount: number): GameState {\r\n        if(BankTransaction.isValidPurchase(gameState, amount)) {\r\n            const currCost = BankTransaction.getCost(gameState, amount);\r\n\r\n            gameState.resourceState.money -= currCost;\r\n            gameState.resourceState.banks = safeResource(gameState.resourceState.banks) + amount;\r\n        }\r\n        return gameState;\r\n    }\r\n\r\n    static isValidPurchase(gameState: GameState, amount: number): boolean {\r\n        const currCost = BankTransaction.getCost(gameState, amount);\r\n        return gameState.resourceState.money >= currCost;\r\n    }\r\n\r\n    static getCost(gameState: GameState, purchaseAmount: number) {\r\n        let sum = 0;\r\n        let theoreticalAmt = gameState.resourceState.banks || 0;\r\n        for (let i = 0; i < purchaseAmount; i++) {\r\n            sum += 20 + theoreticalAmt * 20;\r\n            theoreticalAmt++;\r\n        }\r\n        return sum;\r\n    }\r\n\r\n    static buildTooltip(gameState: GameState): any {\r\n        return (\r\n            <div className=\"relics-tooltip\">\r\n                <div className=\"relics-tooltip__description\">\r\n                    It takes money to store money.\r\n                    <br/>+50 money cap.\r\n                </div>\r\n                <div className=\"relics-tooltip__cost\">\r\n                    <div className={\"money-text\"}>Money: {BankTransaction.getCost(gameState, 1)}</div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","import * as React from \"react\";\r\nimport { GameState } from \"../core/game-state\";\r\nimport {StudentTransaction} from \"../economy/transactions/studentTransaction\";\r\nimport {\r\n    assignGatherers,\r\n    assignGiftShop,\r\n    countAvailableStudents,\r\n    removeGatherers,\r\n    removeGiftShop\r\n} from \"../economy/jobAssignments\";\r\nimport {RelicsButton} from \"../shared/relicsButton\";\r\nimport {AssignWorkerOptions} from \"../shared/AssignWorkerOptions\";\r\nimport {ShedTransaction} from \"../economy/transactions/shedTransaction\";\r\nimport {BankTransaction} from \"../economy/transactions/bankTransaction\";\r\n\r\ntype RelicProps = {\r\n    gameState: GameState,\r\n    onPurchase: any,\r\n    onAddCurrency: any\r\n}\r\n\r\nexport class RelicPanel extends React.Component<RelicProps> {\r\n\r\n    render() {\r\n        const { gameState, onAddCurrency, onPurchase } = this.props;\r\n        const availableStudents = countAvailableStudents(gameState);\r\n        const studentsHired = gameState.resourceState.students >= 1;\r\n\r\n        return (\r\n            <div className=\"panel--left-align\">\r\n                <div className=\"button-container\">\r\n                    <RelicsButton onClick={() => onAddCurrency(\"relics\", 1)}>Look for relics</RelicsButton>\r\n                </div>\r\n                {studentsHired &&\r\n                    <div className=\"panel__assignments-container\">\r\n                        <h2>Job Assignments</h2>\r\n                        <AssignWorkerOptions\r\n                            assignWorkers={(amount: number) => assignGatherers(amount, this.props.gameState)}\r\n                            removeWorkers={(amount:number) => removeGatherers(amount, this.props.gameState)}\r\n                            currentlyAssigned={gameState.jobAssignments.gatherRelics}\r\n                            availableWorkers={availableStudents}>\r\n                            Gather Relics\r\n                        </AssignWorkerOptions>\r\n\r\n                        {gameState.researchState.tours &&\r\n                            <div>\r\n                                <AssignWorkerOptions\r\n                                    assignWorkers={(amount: number) => assignGiftShop(amount, this.props.gameState)}\r\n                                    removeWorkers={(amount:number) => removeGiftShop(amount, this.props.gameState)}\r\n                                    currentlyAssigned={gameState.jobAssignments.giftShop}\r\n                                    availableWorkers={availableStudents}\r\n                                >\r\n                                    Gift Shop\r\n                                </AssignWorkerOptions>\r\n                            </div>\r\n                        }\r\n                    </div>\r\n                }\r\n                <br/>\r\n                <div>\r\n                    <div className=\"button-container\">\r\n                        <RelicsButton\r\n                                disabled={!StudentTransaction.isValidPurchase(gameState, 1)}\r\n                                onClick={() => onPurchase(1, StudentTransaction.commitTransaction)}\r\n                                id=\"hireStudent\"\r\n                                tooltip={StudentTransaction.buildTooltip(gameState)}\r\n                        >\r\n                            Hire a Student\r\n                        </RelicsButton>\r\n                    </div>\r\n                    {gameState.researchState.profiteering && <p>Buildings:</p> }\r\n                    {gameState.researchState.profiteering &&\r\n                        <RelicsButton\r\n                            disabled={!ShedTransaction.isValidPurchase(gameState, 1)}\r\n                            onClick={() => onPurchase(1, ShedTransaction.commitTransaction)}\r\n                            id=\"shed\"\r\n                            tooltip={ShedTransaction.buildTooltip(gameState)}\r\n                        >\r\n                            Storage Shed: {gameState.resourceState.sheds}\r\n                        </RelicsButton>\r\n                    }\r\n                    {gameState.researchState.banksOpen &&\r\n                        <RelicsButton\r\n                            disabled={!BankTransaction.isValidPurchase(gameState, 1)}\r\n                            onClick={() => onPurchase(1, BankTransaction.commitTransaction)}\r\n                            id=\"banks\"\r\n                            tooltip={BankTransaction.buildTooltip(gameState)}\r\n                        >\r\n                            Company Banks: {gameState.resourceState.banks}\r\n                        </RelicsButton>\r\n                    }\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","import React from \"react\";\r\n\r\nexport const themes = {\r\n    light: {\r\n        themeClass: 'app app--light',\r\n    },\r\n    dark: {\r\n        themeClass: 'app app--dark',\r\n    },\r\n};\r\n\r\nexport const ThemeContext = React.createContext({\r\n    theme: themes.dark, // default value\r\n    toggleTheme: () => {\r\n    },\r\n});","import {GameState, SettingsState} from \"../core/game-state\";\r\nimport {ThemeContext} from \"../layout/theme-context\";\r\nimport React from \"react\";\r\nimport {RelicsButton} from \"../shared/relicsButton\";\r\nimport {exportSave, importSave} from \"../core/saveService\";\r\n\r\ntype SettingsProps = {\r\n    gameState: GameState,\r\n    onSave: any,\r\n    onClearSave: any,\r\n    onImportSave: any\r\n}\r\n\r\ntype SaveDataState = {\r\n    saveString: string,\r\n    displayExport: boolean\r\n}\r\n\r\nexport class Settings extends React.Component<SettingsProps, SaveDataState> {\r\n    readonly state: SaveDataState;\r\n\r\n    constructor(props: SettingsProps) {\r\n        super(props)\r\n        this.state = {\r\n            saveString: \"\",\r\n            displayExport: false,\r\n        }\r\n    }\r\n\r\n    onToggleTheme(toggleTheme: any) {\r\n        const { gameState } = this.props;\r\n        gameState.settings.darkMode = !gameState.settings.darkMode;\r\n        toggleTheme();\r\n    }\r\n\r\n    tryImportSave() {\r\n        const save = importSave();\r\n        this.props.onImportSave(save);\r\n    }\r\n\r\n    onExport() {\r\n        this.setState({\r\n            displayExport: true,\r\n            saveString: exportSave(this.props.gameState)\r\n        });\r\n    }\r\n\r\n    render() {\r\n        const {onSave, onClearSave} = this.props;\r\n\r\n        return (\r\n            <div>\r\n                <div className={\"button-container\"}>\r\n                    <p>The game saves automatically every 30s.</p>\r\n                    <RelicsButton onClick={() => onSave()}>Save</RelicsButton>\r\n                    <RelicsButton onClick={() => onClearSave()}>Clear Save</RelicsButton>\r\n                    <br/>\r\n                </div>\r\n                <div className={\"button-container bottom-border\"}>\r\n                    <RelicsButton onClick={() => this.tryImportSave()}>Import</RelicsButton>\r\n                    <RelicsButton onClick={() => this.onExport()}>Export</RelicsButton>\r\n                    <br/><br/>\r\n                    {this.state.displayExport && (\r\n                        <div>\r\n                            Copy and save the text below.\r\n                            <div className=\"settings__export-text\"><textarea className=\"settings__export-text\">{this.state.saveString}</textarea></div>\r\n                        </div>\r\n                    )}\r\n                </div>\r\n                <div>\r\n                    <ThemeContext.Consumer>\r\n                        {({theme, toggleTheme}) => (\r\n                            <div className={\"button-container\"}>\r\n                                <RelicsButton onClick={() => this.onToggleTheme(toggleTheme)}>\r\n                                    Toggle Dark Mode\r\n                                </RelicsButton>\r\n                            </div>\r\n                        )}\r\n                    </ThemeContext.Consumer>\r\n                </div>\r\n                <p>Relics - A game by bearhanded.</p>\r\n                <p><a href=\"https://github.com/bearhanded/relics\">GitHub</a></p>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","import {GameState} from \"./game-state\";\r\nimport {addDetailedJournalEntry, addJournalEntry, BLOOD_ENTRY_TYPE} from \"./journal\";\r\nimport {countAvailableStudents, removeGatherers, removeGiftShop, removeStudyRelics} from \"../economy/jobAssignments\";\r\nimport {safeResource} from \"../economy/Transaction\";\r\n\r\nexport function randomEventsForDuration(gameState: GameState, amount: number) {\r\n    for (let i = 0; i < amount; i++) {\r\n        randomEvent(gameState);\r\n    }\r\n}\r\n\r\nexport function randomEvent(gameState: GameState) {\r\n    const diceRoll = roll1d100();\r\n    if(diceRoll >= 95) {\r\n        addJournalEntry(gameState, \"The wind blows across the dusty plain\");\r\n    }\r\n    if( 10 <= diceRoll && diceRoll <= 15) {\r\n        addJournalEntry(gameState, \"A stranger shuffles up and hands something to you: +100 Relics!\");\r\n        gameState.resourceState.relics += 100\r\n    }\r\n    if(diceRoll === 1 && gameState.resourceState.students > 2) {\r\n        // A dark event occurs, protect with blood\r\n        // TODO: Hungrier events\r\n        if(gameState.researchState.bloodWard && gameState.resourceState.blood >= 1) {\r\n            gameState.resourceState.blood = safeResource(gameState.resourceState.blood) - 1;\r\n            addDetailedJournalEntry(gameState, {\r\n                entry: \"The ward protects the student in exchange for a drop shed.\",\r\n                entryType: BLOOD_ENTRY_TYPE,\r\n            });\r\n        }\r\n        else  {\r\n            if (countAvailableStudents(gameState) <= 0) {\r\n                if (gameState.jobAssignments.gatherRelics >= 1) {\r\n                    removeGatherers(1, gameState);\r\n                } else if (gameState.jobAssignments.studyRelics >= 1) {\r\n                    removeStudyRelics(1, gameState);\r\n                } else if (gameState.jobAssignments.studyRelics >= 1) {\r\n                    removeGiftShop(1, gameState);\r\n                }\r\n            }\r\n            gameState.resourceState.blood = safeResource(gameState.resourceState.blood) + 1;\r\n            gameState.resourceState.students -= 1;\r\n\r\n            addDetailedJournalEntry(gameState, {\r\n                entry: \"A shout in the dark. You are short one student.\",\r\n                entryType: BLOOD_ENTRY_TYPE,\r\n            });\r\n        }\r\n    }\r\n}\r\n\r\nfunction roll1d100() {\r\n    return Math.floor(Math.random() * 100 + 1);\r\n}\r\n","import {saveGame} from \"./saveService\";\r\nimport {GameState} from \"./game-state\";\r\nimport {\r\n    TICK_SPEED,\r\n    SECONDS_PER_EVENT_CHECK,\r\n    BASE_RELIC_CAP,\r\n    BASE_MONEY_CAP,\r\n    BASE_KNOWLEDGE_CAP\r\n} from \"../config/constants\";\r\nimport {randomEventsForDuration} from \"./event-manager\";\r\nimport {safeResource} from \"../economy/Transaction\";\r\n\r\nexport class GameClock {\r\n    saveClockId: any;\r\n    resourceClockId: any;\r\n    gameState: GameState; // Not readonly, we're emitting the changes for the rest of the app\r\n    tickRatio: number; // Modified each pass of the clock so that we can deal with running in the background\r\n    emitTick: any;\r\n    maxTicks: number;\r\n    lastTickDate: Date;\r\n    randomEventTimer = 0;\r\n\r\n    constructor(gameState: GameState, onTick: any) {\r\n        this.saveClockId = setInterval(\r\n            () => saveGame(gameState),\r\n            30000\r\n        );\r\n        this.gameState = gameState;\r\n        this.updateState(gameState);\r\n        this.tickRatio = TICK_SPEED / 1000; // Default: 50ms / 1000ms, multiply by how many per second you want\r\n        this.maxTicks = (5 * 1000) / TICK_SPEED;\r\n        this.emitTick = onTick;\r\n        this.lastTickDate = new Date(gameState.saveTime); //Easy offline progress solution?\r\n    }\r\n\r\n    private calibrate() {\r\n        const tickTimeStamp = new Date();\r\n        const seconds = (tickTimeStamp.getTime() - this.lastTickDate.getTime()) / 1000;\r\n        this.lastTickDate = tickTimeStamp;\r\n        this.tickRatio = seconds;\r\n        this.randomEventTimer += seconds;\r\n    }\r\n\r\n    private manageRandomEvent(newState: GameState) {\r\n        if(this.randomEventTimer >= SECONDS_PER_EVENT_CHECK ) {\r\n            // every 5s, test for an event\r\n\r\n            randomEventsForDuration(newState, Math.floor(this.randomEventTimer / SECONDS_PER_EVENT_CHECK));\r\n            this.randomEventTimer = 0;\r\n        }\r\n    }\r\n\r\n    tick() {\r\n        this.calibrate();\r\n        const newState = {...this.gameState};\r\n\r\n        // Rates & Stats\r\n        let relicsPerSecond = 0;\r\n        let knowledgePerSecond = 0;\r\n        let moneyPerSecond = 0;\r\n        let bloodPerSecond = 0;\r\n\r\n        // Calculate rates and side effects\r\n        if(this.gameState.jobAssignments.gatherRelics) {\r\n            const relicsMultiplier = 1\r\n                + (this.gameState.researchState.betterShovels ? .5 : 0);\r\n            relicsPerSecond = this.gameState.jobAssignments.gatherRelics*.5*relicsMultiplier;\r\n        }\r\n        if(this.gameState.jobAssignments.studyRelics && this.gameState.resourceState.relics >= this.gameState.jobAssignments.gatherRelics*10*this.tickRatio) {\r\n            const relicConsumptionRate = this.gameState.jobAssignments.studyRelics*10;\r\n            relicsPerSecond -= relicConsumptionRate;\r\n            knowledgePerSecond = this.gameState.jobAssignments.studyRelics*.1;\r\n        }\r\n        if(this.gameState.researchState.profiteering) {\r\n            moneyPerSecond = .25;\r\n            if(this.gameState.jobAssignments.giftShop) {\r\n                const requiredRelicConsumption = this.gameState.jobAssignments.giftShop*2.5;\r\n                if(this.gameState.resourceState.relics >= requiredRelicConsumption) {\r\n                    moneyPerSecond += this.gameState.jobAssignments.giftShop * .125;\r\n                    relicsPerSecond -= requiredRelicConsumption;\r\n                }\r\n            }\r\n        }\r\n        bloodPerSecond = 0;\r\n        bloodPerSecond += safeResource(this.gameState.resourceState.bleedingStones)*.2;\r\n\r\n        // Apply rates to resources\r\n        newState.resourceState.money     += moneyPerSecond      *this.tickRatio;\r\n        newState.resourceState.relics    += relicsPerSecond     *this.tickRatio;\r\n        newState.resourceState.knowledge += knowledgePerSecond  *this.tickRatio;\r\n        newState.resourceState.blood     += bloodPerSecond      *this.tickRatio;\r\n\r\n        // Apply caps\r\n        const relicCap = BASE_RELIC_CAP + this.gameState.resourceState.sheds*50;\r\n        if(newState.resourceState.relics >= relicCap) newState.resourceState.relics = relicCap;\r\n        newState.resourceState.relicCap = relicCap;\r\n\r\n        let moneyCap = BASE_MONEY_CAP;\r\n        if(newState.researchState.banksOpen) moneyCap += 50;\r\n        if(newState.resourceState.banks > 0) moneyCap += newState.resourceState.banks * 50;\r\n        if(newState.resourceState.money >= moneyCap) newState.resourceState.money = moneyCap;\r\n        newState.resourceState.moneyCap = moneyCap;\r\n\r\n        let knowledgeCap = BASE_KNOWLEDGE_CAP + this.gameState.resourceState.students*5;\r\n        if(newState.resourceState.knowledge >= knowledgeCap) newState.resourceState.knowledge = knowledgeCap;\r\n        newState.resourceState.knowledgeCap = knowledgeCap;\r\n\r\n        // Aggregate stats\r\n        newState.resourceState.relicRate     = relicsPerSecond;\r\n        newState.resourceState.moneyRate     = moneyPerSecond;\r\n        newState.resourceState.knowledgeRate = knowledgePerSecond;\r\n        newState.resourceState.bloodRate     = bloodPerSecond;\r\n\r\n        // Kick off any events that have transpired\r\n        this.manageRandomEvent(newState);\r\n\r\n        // Save and output\r\n        this.gameState = newState;\r\n        this.emitTick(newState);\r\n    }\r\n\r\n    updateState(gameState: GameState) {\r\n        clearInterval(this.resourceClockId);\r\n        this.resourceClockId = setInterval(() => this.tick(), TICK_SPEED);\r\n    }\r\n\r\n    clearClock() {\r\n        clearInterval(this.resourceClockId);\r\n        clearInterval(this.saveClockId);\r\n    }\r\n\r\n\r\n}\r\n","import * as React from \"react\";\r\nimport {JournalState} from \"../core/game-state\";\r\nimport {RelicsButton} from \"../shared/relicsButton\";\r\nimport {ACHIEVEMENT_ENTRY_TYPE, BLOOD_ENTRY_TYPE, COMMON_ENTRY_TYPE, DetailedEntry} from \"../core/journal\";\r\n\r\ntype JournalProps = {\r\n    journalState: JournalState,\r\n    clearLog: any\r\n}\r\n\r\nexport class AdventureLog extends React.Component<JournalProps> {\r\n    getClassName(entry: DetailedEntry) {\r\n        let className = \"padded-text journal__entry\";\r\n        switch (entry.entryType) {\r\n            case ACHIEVEMENT_ENTRY_TYPE:\r\n                className += \" journal__entry--achievement\";\r\n                break;\r\n            case BLOOD_ENTRY_TYPE:\r\n                className += \" blood-text\";\r\n                break;\r\n            case COMMON_ENTRY_TYPE:\r\n            default:\r\n        }\r\n        return className;\r\n    }\r\n\r\n    render() {\r\n        const { journalState, clearLog } = this.props;\r\n        const entryList = journalState.entries.slice(0).reverse().map((entry) =>\r\n            <div className={this.getClassName(entry)}>\r\n                {entry.entry}\r\n            </div>\r\n        );\r\n        return (\r\n            <div className=\"panel--left-align journal-panel\">\r\n                <div className=\"button-container\">\r\n                    <RelicsButton onClick={() => clearLog()}>Clear Log</RelicsButton>\r\n                </div>\r\n                <div className=\"journal\">{entryList}</div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","import * as React from \"react\";\r\nimport { GameState } from \"../core/game-state\";\r\nimport {countAvailableStudents} from \"../economy/jobAssignments\";\r\nimport {formatRateNumber} from \"../shared/formatNumbers\";\r\n\r\ntype ResourceProps = {\r\n    gameState: GameState,\r\n}\r\n\r\ntype ResourcePanelEntryProps = {\r\n    rate?: number;\r\n    cap?: number;\r\n    className?: string;\r\n}\r\n\r\nexport class ResourcePanelEntry extends React.Component<ResourcePanelEntryProps> {\r\n    render() {\r\n        let rateText = \"\";\r\n        const renderRate = this.props.rate !== undefined && this.props.rate !== 0;\r\n        if(this.props.rate !== undefined) rateText = formatRateNumber(this.props.rate) + \"/s\"; // ts has a conniption without the IF\r\n        const renderCap = this.props.cap !== undefined && this.props.cap !== 0;\r\n\r\n        return (\r\n            <div className=\"resources__entry\">\r\n                <div className={this.props.className}>\r\n                    {this.props.children}\r\n                    {renderCap && (\r\n                        <span className=\"resources__rate\">/{this.props.cap}</span>\r\n                    )}\r\n                </div>\r\n                <div className=\"resources__rate\">{renderRate && rateText}</div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\nexport class ResourcePanel extends React.Component<ResourceProps> {\r\n    render() {\r\n        const { gameState } = this.props;\r\n\r\n        return (\r\n            <div>\r\n                <div className=\"panel--center-align resources__container\">\r\n                    {!!gameState.resourceState.relics &&\r\n                        <ResourcePanelEntry rate={gameState.resourceState.relicRate}\r\n                                            cap={gameState.resourceState.relicCap}>\r\n                            Relics: {gameState.resourceState.relics.toFixed()}\r\n                        </ResourcePanelEntry>}\r\n                    {gameState.researchState.profiteering &&\r\n                        <ResourcePanelEntry className=\"money-text\" rate={gameState.resourceState.moneyRate}\r\n                                            cap={gameState.resourceState.moneyCap}>\r\n                            Money: {gameState.resourceState.money.toFixed()}\r\n                        </ResourcePanelEntry>}\r\n                    {gameState.achievements.labUnlocked &&\r\n                        <ResourcePanelEntry className=\"knowledge-text\" rate={gameState.resourceState.knowledgeRate}\r\n                                            cap={gameState.resourceState.knowledgeCap}>\r\n                            Knowledge: {gameState.resourceState.knowledge.toFixed()}\r\n                        </ResourcePanelEntry>}\r\n                    {(!!gameState.resourceState.blood || gameState.researchState.bloodWard) &&\r\n                    <ResourcePanelEntry className=\"blood-text\" rate={gameState.resourceState.bloodRate}>\r\n                        Blood: {gameState.resourceState.blood.toFixed()}\r\n                    </ResourcePanelEntry>}\r\n                </div>\r\n                {!!gameState.resourceState.students &&\r\n                    <div className=\"panel--center-align resources__container\">\r\n                        <div>Students: {countAvailableStudents(gameState)}/{gameState.resourceState.students}</div>\r\n                    </div>\r\n                }\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\n","export function formatRateNumber(number: number): string {\r\n    if(number < 1 && number > -1) {\r\n        return number.toLocaleString('en-US', {\r\n            minimumFractionDigits: 1,\r\n            maximumFractionDigits: 3\r\n        })\r\n    }\r\n    return number.toLocaleString('en-US', {\r\n        maximumFractionDigits: 4\r\n    });\r\n}\r\n","import React from \"react\";\r\n\r\ntype NavButtonProps = {\r\n  onClick: any;\r\n  disabled?: any | undefined;\r\n  selected?: boolean | undefined;\r\n}\r\n\r\nexport class NavButton extends React.Component<NavButtonProps> {\r\n\r\n    render() {\r\n        let className = \"nav-button\";\r\n        if(this.props.disabled) className += \" nav-button--disabled\";\r\n        if(this.props.selected) className += \" nav-button--selected\";\r\n\r\n        const clickFunc = this.props.disabled ? () => {} : this.props.onClick;\r\n        return (\r\n            <span\r\n                className={className}\r\n                onClick={clickFunc}>\r\n                {this.props.children}\r\n            </span>\r\n        )\r\n    }\r\n}","import React from \"react\";\r\nimport {GENERATORS_PANEL_KEY, LAB_KEY, RITUAL_PANEL_KEY, SETTINGS_PANEL_KEY} from \"../config/constants\";\r\nimport {NavButton} from \"./navButton\";\r\nimport {GameState} from \"../core/game-state\";\r\n\r\ntype PanelSelectorProps = {\r\n    onChangePanel: any,\r\n    selected: string,\r\n    gameState: GameState\r\n}\r\nexport class PanelSelector extends React.Component<PanelSelectorProps>{\r\n    render() {\r\n        const {onChangePanel, selected, gameState} = this.props;\r\n        let name = \"Dig Site\";\r\n        return (\r\n            <div className={\"nav-panel\"}>\r\n                <NavButton selected={selected === GENERATORS_PANEL_KEY}\r\n                           onClick={() => onChangePanel(GENERATORS_PANEL_KEY)}>\r\n                    {name}\r\n                </NavButton>\r\n                {(gameState.resourceState.students >= 10 || gameState.achievements.labUnlocked) &&\r\n                    <NavButton selected={selected === LAB_KEY}\r\n                               onClick={() => onChangePanel(LAB_KEY)}>\r\n                        Research Lab\r\n                    </NavButton>\r\n                }\r\n                {(gameState.researchState.ritualCircle) &&\r\n                <NavButton selected={selected === RITUAL_PANEL_KEY}\r\n                           onClick={() => onChangePanel(RITUAL_PANEL_KEY)}>\r\n                    Ritual Chamber\r\n                </NavButton>\r\n                }\r\n\r\n                <NavButton selected={selected === SETTINGS_PANEL_KEY}\r\n                           onClick={() => onChangePanel(SETTINGS_PANEL_KEY)}>\r\n                    Settings\r\n                </NavButton>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","import {GameState} from \"../../core/game-state\";\r\nimport {Transaction} from \"../Transaction\";\r\nimport React from \"react\";\r\n\r\nexport class KnowledgeTransaction extends Transaction {\r\n    static updateClock = false;\r\n\r\n    static commitTransaction(gameState: GameState, amount: number): GameState {\r\n        if(KnowledgeTransaction.isValidPurchase(gameState, amount)) {\r\n            const currCost = KnowledgeTransaction.getCost(gameState, amount);\r\n\r\n            gameState.resourceState.relics -= currCost;\r\n            gameState.resourceState.knowledge += amount;\r\n        }\r\n        return gameState;\r\n    }\r\n\r\n    static isValidPurchase(gameState: GameState, amount: number): boolean {\r\n        const currCost = KnowledgeTransaction.getCost(gameState, amount);\r\n        return gameState.resourceState.relics >= currCost;\r\n    }\r\n\r\n    static getCost(gameState: GameState, purchaseAmount: number) {\r\n        return 100 * purchaseAmount;\r\n    }\r\n\r\n    static buildTooltip(gameState: GameState): any {\r\n        return (\r\n            <div className=\"relics-tooltip\">\r\n                <div className=\"relics-tooltip__description\">\r\n                    Peruse your collection, perhaps you can find something useful.\r\n                </div>\r\n                <div className=\"relics-tooltip__cost\">\r\n                    <div>Relics: 100</div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","import {Research} from \"../Transaction\";\r\nimport {GameState} from \"../../core/game-state\";\r\nimport {ACHIEVEMENT_ENTRY_TYPE, addDetailedJournalEntry} from \"../../core/journal\";\r\nimport React from \"react\";\r\n\r\nexport class BetterShovels extends Research {\r\n    static updateClock = false;\r\n\r\n    static commitTransaction(gameState: GameState, amount: number): GameState {\r\n        if(BetterShovels.isValidPurchase(gameState, amount)) {\r\n            gameState.resourceState.money -= 25;\r\n            gameState.researchState.betterShovels = true;\r\n            addDetailedJournalEntry(gameState, {\r\n                entry: \"+1 Shovel\",\r\n                entryType: ACHIEVEMENT_ENTRY_TYPE\r\n            });\r\n        }\r\n        return gameState;\r\n    }\r\n\r\n    static isValidPurchase(gameState: GameState, amount: number): boolean {\r\n        return gameState.resourceState.money >= 25;\r\n    }\r\n\r\n    static buildTooltip(gameState: GameState): any {\r\n        return (\r\n            <div className=\"relics-tooltip\">\r\n                <div className=\"relics-tooltip__description\">\r\n                    Buy the team their very first shovel. It's better than none.\r\n                    <br/>Student base gathering rate +.5 relics/s\r\n                </div>\r\n                <div className=\"relics-tooltip__cost\">\r\n                    <div className=\"money-text\">Money: 25</div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    static isAvailable(gameState: GameState): boolean {\r\n        return gameState.researchState.profiteering && !gameState.researchState.betterShovels;\r\n    }\r\n\r\n    static title = \"Better Shovels\";\r\n    static id = \"better-shovels\";\r\n    static className = \"money-button\";\r\n}\r\n","import React from \"react\";\r\nimport {Research} from \"../Transaction\";\r\nimport {GameState} from \"../../core/game-state\";\r\nimport {addDetailedJournalEntry, BLOOD_ENTRY_TYPE} from \"../../core/journal\";\r\n\r\nexport class BloodWard extends Research {\r\n    static updateClock = false;\r\n\r\n    static commitTransaction(gameState: GameState, amount: number): GameState {\r\n        if(BloodWard.isValidPurchase(gameState, amount)) {\r\n            gameState.resourceState.relics -= 100;\r\n            gameState.resourceState.blood -= 1;\r\n            gameState.resourceState.knowledge -= 20;\r\n\r\n            gameState.researchState.bloodWard = true;\r\n            addDetailedJournalEntry(gameState, {\r\n                entry: \"Following instructions on the ruins, you assemble a ward. That should protect this place.\",\r\n                entryType: BLOOD_ENTRY_TYPE\r\n            });\r\n        }\r\n        return gameState;\r\n    }\r\n\r\n    static isValidPurchase(gameState: GameState, amount: number): boolean {\r\n        return gameState.resourceState.blood >= 1 && gameState.resourceState.knowledge >= 20 && gameState.resourceState.relics >= 100;\r\n    }\r\n\r\n    static buildTooltip(gameState: GameState): any {\r\n        return (\r\n            <div className=\"relics-tooltip\">\r\n                <div className=\"relics-tooltip__description\">\r\n                    The excavated ruins are carved with a repeating pattern, and no one has disappeared in there yet.\r\n                </div>\r\n                <div className=\"relics-tooltip__cost\">\r\n                    <div>Relics: 100</div>\r\n                    <div className=\"knowledge-text\">Knowledge: 20</div>\r\n                    <div className=\"blood-text\">Blood: 1</div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    static isAvailable(gameState: GameState): boolean {\r\n        return gameState.researchState.profiteering && !gameState.researchState.bloodWard;\r\n    }\r\n\r\n    static title = \"Inscribe a ward\";\r\n    static id = \"blood-ward\";\r\n    static className = \"blood-button\";\r\n}","import {Research} from \"../Transaction\";\r\nimport {GameState} from \"../../core/game-state\";\r\nimport {ACHIEVEMENT_ENTRY_TYPE, addDetailedJournalEntry} from \"../../core/journal\";\r\nimport React from \"react\";\r\n\r\nexport class Profit extends Research {\r\n    static updateClock = false;\r\n\r\n    static commitTransaction(gameState: GameState, amount: number): GameState {\r\n        if(Profit.isValidPurchase(gameState, amount)) {\r\n            gameState.resourceState.knowledge -= 10;\r\n            gameState.researchState.profiteering = true;\r\n            addDetailedJournalEntry(gameState, {\r\n                entry: \"A patron finds your work interesting, and provides a slow but steady drip of funding.\",\r\n                entryType: ACHIEVEMENT_ENTRY_TYPE\r\n            });\r\n        }\r\n        return gameState;\r\n    }\r\n\r\n    static isValidPurchase(gameState: GameState, amount: number): boolean {\r\n        return gameState.resourceState.knowledge >= 10;\r\n    }\r\n\r\n    static buildTooltip(gameState: GameState): any {\r\n        return (\r\n            <div className=\"relics-tooltip\">\r\n                <div className=\"relics-tooltip__description\">\r\n                    With your student's help, you know enough now to fund this endeavor.\r\n                    A little embellishment never hurt...\r\n                </div>\r\n                <div className=\"relics-tooltip__cost\">\r\n                    <div className=\"knowledge-text\">Knowledge: 10</div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    static isAvailable(gameState: GameState): boolean {\r\n        return gameState.researchState.studentKnowledge && !gameState.researchState.profiteering;\r\n    }\r\n\r\n    static title = \"Procure Funding\";\r\n    static id = \"profiteering\";\r\n    static className = \"money-button\";\r\n}","import {Research} from \"../Transaction\";\r\nimport {GameState} from \"../../core/game-state\";\r\nimport React from \"react\";\r\n\r\nexport class StudentKnowledge extends Research {\r\n    static updateClock = false;\r\n\r\n    static commitTransaction(gameState: GameState, amount: number): GameState {\r\n        if(StudentKnowledge.isValidPurchase(gameState, amount)) {\r\n            gameState.resourceState.knowledge -= 5;\r\n            gameState.researchState.studentKnowledge = true;\r\n        }\r\n        return gameState;\r\n    }\r\n\r\n    static isValidPurchase(gameState: GameState, amount: number): boolean {\r\n        return gameState.resourceState.knowledge >= 5;\r\n    }\r\n\r\n    static buildTooltip(gameState: GameState): any {\r\n        return (\r\n            <div className=\"relics-tooltip\">\r\n                <div className=\"relics-tooltip__description\">\r\n                    I know enough about this to teach others to do the work, albeit at a reduced efficiency.\r\n                </div>\r\n                <div className=\"relics-tooltip__cost\">\r\n                    <div className=\"knowledge-text\">Knowledge: 5</div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n    static isAvailable(gameState: GameState): boolean {\r\n        return !gameState.researchState.studentKnowledge;\r\n    }\r\n\r\n    static title = \"Studious Students\";\r\n    static id = \"student-knowledge\";\r\n    static className = \"knowledge-button\";\r\n}\r\n","import {Research} from \"../Transaction\";\r\nimport {GameState} from \"../../core/game-state\";\r\nimport React from \"react\";\r\n\r\nexport class MapTheRuins extends Research {\r\n    static updateClock = false;\r\n\r\n    static commitTransaction(gameState: GameState, amount: number): GameState {\r\n        if(MapTheRuins.isValidPurchase(gameState, amount)) {\r\n            gameState.resourceState.knowledge -= 1;\r\n            gameState.researchState.mapTheGrounds = true;\r\n        }\r\n        return gameState;\r\n    }\r\n\r\n    static isValidPurchase(gameState: GameState, amount: number): boolean {\r\n        return gameState.resourceState.knowledge >= 1;\r\n    }\r\n\r\n    static buildTooltip(gameState: GameState): any {\r\n        return (\r\n            <div className=\"relics-tooltip\">\r\n                <div className=\"relics-tooltip__description\">\r\n                    These relics seem to be found near a few particular features.\r\n                    <br/>Increases manual base relic search rate by 1.\r\n                </div>\r\n                <div className=\"relics-tooltip__cost\">\r\n                    <div className=\"knowledge-text\">Knowledge: 1</div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n    static isAvailable(gameState: GameState): boolean {\r\n        return !gameState.researchState.mapTheGrounds;\r\n    }\r\n\r\n    static title = \"Map the Ruins\";\r\n    static id = \"map-ruins\";\r\n    static className = \"knowledge-button\";\r\n}\r\n","import {Research} from \"../Transaction\";\r\nimport {GameState} from \"../../core/game-state\";\r\nimport {ACHIEVEMENT_ENTRY_TYPE, addDetailedJournalEntry, COMMON_ENTRY_TYPE} from \"../../core/journal\";\r\nimport React from \"react\";\r\n\r\nexport class Tours extends Research {\r\n    static updateClock = false;\r\n\r\n    static commitTransaction(gameState: GameState, amount: number): GameState {\r\n        if(Tours.isValidPurchase(gameState, amount)) {\r\n            gameState.resourceState.knowledge -= 25;\r\n            gameState.researchState.tours = true;\r\n            addDetailedJournalEntry(gameState, {\r\n                entry: \"Wait, people will pay to see this place? \" +\r\n                    \"Your students begin offering tours and open a gift shop.\",\r\n                entryType: COMMON_ENTRY_TYPE\r\n            });\r\n        }\r\n        return gameState;\r\n    }\r\n\r\n    static isValidPurchase(gameState: GameState, amount: number): boolean {\r\n        return gameState.resourceState.knowledge >= 25;\r\n    }\r\n\r\n    static buildTooltip(gameState: GameState): any {\r\n        return (\r\n            <div className=\"relics-tooltip\">\r\n                <div className=\"relics-tooltip__description\">\r\n                    You form a committee of students to think very hard about how to make more money.\r\n                </div>\r\n                <div className=\"relics-tooltip__cost\">\r\n                    <div className=\"knowledge-text\">Knowledge: 25</div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    static isAvailable(gameState: GameState): boolean {\r\n        return gameState.researchState.profiteering && !gameState.researchState.tours;\r\n    }\r\n\r\n    static title = \"More funding\";\r\n    static id = \"tours\";\r\n    static className = \"money-button\";\r\n}\r\n","import {Research} from \"../Transaction\";\r\nimport {GameState} from \"../../core/game-state\";\r\nimport {ACHIEVEMENT_ENTRY_TYPE, addDetailedJournalEntry} from \"../../core/journal\";\r\nimport React from \"react\";\r\n\r\nexport class Banks extends Research {\r\n    static updateClock = false;\r\n\r\n    static commitTransaction(gameState: GameState, amount: number): GameState {\r\n        if(Banks.isValidPurchase(gameState, amount)) {\r\n            gameState.resourceState.knowledge -= 20;\r\n            gameState.resourceState.money -= 20;\r\n            gameState.researchState.banksOpen = true;\r\n        }\r\n        addDetailedJournalEntry(gameState, {\r\n            entry: \"+50 money cap\",\r\n            entryType: ACHIEVEMENT_ENTRY_TYPE\r\n        });\r\n        return gameState;\r\n    }\r\n\r\n    static isValidPurchase(gameState: GameState, amount: number): boolean {\r\n        return gameState.resourceState.knowledge >= 20\r\n            && gameState.resourceState.money >= 30;\r\n    }\r\n\r\n    static buildTooltip(gameState: GameState): any {\r\n        return (\r\n            <div className=\"relics-tooltip\">\r\n                <div className=\"relics-tooltip__description\">\r\n                    We have a load of money and no way to have more loads of money.\r\n                    <br/>Increase money cap +50 and unlock a way to do it more.\r\n                </div>\r\n                <div className=\"relics-tooltip__cost\">\r\n                    <div className=\"money-text\">Money: 30</div>\r\n                    <div className=\"knowledge-text\">Knowledge: 20</div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    static isAvailable(gameState: GameState): boolean {\r\n        return gameState.researchState.tours && !gameState.researchState.banksOpen;\r\n    }\r\n\r\n    static title = \"Bigger Wallets\";\r\n    static id = \"banks\";\r\n    static className = \"money-button\";\r\n}","import {Research} from \"../Transaction\";\r\nimport {GameState} from \"../../core/game-state\";\r\nimport {ACHIEVEMENT_ENTRY_TYPE, addDetailedJournalEntry} from \"../../core/journal\";\r\nimport React from \"react\";\r\n\r\nexport class RitualCircle extends Research {\r\n    static updateClock = false;\r\n\r\n    static commitTransaction(gameState: GameState, amount: number): GameState {\r\n        if(RitualCircle.isValidPurchase(gameState, amount)) {\r\n            gameState.resourceState.knowledge -= 50;\r\n            gameState.resourceState.relics -= 250;\r\n\r\n            gameState.researchState.ritualCircle = true;\r\n            addDetailedJournalEntry(gameState, {\r\n                entry: \"You paint a circle on the ground, interlaced with arcane script. What wonders will you create here?\",\r\n                entryType: ACHIEVEMENT_ENTRY_TYPE\r\n            });\r\n        }\r\n        return gameState;\r\n    }\r\n\r\n    static isValidPurchase(gameState: GameState, amount: number): boolean {\r\n        return gameState.resourceState.knowledge >= 50\r\n            && gameState.resourceState.relics >= 250;\r\n    }\r\n\r\n    static buildTooltip(gameState: GameState): any {\r\n        return (\r\n            <div className=\"relics-tooltip\">\r\n                <div className=\"relics-tooltip__description\">\r\n                    Set aside a location and prepare it for incantations. You must find a way to protect your work.\r\n                    <br/>Unlocks the Ritual Chamber.\r\n                </div>\r\n                <div className=\"relics-tooltip__cost\">\r\n                    <div className=\"knowledge-text\">Knowledge: 50</div>\r\n                    <div>Relics: 250</div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    static isAvailable(gameState: GameState): boolean {\r\n        return gameState.researchState.bloodWard && !gameState.researchState.ritualCircle;\r\n    }\r\n\r\n    static title = \"Ritual Chamber\";\r\n    static id = \"ritual-chamber\";\r\n    static className = \"knowledge-button\";\r\n}\r\n","import {GameState} from \"../core/game-state\";\r\nimport {Research} from \"./Transaction\";\r\nimport {BetterShovels} from \"./research/betterShovels\";\r\nimport {BloodWard} from \"./research/bloodWard\";\r\nimport {Profit} from \"./research/profit\";\r\nimport {StudentKnowledge} from \"./research/studentKnowledge\";\r\nimport {MapTheRuins} from \"./research/mapTheRuins\";\r\nimport {Tours} from \"./research/tours\";\r\nimport {Banks} from \"./research/banks\";\r\nimport {RitualCircle} from \"./research/ritualCircle\";\r\n\r\nexport const allResearches: typeof Research[] = [\r\n    BetterShovels,\r\n    BloodWard,\r\n    Profit,\r\n    StudentKnowledge,\r\n    MapTheRuins,\r\n    Tours,\r\n    Banks,\r\n    RitualCircle,\r\n];\r\n\r\nexport function getAvailableResearches(gameState: GameState): typeof Research[] {\r\n    return allResearches.filter((r) => r.isAvailable(gameState));\r\n}\r\n","import React from \"react\";\r\nimport {RelicsButton} from \"./relicsButton\";\r\nimport {Research} from \"../economy/Transaction\";\r\nimport {GameState} from \"../core/game-state\";\r\n\r\ntype ResearchButtonProps = {\r\n    research: typeof Research;\r\n    gameState: GameState;\r\n    onPurchase: any;\r\n}\r\n\r\nexport class ResearchButton extends React.Component<ResearchButtonProps>{\r\n    render() {\r\n        const {gameState, research, onPurchase} = this.props;\r\n        return (\r\n            <RelicsButton\r\n                disabled={!research.isValidPurchase(gameState, 1)}\r\n                onClick={() => onPurchase(1, research.commitTransaction)}\r\n                id={research.id}\r\n                key={research.id}\r\n                className={research.className}\r\n                tooltip={research.buildTooltip(gameState)}\r\n            >\r\n                {research.title}\r\n            </RelicsButton>\r\n        );\r\n    }\r\n}","import React from \"react\";\r\nimport {GameState} from \"../core/game-state\";\r\nimport {labFirstUnlock} from \"../core/achievements\";\r\nimport {RelicsButton} from \"../shared/relicsButton\";\r\nimport {KnowledgeTransaction} from \"../economy/transactions/KnowledgeTransaction\";\r\nimport {AssignWorkerOptions} from \"../shared/AssignWorkerOptions\";\r\nimport {\r\n    assignStudyRelics,\r\n    countAvailableStudents,\r\n    removeStudyRelics\r\n} from \"../economy/jobAssignments\";\r\nimport {getAvailableResearches} from \"../economy/researchManager\";\r\nimport {ResearchButton} from \"../shared/researchButton\";\r\nimport {Research} from \"../economy/Transaction\";\r\n\r\ntype LabProps = {\r\n    gameState: GameState;\r\n    onPurchase: any;\r\n}\r\n\r\nexport class ResearchLab extends React.Component<LabProps> {\r\n    componentDidMount(): void {\r\n        labFirstUnlock(this.props.gameState);\r\n    }\r\n\r\n    assignStudentsStudy = (amount: number) => assignStudyRelics(amount, this.props.gameState);\r\n    removeStudentsStudy = (amount: number) => removeStudyRelics(amount, this.props.gameState);\r\n\r\n    createResearchButton(research: typeof Research): any {\r\n        return (\r\n            <ResearchButton key={research.id} research={research} gameState={this.props.gameState} onPurchase={this.props.onPurchase}/>\r\n        );\r\n    }\r\n\r\n    render() {\r\n        const { gameState, onPurchase } = this.props;\r\n        const availableStudents = countAvailableStudents(gameState);\r\n        const availableResearch = getAvailableResearches(gameState).map((research) => this.createResearchButton(research));\r\n\r\n        return (\r\n            <div>\r\n                <div className=\"button-container\">\r\n                    <RelicsButton\r\n                        disabled={!KnowledgeTransaction.isValidPurchase(gameState, 1)}\r\n                        onClick={() => onPurchase(1, KnowledgeTransaction.commitTransaction)}\r\n                        id=\"studyRelics\"\r\n                        tooltip={KnowledgeTransaction.buildTooltip(gameState)}\r\n                    >\r\n                        Study Relics\r\n                    </RelicsButton>\r\n                </div>\r\n                {gameState.researchState.studentKnowledge &&\r\n                    <div>\r\n                        <AssignWorkerOptions\r\n                            id=\"studentsStudying\"\r\n                            assignWorkers={(amount: number) =>this.assignStudentsStudy(amount)}\r\n                            removeWorkers={(amount:number) => this.removeStudentsStudy(amount)}\r\n                            currentlyAssigned={gameState.jobAssignments.studyRelics}\r\n                            availableWorkers={availableStudents}\r\n                            tooltip={\"Produces .1 knowledge per 10 relics.\"}\r\n                        >\r\n                            Student Studying Relics\r\n                        </AssignWorkerOptions>\r\n                    </div>\r\n                }\r\n\r\n                <div>\r\n                    <p>Research</p>\r\n                    { availableResearch }\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","import {GameState} from \"./game-state\";\r\nimport {ACHIEVEMENT_ENTRY_TYPE, addDetailedJournalEntry} from \"./journal\";\r\n\r\nexport function labFirstUnlock(gameState: GameState) {\r\n    if(!gameState.achievements.labUnlocked) {\r\n        gameState.achievements.labUnlocked = true;\r\n        addDetailedJournalEntry(gameState, {\r\n            entry: \"With your new found stash of relics, you retreat to your personal laboratory!\",\r\n            entryType: ACHIEVEMENT_ENTRY_TYPE,\r\n        });\r\n    }\r\n}\r\n","import {safeResource, Transaction} from \"../Transaction\";\r\nimport {GameState} from \"../../core/game-state\";\r\nimport React from \"react\";\r\n\r\nexport class BleedingStonesTransaction extends Transaction{\r\n    updateClock = false;\r\n\r\n    static commitTransaction(gameState: GameState, amount: number): GameState {\r\n        if(BleedingStonesTransaction.isValidPurchase(gameState, amount)) {\r\n            const costs = BleedingStonesTransaction.getCost(gameState, amount);\r\n            gameState.resourceState.blood -= costs[0];\r\n            gameState.resourceState.relics -= costs[1];\r\n            gameState.resourceState.knowledge -= costs[2];\r\n\r\n            gameState.resourceState.bleedingStones = safeResource(gameState.resourceState.bleedingStones) + amount;\r\n        }\r\n        return gameState;\r\n    }\r\n\r\n    static isValidPurchase(gameState: GameState, amount: number): boolean {\r\n        const costs = BleedingStonesTransaction.getCost(gameState, amount);\r\n        return gameState.resourceState.blood >= costs[0]\r\n            && gameState.resourceState.relics >= costs[1]\r\n            && gameState.resourceState.knowledge >= costs[2];\r\n    }\r\n\r\n    static getCost(gameState: GameState, purchaseAmount: number) {\r\n        let bloodSum = 0;\r\n        let knowledgeSum = 0;\r\n        let relicSum = 0;\r\n\r\n        let theoreticalAmt = gameState.resourceState.bleedingStones || 0;\r\n        for (let i = 0; i < purchaseAmount; i++) {\r\n            bloodSum += 1 + theoreticalAmt * 5;\r\n            knowledgeSum += 5 + theoreticalAmt * 5;\r\n            relicSum += 50 + theoreticalAmt * 5;\r\n\r\n            theoreticalAmt++;\r\n        }\r\n        return [bloodSum, relicSum, knowledgeSum];\r\n    }\r\n\r\n    static buildTooltip(gameState: GameState): any {\r\n        const costs = BleedingStonesTransaction.getCost(gameState, 1);\r\n\r\n        return (\r\n            <div className=\"relics-tooltip\">\r\n                <div className=\"relics-tooltip__description\">\r\n                    Anoint a stone, and it will bleed like man.\r\n                    <br/>+.2 blood/s.\r\n                </div>\r\n                <div className=\"relics-tooltip__cost\">\r\n                    <div>Relics: {costs[1]}</div>\r\n                    <div className={\"blood-text\"}>Blood: {costs[0]}</div>\r\n                    <div className={\"knowledge-text\"}>Knowledge: {costs[2]}</div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","import * as React from \"react\";\r\nimport { GameState } from \"../core/game-state\";\r\nimport {RelicsButton} from \"../shared/relicsButton\";\r\nimport {BleedingStonesTransaction} from \"../economy/rituals/bleedingStones\";\r\n\r\ntype RitualProps = {\r\n    gameState: GameState,\r\n    onPurchase: any,\r\n}\r\n\r\nexport class RitualPanel extends React.Component<RitualProps> {\r\n\r\n    render() {\r\n        const {gameState, onPurchase} = this.props;\r\n        return (\r\n            <div className=\"panel--left-align\">\r\n                <div>\r\n                    <RelicsButton\r\n                        disabled={!BleedingStonesTransaction.isValidPurchase(gameState, 1)}\r\n                        onClick={() => onPurchase(1, BleedingStonesTransaction.commitTransaction)}\r\n                        id=\"bloodstone\"\r\n                        tooltip={BleedingStonesTransaction.buildTooltip(gameState)}\r\n                    >\r\n                        Bleeding Stone: {gameState.resourceState.bleedingStones}\r\n                    </RelicsButton>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","import * as React from \"react\";\r\nimport {loadSave, newSave, saveGame, saveGameExists} from \"./saveService\";\r\nimport {RelicPanel} from \"../panels/relicPanel\";\r\nimport {Settings} from \"../panels/settings\";\r\nimport {GameState} from \"./game-state\";\r\nimport {GameClock} from \"./game-clock\";\r\nimport {GENERATORS_PANEL_KEY, LAB_KEY, RITUAL_PANEL_KEY, SETTINGS_PANEL_KEY} from \"../config/constants\";\r\nimport {addJournalEntry, clearJournal} from \"./journal\";\r\nimport {AdventureLog} from \"../panels/adventureLog\";\r\nimport {ResourcePanel} from \"../panels/resourcePanel\";\r\nimport {PanelSelector} from \"../layout/panelSelector\";\r\nimport {ResearchLab} from \"../panels/lab\";\r\nimport {RitualPanel} from \"../panels/ritualPanel\";\r\n\r\ntype CoreProps = {}\r\ntype CoreState = {\r\n    gameState: GameState,\r\n    activePanel: string\r\n}\r\n\r\nexport class CorePanel extends React.Component<CoreProps, CoreState> {\r\n    clock: GameClock | undefined;\r\n    readonly state = {\r\n        gameState: saveGameExists() ? loadSave() : newSave(),\r\n        activePanel: GENERATORS_PANEL_KEY\r\n    };\r\n\r\n    componentDidMount(): void {\r\n        this.clock = new GameClock(this.state.gameState, (newState: GameState) => this.onTick(newState));\r\n        this.setState({activePanel: GENERATORS_PANEL_KEY});\r\n    }\r\n\r\n    onTick(newState: GameState) {\r\n        this.setState({gameState: newState});\r\n    }\r\n\r\n    addCurrency(currencyName: string, currencyAmount: number) {\r\n        const newState = {...this.state.gameState};\r\n        let relicRate = currencyAmount;\r\n        if(this.state.gameState.researchState.mapTheGrounds) relicRate += 1;\r\n        newState.resourceState.relics += relicRate;\r\n        if(newState.resourceState.relics > newState.resourceState.relicCap) newState.resourceState.relics = newState.resourceState.relicCap;\r\n        addJournalEntry(newState, \"You dust off some potsherds.\");\r\n        this.setState({gameState: newState})\r\n    }\r\n\r\n    makePurchase(purchaseAmount: number, transaction: any) {\r\n        let newState = {...this.state.gameState};\r\n        newState = transaction(newState, purchaseAmount);\r\n\r\n        this.setState({gameState: newState});\r\n        // if(purchaseType.updateClock) {\r\n        //     // @ts-ignore\r\n        //     this.clock.updateState(newState);\r\n        // }\r\n    }\r\n\r\n    clearLog() {\r\n        clearJournal(this.state.gameState)\r\n    }\r\n\r\n    changeActivePanel(panelKey: string) {\r\n        this.setState({activePanel: panelKey});\r\n    }\r\n\r\n    save() {\r\n        const newState = {...this.state.gameState};\r\n        this.setState({gameState: newState});\r\n        saveGame(newState, true);\r\n    }\r\n\r\n    clearSave() {\r\n        // eslint-disable-next-line no-restricted-globals\r\n        const response = confirm(\"Are you sure you want to clear your save?\");\r\n        if (!response) {\r\n            return;\r\n        }\r\n        // @ts-ignore\r\n        this.clock.clearClock();\r\n        const newState = {gameState: newSave()};\r\n        newState.gameState.saveTime = new Date();\r\n        this.setState(newState);\r\n        this.clock = new GameClock(newState.gameState, (newState: GameState) => this.onTick(newState));\r\n        saveGame(newState.gameState);\r\n    }\r\n\r\n    private importSave(save: GameState | null) {\r\n        if(save == null) return;\r\n        // @ts-ignore\r\n        this.clock.clearClock();\r\n        const newState = {gameState: save};\r\n        this.setState(newState);\r\n        this.clock = new GameClock(newState.gameState, (newState: GameState) => this.onTick(newState));\r\n        saveGame(save);\r\n    }\r\n\r\n    render() {\r\n        let activePanel;\r\n        switch (this.state.activePanel) {\r\n            case SETTINGS_PANEL_KEY:\r\n                activePanel = (\r\n                    <Settings\r\n                        gameState={this.state.gameState}\r\n                        onSave={() => this.save()}\r\n                        onClearSave={() => this.clearSave()}\r\n                        onImportSave={(save: GameState | null) => this.importSave(save)}\r\n                    />\r\n                );\r\n                break;\r\n            case LAB_KEY:\r\n                activePanel = (\r\n                    <ResearchLab\r\n                        gameState={this.state.gameState}\r\n                        onPurchase={(purchaseAmount: number, transaction: any) => this.makePurchase(purchaseAmount, transaction)}\r\n                    />\r\n                );\r\n                break;\r\n            case RITUAL_PANEL_KEY:\r\n                activePanel = (\r\n                    <RitualPanel\r\n                        gameState={this.state.gameState}\r\n                        onPurchase={(purchaseAmount: number, transaction: any) => this.makePurchase(purchaseAmount, transaction)}\r\n                    />\r\n                );\r\n                break;\r\n            case GENERATORS_PANEL_KEY:\r\n            default:\r\n                activePanel = (\r\n                    <RelicPanel\r\n                        gameState={this.state.gameState}\r\n                        onAddCurrency={(currencyName: string, currencyAmount: number) => this.addCurrency(currencyName, currencyAmount)}\r\n                        onPurchase={(purchaseAmount: number, transaction: any) => this.makePurchase(purchaseAmount, transaction)}\r\n                    />\r\n                );\r\n\r\n        }\r\n\r\n        return (\r\n            <div className=\"core-panel\">\r\n                <div className=\"core-panel__flex\">\r\n                    <div className=\"core-panel__left-column\">\r\n                        <AdventureLog clearLog={() => this.clearLog()} journalState={this.state.gameState.journalState}/>\r\n                    </div>\r\n                    <div className=\"core-panel__center-column\">\r\n                        <PanelSelector onChangePanel={(panelKey: string) => this.changeActivePanel(panelKey)}\r\n                            selected={this.state.activePanel}\r\n                            gameState={this.state.gameState}\r\n                        />\r\n                        {activePanel}\r\n                    </div>\r\n                    <div className=\"core-panel__right-column\">\r\n                        <ResourcePanel gameState={this.state.gameState}/>\r\n                    </div>\r\n                </div>\r\n\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","import React from 'react';\r\nimport './app.scss';\r\nimport {CorePanel} from \"./core/corePanel\";\r\nimport {ThemeContext, themes} from \"./layout/theme-context\";\r\nimport {loadSave, saveGameExists} from \"./core/saveService\";\r\n\r\ntype AppProps = {}\r\ntype AppState = {\r\n    theme: any,\r\n    toggleTheme: () => {}\r\n}\r\n\r\nclass App extends React.Component<AppProps, AppState> {\r\n    readonly state: AppState;\r\n    toggleTheme: any;\r\n\r\n    constructor(props: any) {\r\n        super(props);\r\n        const darkMode = saveGameExists() && loadSave().settings.darkMode;\r\n\r\n        this.toggleTheme = () => {\r\n            this.setState(state => ({\r\n                theme:\r\n                    state.theme === themes.dark\r\n                        ? themes.light\r\n                        : themes.dark,\r\n            }));\r\n        };\r\n\r\n        this.state = {\r\n            theme: darkMode ? themes.dark : themes.light,\r\n            toggleTheme: this.toggleTheme,\r\n        };\r\n\r\n    }\r\n\r\n    render() {\r\n        return (\r\n                <ThemeContext.Provider value={this.state}>\r\n                    <div className={this.state.theme.themeClass}>\r\n                        <CorePanel/>\r\n                    </div>\r\n                </ThemeContext.Provider>\r\n        );\r\n    }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resource-display are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(\r\n      process.env.PUBLIC_URL,\r\n      window.location.href\r\n    );\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './app';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}