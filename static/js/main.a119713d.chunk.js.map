{"version":3,"sources":["core/journal.ts","config/constants.ts","config/versioning.ts","core/game-state.ts","core/saveService.ts","economy/Transaction.ts","economy/transactions/studentTransaction.tsx","economy/jobAssignments.ts","shared/relicsButton.tsx","shared/AssignWorkerOptions.tsx","economy/transactions/shedTransaction.tsx","economy/transactions/bankTransaction.tsx","panels/relicPanel.tsx","layout/theme-context.ts","panels/settings.tsx","core/event-manager.ts","core/game-clock.ts","panels/adventureLog.tsx","panels/resourcePanel.tsx","shared/formatNumbers.ts","layout/navButton.tsx","layout/panelSelector.tsx","economy/transactions/KnowledgeTransaction.tsx","economy/research/betterShovels.tsx","economy/research/bloodWard.tsx","economy/research/profit.tsx","economy/research/studentKnowledge.tsx","economy/research/mapTheRuins.tsx","economy/research/tours.tsx","economy/research/banks.tsx","economy/research/ritualCircle.tsx","economy/research/searchAlgorithms.tsx","economy/research/bloodMeter.tsx","economy/researchManager.ts","shared/researchButton.tsx","panels/lab.tsx","core/achievements.ts","economy/rituals/bleedingStones.tsx","panels/ritualPanel.tsx","panels/patchNotes.tsx","core/corePanel.tsx","app.tsx","serviceWorker.ts","index.tsx"],"names":["addJournalEntry","gameState","entry","journalState","entries","push","entryType","length","shift","addDetailedJournalEntry","GameState","resourceState","ResourceState","jobAssignments","JobAssignments","JournalState","settings","SettingsState","achievements","Achievements","researchState","ResearchState","saveTime","Date","version","relics","relicCap","relicRate","relicGenerator","sheds","students","knowledge","knowledgeRate","knowledgeCap","blood","bloodRate","bloodLoss","bloodChance","money","moneyRate","moneyCap","banks","bleedingStones","fame","whispers","gatherRelics","studyRelics","giftShop","darkMode","labUnlocked","banksOpen","studentKnowledge","profiteering","betterShovels","bloodWard","bloodMeter","mapTheGrounds","tours","ritualCircle","searchAlgorithms","saveGameExists","localStorage","getItem","loadSave","loadSaveFromString","string","newState","mergeStateWithDefault","JSON","parse","atob","newSave","saveGame","manualSave","setItem","btoa","stringify","Transaction","isValidPurchase","amount","commitTransaction","updateClock","Research","safeResource","resource","undefined","isAvailable","buildTooltip","title","className","id","StudentTransaction","currCost","getCost","purchaseAmount","sum","theoreticalAmt","i","removeGatherers","assignStudyRelics","countAvailableStudents","removeStudyRelics","removeGiftShop","assignedStudents","RelicsButton","this","props","tooltip","children","disabled","onClick","compact","clickFunc","dataTipAttr","key","place","effect","React","Component","AssignWorkerOptions","assignWorkers","removeWorkers","currentlyAssigned","availableWorkers","ShedTransaction","BankTransaction","RelicPanel","onAddCurrency","onPurchase","availableStudents","studentsHired","assignGatherers","assignGiftShop","themes","light","themeClass","dark","ThemeContext","createContext","theme","toggleTheme","Settings","state","saveString","displayExport","save","importText","prompt","importSave","onImportSave","setState","onSave","onClearSave","tryImportSave","onExport","Consumer","onToggleTheme","href","onChangePanel","randomEvent","diceRoll","Math","floor","random","dreadEventChance","log10","max","journalEntry","toFixed","GameClock","onTick","saveClockId","resourceClockId","tickRatio","emitTick","maxTicks","lastTickDate","randomEventTimer","setInterval","updateState","TICK_SPEED","tickTimeStamp","seconds","getTime","randomEventsForDuration","calibrate","relicsPerSecond","knowledgePerSecond","moneyPerSecond","bloodPerSecond","relicsMultiplier","requiredRelicConsumption","manageRandomEvent","clearInterval","tick","AdventureLog","clearLog","entryList","slice","reverse","map","getClassName","ResourcePanelEntry","number","rateText","renderRate","rate","toLocaleString","minimumFractionDigits","maximumFractionDigits","renderCap","cap","ResourcePanel","NavButton","selected","PanelSelector","KnowledgeTransaction","BetterShovels","BloodWard","Profit","StudentKnowledge","MapTheRuins","Tours","Banks","RitualCircle","SearchAlgorithms","BloodMeter","allResearches","ResearchButton","research","ResearchLab","assignStudentsStudy","removeStudentsStudy","availableResearch","filter","r","getAvailableResearches","createResearchButton","BleedingStonesTransaction","costs","bloodSum","knowledgeSum","relicSum","RitualPanel","alertClass","PatchNotePanel","source","CorePanel","clock","activePanel","currencyName","currencyAmount","transaction","panelKey","confirm","clearClock","clearSave","changeActivePanel","makePurchase","addCurrency","App","Provider","value","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"+MAYO,SAASA,EAAgBC,EAAsBC,GAQlD,OAPAD,EAAUE,aAAaC,QAAQC,KAAK,CAChCH,MAAOA,EACPI,UAXyB,WAa1BL,EAAUE,aAAaC,QAAQG,QCdV,IDepBN,EAAUE,aAAaC,QAAQI,QAE5BP,EAGJ,SAASQ,EAAwBR,EAAsBC,GAK1D,OAJAD,EAAUE,aAAaC,QAAQC,KAAKH,GACjCD,EAAUE,aAAaC,QAAQG,QCtBV,IDuBpBN,EAAUE,aAAaC,QAAQI,QAE5BP,EE5BJ,ICGMS,EAAb,sCACIC,cAA+B,IAAIC,EADvC,KAEIC,eAAiC,IAAIC,EAFzC,KAGIX,aAA6B,IAAIY,EAHrC,KAIIC,SAA0B,IAAIC,EAJlC,KAKIC,aAA6B,IAAIC,EALrC,KAMIC,cAA+B,IAAIC,EANvC,KAOIC,SAAiB,IAAIC,KAPzB,KAQIC,QDX2B,SCclBZ,EAAb,sCACIa,OAAiB,EADrB,KAEIC,SAAmB,EAFvB,KAGIC,UAAoB,EAHxB,KAIIC,eAAyB,EAJ7B,KAKIC,MAAgB,EALpB,KAMIC,SAAmB,EANvB,KAOIC,UAAoB,EAPxB,KAQIC,cAAwB,EAR5B,KASIC,aAAuB,EAT3B,KAUIC,MAAgB,EAVpB,KAWIC,UAAoB,EAXxB,KAYIC,UAAoB,EAZxB,KAaIC,YAAsB,EAb1B,KAcIC,MAAgB,EAdpB,KAeIC,UAAY,EAfhB,KAgBIC,SAAW,EAhBf,KAiBIC,MAAQ,EAjBZ,KAkBIC,eAAiB,EAlBrB,KAmBIC,KAAe,EAnBnB,KAoBIC,SAAmB,GAGV9B,EAAb,sCACI+B,aAAuB,EAD3B,KAEIC,YAAsB,EAF1B,KAGIC,SAAmB,GAGVhC,EAAb,sCACIX,QAA2B,CAAC,CACxBF,MAAO,8EACPI,UH1CyB,YG8CpBW,EAAb,sCACI+B,UAAoB,GAGX7B,EAAb,sCACI8B,aAAuB,GAGd5B,EAAb,sCACI6B,WAAqB,EADzB,KAEIC,kBAA4B,EAFhC,KAGIC,cAAwB,EAH5B,KAIIC,eAAyB,EAJ7B,KAKIC,WAAqB,EALzB,KAMIC,YAAsB,EAN1B,KAOIC,eAAyB,EAP7B,KAQIC,OAAiB,EARrB,KASIC,cAAwB,EAT5B,KAUIC,kBAA4B,GChEzB,SAASC,IACZ,QAASC,aAAaC,QAAQ,cAG3B,SAASC,IAEZ,OAAOC,EADQH,aAAaC,QAAQ,eAIxC,SAASE,EAAmBC,GAExB,ODwDG,SAA+BhE,GAClC,IAAMiE,EAAQ,eAAO,IAAIxD,EAAX,GAA2BT,GASzC,OARAiE,EAASvD,cAAT,eAA6BuD,EAASvD,cAAtC,GAAwDV,EAAUU,eAClEuD,EAASrD,eAAT,eAA8BqD,EAASrD,eAAvC,GAA0DZ,EAAUY,gBACpEqD,EAAS/D,aAAT,eAA4B+D,EAAS/D,aAArC,GAAsDF,EAAUE,cAChE+D,EAAS5C,SAAWrB,EAAUqB,SAC9B4C,EAASlD,SAAT,eAAwBkD,EAASlD,SAAjC,GAA8Cf,EAAUe,UACxDkD,EAAShD,aAAT,eAA4BgD,EAAShD,aAArC,GAAsDjB,EAAUiB,cAChEgD,EAAS9C,cAAT,eAA6B8C,EAAS9C,cAAtC,GAAwDnB,EAAUmB,eAE3D8C,EClEAC,CADOF,EAASG,KAAKC,MAAMC,KAAKL,IAAW,MAI/C,SAASM,IACZ,OAAO,IAAI7D,EAGR,SAAS8D,EAASvE,GAAoD,IAA9BwE,EAA6B,wDACxExE,EAAUqB,SAAW,IAAIC,KACzBtB,EAAUuB,QFxBiB,QE0BxBiD,GAAYzE,EAAgBC,EAAW,cAC1C4D,aAAaa,QAAQ,aAAcC,KAAKP,KAAKQ,UAAU3E,KCzBpD,IAAM4E,EAAb,kCAAaA,EACFC,gBAAkB,SAAC7E,EAAsB8E,GAAvB,OAAmD,GADnEF,EAEFG,kBAAoB,SAAC/E,EAAsB8E,GAA+B,OAAO9E,GAF/E4E,EAGFI,aAAuB,EAG3B,IAAMC,EAAb,4HAA8BL,GAQvB,SAASM,EAAaC,GACzB,YAAoBC,GAAZD,GAAqC,MAAZA,EAAoB,EAAIA,EAThDF,EACFI,YAAc,SAACrF,GAAD,OAAmC,GAD/CiF,EAEFK,aAAe,SAACtF,GAAD,MAA+B,mBAF5CiF,EAGFM,MAAgB,gBAHdN,EAIFO,UAAY,GAJVP,EAKFQ,GAAK,GCTT,IAAMC,EAAb,4MACIV,aAAc,EADlB,qEAG6BhF,EAAsB8E,GAC3C,GAAGY,EAAmBb,gBAAgB7E,EAAW8E,GAAS,CACtD,IAAMa,EAAWD,EAAmBE,QAAQ5F,EAAW8E,GAEvD9E,EAAUU,cAAcc,QAAUmE,EAClC3F,EAAUU,cAAcmB,UAAYiD,EAExC,OAAO9E,IAVf,sCAa2BA,EAAsB8E,GACzC,IAAMa,EAAWD,EAAmBE,QAAQ5F,EAAW8E,GAEvD,OAAO9E,EAAUU,cAAcc,QAAUmE,IAhBjD,8BAmBmB3F,EAAsB6F,GAGjC,IAFA,IAAIC,EAAM,EACNC,EAAiB/F,EAAUU,cAAcmB,UAAY,EAChDmE,EAAI,EAAGA,EAAIH,EAAgBG,IAChCF,GAAO,GAAsB,EAAjBC,EACZA,IAEJ,OAAOD,IA1Bf,mCA6BwB9F,GAChB,OACI,yBAAKwF,UAAU,kBACX,yBAAKA,UAAU,+BAAf,uEAGMxF,EAAUiB,aAAa+B,aAAgB,yBAAKwC,UAAW,kBAAhB,qBAE7C,yBAAKA,UAAU,wBACX,wCAAcE,EAAmBE,QAAQ5F,EAAW,UAtCxE,GAAwC4E,GCIjC,SAASqB,EAAgBnB,EAAgB9E,GAC5CA,EAAUY,eAAegC,cAAgBkC,EACtC9E,EAAUY,eAAegC,aAAe,IAAG5C,EAAUY,eAAegC,aAAe,GAInF,SAASsD,EAAkBpB,EAAgB9E,GAC3CmG,EAAuBnG,IAAc8E,IACpC9E,EAAUY,eAAeiC,aAAeiC,GAGzC,SAASsB,EAAkBtB,EAAgB9E,GAC9CA,EAAUY,eAAeiC,aAAeiC,EACrC9E,EAAUY,eAAeiC,YAAc,IAAG7C,EAAUY,eAAeiC,YAAc,GASjF,SAASwD,EAAevB,EAAgB9E,GAC3CA,EAAUY,eAAekC,UAAYgC,EAClC9E,EAAUY,eAAekC,SAAW,IAAG9C,EAAUY,eAAeiC,YAAc,GAG9E,SAASsD,EAAuBnG,GACnC,IAAMsG,GAAoBtG,EAAUY,eAAegC,cAAgB,IAC5D5C,EAAUY,eAAeiC,aAAe,IACxC7C,EAAUY,eAAekC,UAAW,GAC3C,OAAO9C,EAAUU,cAAcmB,SAAWyE,E,YC3BjCC,EAAb,uKAEc,IAAD,EACyDC,KAAKC,MAA3DC,EADH,EACGA,QAASjB,EADZ,EACYA,GAAIkB,EADhB,EACgBA,SAAUC,EAD1B,EAC0BA,SAAUC,EADpC,EACoCA,QACrCrB,EAAY,gBACboB,IAAUpB,GAAa,4BAHrB,EAC6CsB,UAGtCtB,GAAa,2BACtBgB,KAAKC,MAAMjB,YAAWA,GAAa,IAAMgB,KAAKC,MAAMjB,WAEvD,IAAMuB,EAAYH,EAAW,aAAWC,EAClCG,EAAc,GAQpB,OAPGN,IAGCM,EAAY,YAAc,GAE1BA,EAAY,YAAcvB,GAG1B,0CAAWuB,EAAX,CAAwBvB,GAAIA,EAAIwB,IAAKxB,EAAID,UAAWA,EAAWqB,QAASE,IACnEJ,EACAD,GACG,kBAAC,IAAD,CAAcjB,GAAIA,EAAIwB,IAAKxB,EAAIyB,MAAM,SAASC,OAAO,SAChDT,QAvBzB,GAAkCU,IAAMC,WCC3BC,EAAb,uKACc,IAAD,EASDd,KAAKC,MAPLhB,EAFC,EAEDA,GACAiB,EAHC,EAGDA,QACAC,EAJC,EAIDA,SACAY,EALC,EAKDA,cACAC,EANC,EAMDA,cACAC,EAPC,EAODA,kBACAC,EARC,EAQDA,iBAGEV,EAAc,GAQpB,OAPGN,IAGCM,EAAY,YAAc,GAE1BA,EAAY,YAAcvB,GAG1B,0CAAWuB,EAAX,CAAwBvB,GAAIA,IACvBkB,EADL,KACiBc,GAAqB,EAClC,8BACI,kBAAC,EAAD,CACIX,SAAS,EACTF,SAAUa,GAAqB,EAC/BZ,QAAS,kBAAMW,EAAc,KAHjC,KAOA,kBAAC,EAAD,CACIV,SAAS,EACTF,SAAUc,GAAoB,EAC9Bb,QAAS,kBAAMU,EAAc,KAHjC,KAMA,kBAAC,EAAD,CACIT,SAAS,EACTF,SAAUc,GAAoB,EAC9Bb,QAAS,kBAAMU,EAAcG,KAC7B,kCAGPhB,GACG,kBAAC,IAAD,CAAcjB,GAAIA,EAAIyB,MAAM,SAASC,OAAO,SACvCT,QA9CzB,GAAyCU,IAAMC,WCTlCM,EAAb,4MACI3C,aAAc,EADlB,qEAG6BhF,EAAsB8E,GAC3C,GAAG6C,EAAgB9C,gBAAgB7E,EAAW8E,GAAS,CACnD,IAAMa,EAAWgC,EAAgB/B,QAAQ5F,EAAW8E,GAEpD9E,EAAUU,cAAc2B,OAASsD,EACjC3F,EAAUU,cAAckB,OAASkD,EAErC,OAAO9E,IAVf,sCAa2BA,EAAsB8E,GACzC,IAAMa,EAAWgC,EAAgB/B,QAAQ5F,EAAW8E,GACpD,OAAO9E,EAAUU,cAAc2B,OAASsD,IAfhD,8BAkBmB3F,EAAsB6F,GAGjC,IAFA,IAAIC,EAAM,EACNC,EAAiB/F,EAAUU,cAAckB,OAAS,EAC7CoE,EAAI,EAAGA,EAAIH,EAAgBG,IAChCF,GAAO,EAAqB,GAAjBC,EACXA,IAEJ,OAAOD,IAzBf,mCA4BwB9F,GAChB,OACI,yBAAKwF,UAAU,kBACX,yBAAKA,UAAU,+BAAf,wEAEI,6BAFJ,sBAIA,yBAAKA,UAAU,wBACX,yBAAKA,UAAW,cAAhB,UAAsCmC,EAAgB/B,QAAQ5F,EAAW,UApC7F,GAAqC4E,GCAxBgD,EAAb,4MACI5C,aAAc,EADlB,qEAG6BhF,EAAsB8E,GAC3C,GAAG8C,EAAgB/C,gBAAgB7E,EAAW8E,GAAS,CACnD,IAAMa,EAAWiC,EAAgBhC,QAAQ5F,EAAW8E,GAEpD9E,EAAUU,cAAc2B,OAASsD,EACjC3F,EAAUU,cAAc8B,MAAQ0C,EAAalF,EAAUU,cAAc8B,OAASsC,EAElF,OAAO9E,IAVf,sCAa2BA,EAAsB8E,GACzC,IAAMa,EAAWiC,EAAgBhC,QAAQ5F,EAAW8E,GACpD,OAAO9E,EAAUU,cAAc2B,OAASsD,IAfhD,8BAkBmB3F,EAAsB6F,GAGjC,IAFA,IAAIC,EAAM,EACNC,EAAiB/F,EAAUU,cAAc8B,OAAS,EAC7CwD,EAAI,EAAGA,EAAIH,EAAgBG,IAChCF,GAAO,GAAsB,GAAjBC,EACZA,IAEJ,OAAOD,IAzBf,mCA4BwB9F,GAChB,OACI,yBAAKwF,UAAU,kBACX,yBAAKA,UAAU,+BAAf,iCAEI,6BAFJ,kBAIA,yBAAKA,UAAU,wBACX,yBAAKA,UAAW,cAAhB,UAAsCoC,EAAgBhC,QAAQ5F,EAAW,UApC7F,GAAqC4E,GCiBxBiD,EAAb,uKAEc,IAAD,SAC4CrB,KAAKC,MAA9CzG,EADH,EACGA,UAAW8H,EADd,EACcA,cAAeC,EAD7B,EAC6BA,WAC5BC,EAAoB7B,EAAuBnG,GAC3CiI,EAAgBjI,EAAUU,cAAcmB,UAAY,EAE1D,OACI,uBAAK2D,UAAU,qBACX,uBAAKA,UAAU,oBACX,gBAAC,EAAD,CAAcqB,QAAS,kBAAMiB,EAAc,SAAU,KAArD,oBAEHG,GACG,uBAAKzC,UAAU,gCACX,6CACA,gBAAC,EAAD,CACI+B,cAAe,SAACzC,GAAD,OLlCpC,SAAyBA,EAAgB9E,GACzCmG,EAAuBnG,IAAc8E,IACpC9E,EAAUY,eAAegC,cAAgBkC,GKgCcoD,CAAgBpD,EAAQ,EAAK2B,MAAMzG,YACtEwH,cAAe,SAAC1C,GAAD,OAAmBmB,EAAgBnB,EAAQ,EAAK2B,MAAMzG,YACrEyH,kBAAmBzH,EAAUY,eAAegC,aAC5C8E,iBAAkBM,GAJtB,iBAQChI,EAAUmB,cAAcqC,OACrB,2BACI,gBAAC,EAAD,CACI+D,cAAe,SAACzC,GAAD,OLtB5C,SAAwBA,EAAgB9E,GACxCmG,EAAuBnG,IAAc8E,IACpC9E,EAAUY,eAAekC,UAAYgC,GKoB0BqD,CAAerD,EAAQ,EAAK2B,MAAMzG,YACrEwH,cAAe,SAAC1C,GAAD,OAAmBuB,EAAevB,EAAQ,EAAK2B,MAAMzG,YACpEyH,kBAAmBzH,EAAUY,eAAekC,SAC5C4E,iBAAkBM,GAJtB,eAYhB,2BACA,2BACI,uBAAKxC,UAAU,oBACX,gBAAC,EAAD,CACQoB,UAAWlB,EAAmBb,gBAAgB7E,EAAW,GACzD6G,QAAS,kBAAMkB,EAAW,EAAGrC,EAAmBX,oBAChDU,GAAG,cACHiB,QAAShB,EAAmBJ,aAAatF,IAJjD,mBASHA,EAAUmB,cAAcgC,cAAgB,uCACxCnD,EAAUmB,cAAcgC,cACrB,gBAAC,EAAD,CACIyD,UAAWe,EAAgB9C,gBAAgB7E,EAAW,GACtD6G,QAAS,kBAAMkB,EAAW,EAAGJ,EAAgB5C,oBAC7CU,GAAG,OACHiB,QAASiB,EAAgBrC,aAAatF,IAJ1C,iBAMmBA,EAAUU,cAAckB,OAG9C5B,EAAUmB,cAAc8B,WACrB,gBAAC,EAAD,CACI2D,UAAWgB,EAAgB/C,gBAAgB7E,EAAW,GACtD6G,QAAS,kBAAMkB,EAAW,EAAGH,EAAgB7C,oBAC7CU,GAAG,QACHiB,QAASkB,EAAgBtC,aAAatF,IAJ1C,kBAMoBA,EAAUU,cAAc8B,aAnEpE,GAAgC4E,aCnBnBgB,EAAS,CAClBC,MAAO,CACHC,WAAY,kBAEhBC,KAAM,CACFD,WAAY,kBAIPE,EAAepB,IAAMqB,cAAc,CAC5CC,MAAON,EAAOG,KACdI,YAAa,eCOJC,EAAb,kDAGI,WAAYnC,GAAuB,IAAD,8BAC9B,cAAMA,IAHDoC,WAEyB,EAE9B,EAAKA,MAAQ,CACTC,WAAY,GACZC,eAAe,GAJW,EAHtC,0DAWkBJ,GAAmB,IACrB3I,EAAcwG,KAAKC,MAAnBzG,UACRA,EAAUe,SAASgC,UAAY/C,EAAUe,SAASgC,SAClD4F,MAdR,sCAkBQ,IAAMK,EVPP,WACH,IAAMC,EAAcC,OAAO,cAAe,IAE1C,OAAkB,MAAdD,GAAqC,KAAfA,EACf,KAGAlF,EAAmBkF,GUAbE,GACb3C,KAAKC,MAAM2C,aAAaJ,KAnBhC,iCVqBO,IAAoBhJ,EUEnBwG,KAAK6C,SAAS,CACVN,eAAe,EACfD,YVJe9I,EUIQwG,KAAKC,MAAMzG,UVH1CA,EAAUuB,QF1CiB,QE2C3BgD,EAASvE,GACF0E,KAAKP,KAAKQ,UAAU3E,SUxB/B,+BA6Bc,IAAD,SACyBwG,KAAKC,MAA5B6C,EADF,EACEA,OAAQC,EADV,EACUA,YAEf,OACI,6BACI,yBAAK/D,UAAW,oBACZ,sEACA,kBAAC,EAAD,CAAcqB,QAAS,kBAAMyC,MAA7B,QACA,kBAAC,EAAD,CAAczC,QAAS,kBAAM0C,MAA7B,cACA,8BAEJ,yBAAK/D,UAAW,kCACZ,kBAAC,EAAD,CAAcqB,QAAS,kBAAM,EAAK2C,kBAAlC,UACA,kBAAC,EAAD,CAAc3C,QAAS,kBAAM,EAAK4C,aAAlC,UACA,6BAAK,6BACJjD,KAAKqC,MAAME,eACR,6DAEI,yBAAKvD,UAAU,yBAAwB,8BAAUA,UAAU,yBAAyBgB,KAAKqC,MAAMC,eAI3G,6BACI,kBAACN,EAAakB,SAAd,MACK,cAAEhB,MAAF,IAASC,EAAT,EAASA,YAAT,OACG,yBAAKnD,UAAW,oBACZ,kBAAC,EAAD,CAAcqB,QAAS,kBAAM,EAAK8C,cAAchB,KAAhD,yBAOhB,6DACA,2BAAG,uBAAGiB,KAAK,wCAAR,WACH,2BAAG,kBAAC,EAAD,CAAc/C,QAAS,kBAAM,EAAKJ,MAAMoD,cbrE5B,iBaqEZ,qBAhEnB,GAA8BzC,IAAMC,WCR7B,SAASyC,EAAY9J,GACxB,IAAM+J,EAoDCC,KAAKC,MAAsB,IAAhBD,KAAKE,SAAiB,GAnDrCH,GAAY,IACXhK,EAAgBC,EAAW,yCAE3B,GAAK+J,GAAYA,GAAY,KAC7BhK,EAAgBC,EAAW,mEAC3BA,EAAUU,cAAcc,QAAU,KAItC,IAAI2I,EAAmBH,KAAKI,MAAMpK,EAAUU,cAAcuB,OACtDE,EAA0C,GAA9BnC,EAAUU,cAAcuB,MAOxC,GANAE,EAAY6H,KAAKK,IAAIlI,EAAW,GAC7BgI,EAAmB,KAAIA,EAAmB,IAC1CA,EAAmB,IAAGA,EAAmB,GAC5CnK,EAAUU,cAAcyB,UAAYA,EACpCnC,EAAUU,cAAc0B,YAAc+H,EAEnCJ,GAAYI,GAAoBnK,EAAUU,cAAcmB,SAAW,EAGlE,GAAG7B,EAAUmB,cAAckC,WAAarD,EAAUU,cAAcuB,OAASE,EAAW,CAChF,IAAMmI,GAAiBH,GAAoB,EAAM,sDAAuD,IAAnF,sDACgChI,EAAUoI,UAD1C,WAErBvK,EAAUU,cAAcuB,MAAQiD,EAAalF,EAAUU,cAAcuB,OAASE,EAC9E3B,EAAwBR,EAAW,CAC/BC,MAAOqK,EACPjK,UfnCgB,eeuChB8F,EAAuBnG,IAAc,IACjCA,EAAUY,eAAegC,cAAgB,EACzCqD,EAAgB,EAAGjG,GACZA,EAAUY,eAAeiC,aAAe,EAC/CuD,EAAkB,EAAGpG,GACdA,EAAUY,eAAeiC,aAAe,GAC/CwD,EAAe,EAAGrG,IAG1BA,EAAUU,cAAcuB,MAAQiD,EAAalF,EAAUU,cAAcuB,OAAS,EAC9EjC,EAAUU,cAAcmB,UAAY,EAEpCrB,EAAwBR,EAAW,CAC/BC,MAAO,kDACPI,UfrDgB,UgBOzB,IAAMmK,EAAb,WAUI,WAAYxK,EAAsByK,GAAc,yBAThDC,iBAS+C,OAR/CC,qBAQ+C,OAP/C3K,eAO+C,OAN/C4K,eAM+C,OAL/CC,cAK+C,OAJ/CC,cAI+C,OAH/CC,kBAG+C,OAF/CC,iBAAmB,EAGfxE,KAAKkE,YAAcO,aACf,kBAAM1G,EAASvE,KACf,KAEJwG,KAAKxG,UAAYA,EACjBwG,KAAK0E,YAAYlL,GACjBwG,KAAKoE,UAAYO,IACjB3E,KAAKsE,SAAY,IACjBtE,KAAKqE,SAAWJ,EAChBjE,KAAKuE,aAAe,IAAIzJ,KAAKtB,EAAUqB,UApB/C,wDAwBQ,IAAM+J,EAAgB,IAAI9J,KACpB+J,GAAWD,EAAcE,UAAY9E,KAAKuE,aAAaO,WAAa,IAC1E9E,KAAKuE,aAAeK,EACpB5E,KAAKoE,UAAYS,EACjB7E,KAAKwE,kBAAoBK,IA5BjC,wCA+B8BpH,GACnBuC,KAAKwE,kBf1CuB,KcIhC,SAAiChL,EAAsB8E,GAC1D,IAAK,IAAIkB,EAAI,EAAGA,EAAIlB,EAAQkB,IACxB8D,EAAY9J,GCuCRuL,CAAwBtH,EAAU+F,KAAKC,MAAMzD,KAAKwE,iBf7CvB,Ie8C3BxE,KAAKwE,iBAAmB,KApCpC,6BAyCQxE,KAAKgF,YACL,IAAMvH,EAAQ,eAAOuC,KAAKxG,WAGtByL,EAAkB,EAClBC,EAAqB,EACrBC,EAAiB,EACjBC,EAAiB,EAGrB,GAAGpF,KAAKxG,UAAUY,eAAegC,aAAc,CAC3C,IAAMiJ,EAAmB,GAClBrF,KAAKxG,UAAUmB,cAAciC,cAAgB,GAAK,IAClDoD,KAAKxG,UAAUmB,cAAcuC,iBAAmB,GAAK,GAC5D+H,EAA6D,GAA3CjF,KAAKxG,UAAUY,eAAegC,aAAgBiJ,EAEjErF,KAAKxG,UAAUY,eAAeiC,aAAe2D,KAAKxG,UAAUU,cAAcc,QAAqD,GAA3CgF,KAAKxG,UAAUY,eAAegC,aAAgB4D,KAAKoE,YAEtIa,GADuE,GAA1CjF,KAAKxG,UAAUY,eAAeiC,YAE3D6I,EAA+D,GAA1ClF,KAAKxG,UAAUY,eAAeiC,aAEvD,GAAG2D,KAAKxG,UAAUmB,cAAcgC,eAC5BwI,EAAiB,IACdnF,KAAKxG,UAAUY,eAAekC,UAAU,CACvC,IAAMgJ,EAAkE,IAAvCtF,KAAKxG,UAAUY,eAAekC,SAC5D0D,KAAKxG,UAAUU,cAAcc,QAAUsK,IACtCH,GAA2D,KAAzCnF,KAAKxG,UAAUY,eAAekC,SAChD2I,GAAmBK,GAI/BF,EAAiB,EACjBA,GAA4E,GAA1D1G,EAAasB,KAAKxG,UAAUU,cAAc+B,gBAG5DwB,EAASvD,cAAc2B,OAAasJ,EAAqBnF,KAAKoE,UAC9D3G,EAASvD,cAAcc,QAAaiK,EAAqBjF,KAAKoE,UAC9D3G,EAASvD,cAAcoB,WAAa4J,EAAqBlF,KAAKoE,UAC9D3G,EAASvD,cAAcuB,OAAa2J,EAAqBpF,KAAKoE,UAG9D,IAAMnJ,EfxFgB,IewF+C,GAAnC+E,KAAKxG,UAAUU,cAAckB,MAC5DqC,EAASvD,cAAcc,QAAUC,IAAUwC,EAASvD,cAAcc,OAASC,GAC9EwC,EAASvD,cAAce,SAAWA,EAElC,IAAIc,Ef3FkB,Ge4FnB0B,EAAS9C,cAAc8B,YAAWV,GAAY,IAC9C0B,EAASvD,cAAc8B,MAAQ,IAAGD,GAA2C,GAA/B0B,EAASvD,cAAc8B,OACrEyB,EAASvD,cAAc2B,OAASE,IAAU0B,EAASvD,cAAc2B,MAAQE,GAC5E0B,EAASvD,cAAc6B,SAAWA,EAElC,IAAIP,EfhGsB,GegGoD,EAAtCwE,KAAKxG,UAAUU,cAAcmB,SAClEoC,EAASvD,cAAcoB,WAAaE,IAAciC,EAASvD,cAAcoB,UAAYE,GACxFiC,EAASvD,cAAcsB,aAAeA,EAGtCiC,EAASvD,cAAcgB,UAAgB+J,EACvCxH,EAASvD,cAAc4B,UAAgBqJ,EACvC1H,EAASvD,cAAcqB,cAAgB2J,EACvCzH,EAASvD,cAAcwB,UAAgB0J,EAGvCpF,KAAKuF,kBAAkB9H,GAGvBuC,KAAKxG,UAAYiE,EACjBuC,KAAKqE,SAAS5G,KA3GtB,kCA8GgBjE,GAAuB,IAAD,OAC9BgM,cAAcxF,KAAKmE,iBACnBnE,KAAKmE,gBAAkBM,aAAY,kBAAM,EAAKgB,Sf3H5B,MeW1B,mCAoHQD,cAAcxF,KAAKmE,iBACnBqB,cAAcxF,KAAKkE,iBArH3B,KCFawB,EAAb,2KACiBjM,GACT,IAAIuF,EAAY,6BAChB,OAAQvF,EAAMI,WACV,IjBX0B,ciBYtBmF,GAAa,+BACb,MACJ,IjBZoB,QiBahBA,GAAa,cAKrB,OAAOA,IAbf,+BAgBc,IAAD,SAC8BgB,KAAKC,MAAhCvG,EADH,EACGA,aAAciM,EADjB,EACiBA,SAChBC,EAAYlM,EAAaC,QAAQkM,MAAM,GAAGC,UAAUC,KAAI,SAACtM,GAAD,OAC1D,uBAAKuF,UAAW,EAAKgH,aAAavM,IAC7BA,EAAMA,UAGf,OACI,uBAAKuF,UAAU,mCACX,uBAAKA,UAAU,oBACX,gBAAC,EAAD,CAAcqB,QAAS,kBAAMsF,MAA7B,cAEJ,uBAAK3G,UAAU,WAAW4G,QA5B1C,GAAkChF,aCK3B,IAAMqF,EAAb,uKAEQ,ICjByBC,EDiBrBC,EAAW,GACTC,OAAiCxH,IAApBoB,KAAKC,MAAMoG,MAA0C,IAApBrG,KAAKC,MAAMoG,UACxCzH,IAApBoB,KAAKC,MAAMoG,OAAoBF,ICnBTD,EDmBqClG,KAAKC,MAAMoG,MClBjE,GAAKH,GAAU,EAChBA,EAAOI,eAAe,QAAS,CAClCC,sBAAuB,EACvBC,sBAAuB,IAGxBN,EAAOI,eAAe,QAAS,CAClCE,sBAAuB,KDW0D,MACjF,IAAMC,OAA+B7H,IAAnBoB,KAAKC,MAAMyG,KAAwC,IAAnB1G,KAAKC,MAAMyG,IAE7D,OACI,uBAAK1H,UAAU,oBACX,uBAAKA,UAAWgB,KAAKC,MAAMjB,WACtBgB,KAAKC,MAAME,SACXsG,GACG,wBAAMzH,UAAU,mBAAhB,IAAoCgB,KAAKC,MAAMyG,MAGvD,uBAAK1H,UAAU,mBAAmBoH,GAAcD,QAfhE,GAAwCvF,aAoB3B+F,EAAb,uKACc,IACEnN,EAAcwG,KAAKC,MAAnBzG,UAER,OACI,2BACI,uBAAKwF,UAAU,8CACRxF,EAAUU,cAAcc,QACvB,gBAAC,EAAD,CAAoBqL,KAAM7M,EAAUU,cAAcgB,UAC9BwL,IAAKlN,EAAUU,cAAce,UADjD,WAEazB,EAAUU,cAAcc,OAAO+I,WAE/CvK,EAAUmB,cAAcgC,cACrB,gBAAC,EAAD,CAAoBqC,UAAU,aAAaqH,KAAM7M,EAAUU,cAAc4B,UACrD4K,IAAKlN,EAAUU,cAAc6B,UADjD,UAEYvC,EAAUU,cAAc2B,MAAMkI,WAE7CvK,EAAUiB,aAAa+B,aACpB,gBAAC,EAAD,CAAoBwC,UAAU,iBAAiBqH,KAAM7M,EAAUU,cAAcqB,cACzDmL,IAAKlN,EAAUU,cAAcsB,cADjD,cAEgBhC,EAAUU,cAAcoB,UAAUyI,cAElDvK,EAAUU,cAAcuB,OAASjC,EAAUmB,cAAckC,YAC7D,gBAAC,EAAD,CAAoBmC,UAAU,aAAaqH,KAAM7M,EAAUU,cAAcwB,WAAzE,UACYlC,EAAUU,cAAcuB,MAAMsI,cAG3CvK,EAAUU,cAAcmB,UACvB,uBAAK2D,UAAU,4CACX,wCAAgBW,EAAuBnG,GAAvC,IAAoDA,EAAUU,cAAcmB,gBA7BpG,GAAmCuF,aE3BtBgG,EAAb,uKAGQ,IAAI5H,EAAY,aACbgB,KAAKC,MAAMG,WAAUpB,GAAa,yBAClCgB,KAAKC,MAAM4G,WAAU7H,GAAa,yBAErC,IAAMuB,EAAYP,KAAKC,MAAMG,SAAW,aAAWJ,KAAKC,MAAMI,QAC9D,OACI,yBACIrB,UAAWA,EACXqB,QAASE,GACRP,KAAKC,MAAME,cAZ5B,GAA+BS,IAAMC,WCExBiG,EAAb,uKACc,IAAD,EACwC9G,KAAKC,MAA3CoD,EADF,EACEA,cAAewD,EADjB,EACiBA,SAAUrN,EAD3B,EAC2BA,UAEhC,OACI,yBAAKwF,UAAW,8BACZ,kBAAC,EAAD,CAAW6H,SpBJS,eoBICA,EACVxG,QAAS,kBAAMgD,EpBLN,gBoBCjB,aAOD7J,EAAUU,cAAcmB,UAAY,IAAM7B,EAAUiB,aAAa+B,cAC/D,kBAAC,EAAD,CAAWqK,SpBRR,QoBQkBA,EACVxG,QAAS,kBAAMgD,EpBTvB,SoBQH,gBAKF7J,EAAUmB,cAAcsC,cAC1B,kBAAC,EAAD,CAAW4J,SpBbK,YoBaKA,EACVxG,QAAS,kBAAMgD,EpBdV,aoBahB,kBAMA,kBAAC,EAAD,CAAWwD,SpBtBO,aoBsBGA,EACVxG,QAAS,kBAAMgD,EpBvBR,coBsBlB,iBAvBhB,GAAmCzC,IAAMC,WCNlC,IAAMkG,EAAb,qLAG6BvN,EAAsB8E,GAC3C,GAAGyI,EAAqB1I,gBAAgB7E,EAAW8E,GAAS,CACxD,IAAMa,EAAW4H,EAAqB3H,QAAQ5F,EAAW8E,GAEzD9E,EAAUU,cAAcc,QAAUmE,EAClC3F,EAAUU,cAAcoB,WAAagD,EAEzC,OAAO9E,IAVf,sCAa2BA,EAAsB8E,GACzC,IAAMa,EAAW4H,EAAqB3H,QAAQ5F,EAAW8E,GACzD,OAAO9E,EAAUU,cAAcc,QAAUmE,IAfjD,8BAkBmB3F,EAAsB6F,GACjC,OAAO,IAAMA,IAnBrB,mCAsBwB7F,GAChB,OACI,yBAAKwF,UAAU,kBACX,yBAAKA,UAAU,+BAAf,kEAGA,yBAAKA,UAAU,wBACX,kDA7BpB,GAA0CZ,GAA7B2I,EACFvI,aAAc,ECAlB,IAAMwI,EAAb,qLAG6BxN,EAAsB8E,GAS3C,OARG0I,EAAc3I,gBAAgB7E,EAAW8E,KACxC9E,EAAUU,cAAc2B,OAAS,GACjCrC,EAAUmB,cAAciC,eAAgB,EACxC5C,EAAwBR,EAAW,CAC/BC,MAAO,YACPI,UvBXsB,iBuBcvBL,IAZf,sCAe2BA,EAAsB8E,GACzC,OAAO9E,EAAUU,cAAc2B,OAAS,KAhBhD,mCAmBwBrC,GAChB,OACI,yBAAKwF,UAAU,kBACX,yBAAKA,UAAU,+BAAf,+DAEI,6BAFJ,6CAIA,yBAAKA,UAAU,wBACX,yBAAKA,UAAU,cAAf,iBA3BpB,kCAiCuBxF,GACf,OAAOA,EAAUmB,cAAcgC,eAAiBnD,EAAUmB,cAAciC,kBAlChF,GAAmC6B,GAAtBuI,EACFxI,aAAc,EADZwI,EAqCFjI,MAAQ,iBArCNiI,EAsCF/H,GAAK,iBAtCH+H,EAuCFhI,UAAY,eCvChB,IAAMiI,EAAb,qLAG6BzN,EAAsB8E,GAY3C,OAXG2I,EAAU5I,gBAAgB7E,EAAW8E,KACpC9E,EAAUU,cAAcc,QAAU,IAClCxB,EAAUU,cAAcuB,OAAS,EACjCjC,EAAUU,cAAcoB,WAAa,GAErC9B,EAAUmB,cAAckC,WAAY,EACpC7C,EAAwBR,EAAW,CAC/BC,MAAO,4FACPI,UxBZgB,WwBejBL,IAff,sCAkB2BA,EAAsB8E,GACzC,OAAO9E,EAAUU,cAAcuB,OAAS,GAAKjC,EAAUU,cAAcoB,WAAa,IAAM9B,EAAUU,cAAcc,QAAU,MAnBlI,mCAsBwBxB,GAChB,OACI,yBAAKwF,UAAU,kBACX,yBAAKA,UAAU,+BAAf,qGAGA,yBAAKA,UAAU,wBACX,4CACA,yBAAKA,UAAU,kBAAf,iBACA,yBAAKA,UAAU,cAAf,gBA/BpB,kCAqCuBxF,GACf,OAAOA,EAAUmB,cAAcgC,eAAiBnD,EAAUmB,cAAckC,cAtChF,GAA+B4B,GAAlBwI,EACFzI,aAAc,EADZyI,EAyCFlI,MAAQ,kBAzCNkI,EA0CFhI,GAAK,aA1CHgI,EA2CFjI,UAAY,eC3ChB,IAAMkI,GAAb,qLAG6B1N,EAAsB8E,GAS3C,OARG4I,EAAO7I,gBAAgB7E,EAAW8E,KACjC9E,EAAUU,cAAcoB,WAAa,GACrC9B,EAAUmB,cAAcgC,cAAe,EACvC3C,EAAwBR,EAAW,CAC/BC,MAAO,wFACPI,UzBXsB,iByBcvBL,IAZf,sCAe2BA,EAAsB8E,GACzC,OAAO9E,EAAUU,cAAcoB,WAAa,KAhBpD,mCAmBwB9B,GAChB,OACI,yBAAKwF,UAAU,kBACX,yBAAKA,UAAU,+BAAf,6GAIA,yBAAKA,UAAU,wBACX,yBAAKA,UAAU,kBAAf,qBA3BpB,kCAiCuBxF,GACf,OAAOA,EAAUmB,cAAc+B,mBAAqBlD,EAAUmB,cAAcgC,iBAlCpF,GAA4B8B,GAAfyI,GACF1I,aAAc,EADZ0I,GAqCFnI,MAAQ,kBArCNmI,GAsCFjI,GAAK,eAtCHiI,GAuCFlI,UAAY,eCxChB,IAAMmI,GAAb,qLAG6B3N,EAAsB8E,GAK3C,OAJG6I,EAAiB9I,gBAAgB7E,EAAW8E,KAC3C9E,EAAUU,cAAcoB,WAAa,EACrC9B,EAAUmB,cAAc+B,kBAAmB,GAExClD,IARf,sCAW2BA,EAAsB8E,GACzC,OAAO9E,EAAUU,cAAcoB,WAAa,IAZpD,mCAewB9B,GAChB,OACI,yBAAKwF,UAAU,kBACX,yBAAKA,UAAU,+BAAf,4FAGA,yBAAKA,UAAU,wBACX,yBAAKA,UAAU,kBAAf,oBAtBpB,kCA2BuBxF,GACf,OAAQA,EAAUmB,cAAc+B,qBA5BxC,GAAsC+B,GAAzB0I,GACF3I,aAAc,EADZ2I,GA+BFpI,MAAQ,oBA/BNoI,GAgCFlI,GAAK,oBAhCHkI,GAiCFnI,UAAY,mBCjChB,IAAMoI,GAAb,qLAG6B5N,EAAsB8E,GAK3C,OAJG8I,EAAY/I,gBAAgB7E,EAAW8E,KACtC9E,EAAUU,cAAcoB,WAAa,EACrC9B,EAAUmB,cAAcoC,eAAgB,GAErCvD,IARf,sCAW2BA,EAAsB8E,GACzC,OAAO9E,EAAUU,cAAcoB,WAAa,IAZpD,mCAewB9B,GAChB,OACI,yBAAKwF,UAAU,kBACX,yBAAKA,UAAU,+BAAf,gEAEI,6BAFJ,iDAIA,yBAAKA,UAAU,wBACX,yBAAKA,UAAU,kBAAf,oBAvBpB,kCA4BuBxF,GACf,OAAQA,EAAUmB,cAAcoC,kBA7BxC,GAAiC0B,GAApB2I,GACF5I,aAAc,EADZ4I,GAgCFrI,MAAQ,gBAhCNqI,GAiCFnI,GAAK,YAjCHmI,GAkCFpI,UAAY,mBCjChB,IAAMqI,GAAb,qLAG6B7N,EAAsB8E,GAU3C,OATG+I,EAAMhJ,gBAAgB7E,EAAW8E,KAChC9E,EAAUU,cAAcoB,WAAa,GACrC9B,EAAUmB,cAAcqC,OAAQ,EAChChD,EAAwBR,EAAW,CAC/BC,MAAO,oGAEPI,U5BXiB,Y4BclBL,IAbf,sCAgB2BA,EAAsB8E,GACzC,OAAO9E,EAAUU,cAAcoB,WAAa,KAjBpD,mCAoBwB9B,GAChB,OACI,yBAAKwF,UAAU,kBACX,yBAAKA,UAAU,+BAAf,qFAGA,yBAAKA,UAAU,wBACX,yBAAKA,UAAU,kBAAf,qBA3BpB,kCAiCuBxF,GACf,OAAOA,EAAUmB,cAAcgC,eAAiBnD,EAAUmB,cAAcqC,UAlChF,GAA2ByB,GAAd4I,GACF7I,aAAc,EADZ6I,GAqCFtI,MAAQ,eArCNsI,GAsCFpI,GAAK,QAtCHoI,GAuCFrI,UAAY,eCvChB,IAAMsI,GAAb,qLAG6B9N,EAAsB8E,GAU3C,OATGgJ,EAAMjJ,gBAAgB7E,EAAW8E,KAChC9E,EAAUU,cAAcoB,WAAa,GACrC9B,EAAUU,cAAc2B,OAAS,GACjCrC,EAAUmB,cAAc8B,WAAY,GAExCzC,EAAwBR,EAAW,CAC/BC,MAAO,gBACPI,U7Bb0B,gB6BevBL,IAbf,sCAgB2BA,EAAsB8E,GACzC,OAAO9E,EAAUU,cAAcoB,WAAa,IACrC9B,EAAUU,cAAc2B,OAAS,KAlBhD,mCAqBwBrC,GAChB,OACI,yBAAKwF,UAAU,kBACX,yBAAKA,UAAU,+BAAf,kEAEI,6BAFJ,0DAIA,yBAAKA,UAAU,wBACX,yBAAKA,UAAU,cAAf,aACA,yBAAKA,UAAU,kBAAf,qBA9BpB,kCAoCuBxF,GACf,OAAOA,EAAUmB,cAAcqC,QAAUxD,EAAUmB,cAAc8B,cArCzE,GAA2BgC,GAAd6I,GACF9I,aAAc,EADZ8I,GAwCFvI,MAAQ,iBAxCNuI,GAyCFrI,GAAK,QAzCHqI,GA0CFtI,UAAY,eC1ChB,IAAMuI,GAAb,qLAG6B/N,EAAsB8E,GAW3C,OAVGiJ,EAAalJ,gBAAgB7E,EAAW8E,KACvC9E,EAAUU,cAAcoB,WAAa,GACrC9B,EAAUU,cAAcc,QAAU,IAElCxB,EAAUmB,cAAcsC,cAAe,EACvCjD,EAAwBR,EAAW,CAC/BC,MAAO,sGACPI,U9BbsB,iB8BgBvBL,IAdf,sCAiB2BA,EAAsB8E,GACzC,OAAO9E,EAAUU,cAAcoB,WAAa,IACrC9B,EAAUU,cAAcc,QAAU,MAnBjD,mCAsBwBxB,GAChB,OACI,yBAAKwF,UAAU,kBACX,yBAAKA,UAAU,+BAAf,kGAEI,6BAFJ,+BAIA,yBAAKA,UAAU,wBACX,yBAAKA,UAAU,kBAAf,iBACA,gDA/BpB,kCAqCuBxF,GACf,OAAOA,EAAUmB,cAAckC,YAAcrD,EAAUmB,cAAcsC,iBAtC7E,GAAkCwB,GAArB8I,GACF/I,aAAc,EADZ+I,GAyCFxI,MAAQ,iBAzCNwI,GA0CFtI,GAAK,iBA1CHsI,GA2CFvI,UAAY,mBC3ChB,IAAMwI,GAAb,qLAG6BhO,EAAsB8E,GAS3C,OARGkJ,EAAiBnJ,gBAAgB7E,EAAW8E,KAC3C9E,EAAUU,cAAc2B,OAAS,GACjCrC,EAAUmB,cAAcuC,kBAAmB,EAC3ClD,EAAwBR,EAAW,CAC/BC,MAAO,yFACPI,U/BXsB,iB+BcvBL,IAZf,sCAe2BA,EAAsB8E,GACzC,OAAO9E,EAAUU,cAAcoB,WAAa,IAAM9B,EAAUU,cAAcc,QAAU,MAhB5F,mCAmBwBxB,GAChB,OACI,yBAAKwF,UAAU,kBACX,yBAAKA,UAAU,+BAAf,8GAEI,6BAFJ,6CAIA,yBAAKA,UAAU,wBACX,yBAAKA,UAAU,kBAAf,iBACA,gDA5BpB,kCAkCuBxF,GACf,OAAOA,EAAUmB,cAAciC,gBAAkBpD,EAAUmB,cAAcuC,qBAnCjF,GAAsCuB,GAAzB+I,GACFhJ,aAAc,EADZgJ,GAsCFzI,MAAQ,oBAtCNyI,GAuCFvI,GAAK,oBAvCHuI,GAwCFxI,UAAY,mBCxChB,IAAMyI,GAAb,qLAG6BjO,EAAsB8E,GAW3C,OAVGmJ,EAAWpJ,gBAAgB7E,EAAW8E,KACrC9E,EAAUU,cAAcuB,OAAS,GACjCjC,EAAUU,cAAcoB,WAAa,GACrC9B,EAAUU,cAAcc,QAAU,GAClCxB,EAAUmB,cAAcmC,YAAa,EACrC9C,EAAwBR,EAAW,CAC/BC,MAAO,wEACPI,UhCXgB,WgCcjBL,IAdf,sCAiB2BA,EAAsB8E,GACzC,OAAO9E,EAAUU,cAAcuB,OAAS,IAAMjC,EAAUU,cAAcoB,WAAa,IAAM9B,EAAUU,cAAcc,QAAU,KAlBnI,mCAqBwBxB,GAChB,OACI,yBAAKwF,UAAU,kBACX,yBAAKA,UAAU,+BAAf,uEAEI,6BAFJ,sDAIA,yBAAKA,UAAU,wBACX,yBAAKA,UAAU,cAAf,aACA,yBAAKA,UAAU,kBAAf,iBACA,+CA/BpB,kCAqCuBxF,GACf,OAAOA,EAAUmB,cAAcsC,eAAiBzD,EAAUmB,cAAcmC,eAtChF,GAAgC2B,GAAnBgJ,GACFjJ,aAAc,EADZiJ,GAyCF1I,MAAQ,cAzCN0I,GA0CFxI,GAAK,cA1CHwI,GA2CFzI,UAAY,eCnChB,IAAM0I,GAAmC,CAC5CV,EACAC,EACAC,GACAC,GACAC,GACAC,GACAC,GACAC,GACAC,GACAC,ICZG,IAAME,GAAb,uKACc,IAAD,EACqC3H,KAAKC,MAAxCzG,EADF,EACEA,UAAWoO,EADb,EACaA,SAAUrG,EADvB,EACuBA,WAC5B,OACI,kBAAC,EAAD,CACInB,UAAWwH,EAASvJ,gBAAgB7E,EAAW,GAC/C6G,QAAS,kBAAMkB,EAAW,EAAGqG,EAASrJ,oBACtCU,GAAI2I,EAAS3I,GACbwB,IAAKmH,EAAS3I,GACdD,UAAW4I,EAAS5I,UACpBkB,QAAS0H,EAAS9I,aAAatF,IAE9BoO,EAAS7I,WAZ1B,GAAoC6B,IAAMC,WCS7BgH,GAAb,4MAKIC,oBAAsB,SAACxJ,GAAD,OAAoBoB,EAAkBpB,EAAQ,EAAK2B,MAAMzG,YALnF,EAMIuO,oBAAsB,SAACzJ,GAAD,OAAoBsB,EAAkBtB,EAAQ,EAAK2B,MAAMzG,YANnF,kECjBO,IAAwBA,KDmBRwG,KAAKC,MAAMzG,WClBhBiB,aAAa+B,cACvBhD,EAAUiB,aAAa+B,aAAc,EACrCxC,EAAwBR,EAAW,CAC/BC,MAAO,gFACPI,UpCL0B,mBmCiBtC,2CAQyB+N,GACjB,OACI,kBAAC,GAAD,CAAgBnH,IAAKmH,EAAS3I,GAAI2I,SAAUA,EAAUpO,UAAWwG,KAAKC,MAAMzG,UAAW+H,WAAYvB,KAAKC,MAAMsB,eAV1H,+BAcc,IAAD,SAC6BvB,KAAKC,MAA/BzG,EADH,EACGA,UAAW+H,EADd,EACcA,WACbC,EAAoB7B,EAAuBnG,GAC7CwO,EFXL,SAAgCxO,GACnC,OAAOkO,GAAcO,QAAO,SAACC,GAAD,OAAOA,EAAErJ,YAAYrF,MEUrB2O,CAAuB3O,GAAWuM,KAAI,SAAC6B,GAAD,OAAc,EAAKQ,qBAAqBR,MAOtG,OANGI,EAAkBlO,OAAS,IAC1BkO,EAAoB,CAAC,oFACmC,6BADnC,mEAMrB,6BACI,yBAAKhJ,UAAU,oBACX,kBAAC,EAAD,CACIoB,UAAW2G,EAAqB1I,gBAAgB7E,EAAW,GAC3D6G,QAAS,kBAAMkB,EAAW,EAAGwF,EAAqBxI,oBAClDU,GAAG,cACHiB,QAAS6G,EAAqBjI,aAAatF,IAJ/C,iBASHA,EAAUmB,cAAc+B,kBACrB,6BACI,kBAAC,EAAD,CACIuC,GAAG,mBACH8B,cAAe,SAACzC,GAAD,OAAmB,EAAKwJ,oBAAoBxJ,IAC3D0C,cAAe,SAAC1C,GAAD,OAAmB,EAAKyJ,oBAAoBzJ,IAC3D2C,kBAAmBzH,EAAUY,eAAeiC,YAC5C6E,iBAAkBM,EAClBtB,QAAS,wCANb,4BAaR,6BACI,wCACA,yBAAKlB,UAAU,qBACX,yBAAKA,UAAW,oBACVgJ,UAvD9B,GAAiCpH,IAAMC,WEhB1BwH,GAAb,4MACI7J,aAAc,EADlB,qEAG6BhF,EAAsB8E,GAC3C,GAAG+J,EAA0BhK,gBAAgB7E,EAAW8E,GAAS,CAC7D,IAAMgK,EAAQD,EAA0BjJ,QAAQ5F,EAAW8E,GAC3D9E,EAAUU,cAAcuB,OAAS6M,EAAM,GACvC9O,EAAUU,cAAcc,QAAUsN,EAAM,GACxC9O,EAAUU,cAAcoB,WAAagN,EAAM,GAE3C9O,EAAUU,cAAc+B,eAAiByC,EAAalF,EAAUU,cAAc+B,gBAAkBqC,EAEpG,OAAO9E,IAZf,sCAe2BA,EAAsB8E,GACzC,IAAMgK,EAAQD,EAA0BjJ,QAAQ5F,EAAW8E,GAC3D,OAAO9E,EAAUU,cAAcuB,OAAS6M,EAAM,IACvC9O,EAAUU,cAAcc,QAAUsN,EAAM,IACxC9O,EAAUU,cAAcoB,WAAagN,EAAM,KAnB1D,8BAsBmB9O,EAAsB6F,GAMjC,IALA,IAAIkJ,EAAW,EACXC,EAAe,EACfC,EAAW,EAEXlJ,EAAiB/F,EAAUU,cAAc+B,gBAAkB,EACtDuD,EAAI,EAAGA,EAAIH,EAAgBG,IAChC+I,GAAY,EAAqB,EAAjBhJ,EAChBiJ,GAAgB,EAAqB,EAAjBjJ,EACpBkJ,GAAY,GAAsB,EAAjBlJ,EAEjBA,IAEJ,MAAO,CAACgJ,EAAUE,EAAUD,KAnCpC,mCAsCwBhP,GAChB,IAAM8O,EAAQD,EAA0BjJ,QAAQ5F,EAAW,GAE3D,OACI,yBAAKwF,UAAU,kBACX,yBAAKA,UAAU,+BAAf,8CAEI,6BAFJ,gBAIA,yBAAKA,UAAU,wBACX,wCAAcsJ,EAAM,IACpB,yBAAKtJ,UAAW,cAAhB,UAAsCsJ,EAAM,IAC5C,yBAAKtJ,UAAW,kBAAhB,cAA8CsJ,EAAM,UAlDxE,GAA+ClK,GCMlCsK,GAAb,uKACc,IAAD,EAC2B1I,KAAKC,MAA9BzG,EADF,EACEA,UAAW+H,EADb,EACaA,WACdoH,EAAa,sBASjB,OARGnP,EAAUU,cAAc0B,YAAc,EACrC+M,GAAc,yBAEVnP,EAAUU,cAAc0B,YAAc,EAC1C+M,GAAc,6BAEbA,GAAc,2BAGf,uBAAK3J,UAAU,qBACX,yCACA,uBAAKA,UAAU,oBACX,gBAAC,EAAD,CACIoB,UAAWiI,GAA0BhK,gBAAgB7E,EAAW,GAChE6G,QAAS,kBAAMkB,EAAW,EAAG8G,GAA0B9J,oBACvDU,GAAG,aACHiB,QAASmI,GAA0BvJ,aAAatF,IAJpD,mBAMqBA,EAAUU,cAAc+B,iBAGjD,2BACCzC,EAAUmB,cAAcmC,YACrB,uBAAKkC,UAAU,iCACX,2BACI,2CACA,sCAAcxF,EAAUU,cAAc0B,YAAYmI,QAAQ,GAA1D,KACA,sCAAcvK,EAAUU,cAAcyB,UAAUoI,UAAhD,WAEJ,uBAAK/E,UAAW2J,UAjCxC,GAAiC/H,a,oBCNpBgI,GAAb,uKAOQ,OACI,kBAAC,KAAD,CAAeC,OANL,kIAFtB,GAAoCjI,IAAMC,WCuB7BiI,GAAb,4MACIC,WADJ,IAEa1G,MAAQ,CACb7I,UAAW2D,IAAmBG,IAAaQ,IAC3CkL,YvCnB4B,cuCepC,kEAO+B,IAAD,OACtBhJ,KAAK+I,MAAQ,IAAI/E,EAAUhE,KAAKqC,MAAM7I,WAAW,SAACiE,GAAD,OAAyB,EAAKwG,OAAOxG,MACtFuC,KAAK6C,SAAS,CAACmG,YvCxBa,iBuCepC,6BAYWvL,GACHuC,KAAK6C,SAAS,CAACrJ,UAAWiE,MAblC,kCAgBgBwL,EAAsBC,GAC9B,IAAMzL,EAAQ,eAAOuC,KAAKqC,MAAM7I,WAC5B0B,EAAYgO,EACblJ,KAAKqC,MAAM7I,UAAUmB,cAAcoC,gBAAe7B,GAAa,GAClEuC,EAASvD,cAAcc,QAAUE,EAC9BuC,EAASvD,cAAcc,OAASyC,EAASvD,cAAce,WAAUwC,EAASvD,cAAcc,OAASyC,EAASvD,cAAce,UAC3H1B,EAAgBkE,EAAU,gCAC1BuC,KAAK6C,SAAS,CAACrJ,UAAWiE,MAvBlC,mCA0BiB4B,EAAwB8J,GACjC,IAAI1L,EAAQ,eAAOuC,KAAKqC,MAAM7I,WAC9BiE,EAAW0L,EAAY1L,EAAU4B,GAEjCW,KAAK6C,SAAS,CAACrJ,UAAWiE,MA9BlC,iCAsCqBuC,KAAKqC,MAAM7I,UxCjClBE,aAAaC,QAAU,KwCLrC,wCAyCsByP,GACdpJ,KAAK6C,SAAS,CAACmG,YAAaI,MA1CpC,6BA8CQ,IAAM3L,EAAQ,eAAOuC,KAAKqC,MAAM7I,WAChCwG,KAAK6C,SAAS,CAACrJ,UAAWiE,IAC1BM,EAASN,GAAU,KAhD3B,kCAmDiB,IAAD,OAGR,GADiB4L,QAAQ,6CACzB,CAIArJ,KAAK+I,MAAMO,aACX,IAAM7L,EAAW,CAACjE,UAAWsE,KAC7BL,EAASjE,UAAUqB,SAAW,IAAIC,KAClCkF,KAAK6C,SAASpF,GACduC,KAAK+I,MAAQ,IAAI/E,EAAUvG,EAASjE,WAAW,SAACiE,GAAD,OAAyB,EAAKwG,OAAOxG,MACpFM,EAASN,EAASjE,cA/D1B,iCAkEuBgJ,GAAyB,IAAD,OACvC,GAAW,MAARA,EAAH,CAEAxC,KAAK+I,MAAMO,aACX,IAAM7L,EAAW,CAACjE,UAAWgJ,GAC7BxC,KAAK6C,SAASpF,GACduC,KAAK+I,MAAQ,IAAI/E,EAAUvG,EAASjE,WAAW,SAACiE,GAAD,OAAyB,EAAKwG,OAAOxG,MACpFM,EAASyE,MAzEjB,+BA4Ec,IACFwG,EADC,OAEL,OAAQhJ,KAAKqC,MAAM2G,aACf,IvC/FsB,WuCgGlBA,EACI,gBAAC,EAAD,CACIxP,UAAWwG,KAAKqC,MAAM7I,UACtBsJ,OAAQ,kBAAM,EAAKN,QACnBO,YAAa,kBAAM,EAAKwG,aACxB3G,aAAc,SAACJ,GAAD,OAA4B,EAAKG,WAAWH,IAC1Da,cAAe,SAAC+F,GAAD,OAAsB,EAAKI,kBAAkBJ,MAGpE,MACJ,IvCxGW,MuCyGPJ,EACI,gBAAC,GAAD,CACIxP,UAAWwG,KAAKqC,MAAM7I,UACtB+H,WAAY,SAAClC,EAAwB8J,GAAzB,OAA8C,EAAKM,aAAapK,EAAgB8J,MAGpG,MACJ,IvC/GoB,UuCgHhBH,EACI,gBAAC,GAAD,CACIxP,UAAWwG,KAAKqC,MAAM7I,UACtB+H,WAAY,SAAClC,EAAwB8J,GAAzB,OAA8C,EAAKM,aAAapK,EAAgB8J,MAGpG,MACJ,IvCtHmB,cuCuHfH,EACI,gBAAC,GAAD,MAEJ,MACJ,IvC9HwB,auC+HxB,QACIA,EACI,gBAAC,EAAD,CACIxP,UAAWwG,KAAKqC,MAAM7I,UACtB8H,cAAe,SAAC2H,EAAsBC,GAAvB,OAAkD,EAAKQ,YAAYT,EAAcC,IAChG3H,WAAY,SAAClC,EAAwB8J,GAAzB,OAA8C,EAAKM,aAAapK,EAAgB8J,MAM5G,OACI,uBAAKnK,UAAU,cACX,uBAAKA,UAAU,oBACX,uBAAKA,UAAU,2BACX,gBAAC,EAAD,CAAc2G,SAAU,kBAAM,EAAKA,YAAYjM,aAAcsG,KAAKqC,MAAM7I,UAAUE,gBAEtF,uBAAKsF,UAAU,6BACX,gBAAC,EAAD,CAAeqE,cAAe,SAAC+F,GAAD,OAAsB,EAAKI,kBAAkBJ,IACvEvC,SAAU7G,KAAKqC,MAAM2G,YACrBxP,UAAWwG,KAAKqC,MAAM7I,YAEzBwP,GAEL,uBAAKhK,UAAU,4BACX,gBAAC,EAAD,CAAexF,UAAWwG,KAAKqC,MAAM7I,mBAzI7D,GAA+BoH,aCoBhB+I,G,kDA/BX,WAAY1J,GAAa,IAAD,uBACpB,cAAMA,IAJDoC,WAGe,IAFxBF,iBAEwB,EAEpB,IAAM5F,EAAWY,KAAoBG,IAAW/C,SAASgC,SAFrC,OAIpB,EAAK4F,YAAc,WACf,EAAKU,UAAS,SAAAR,GAAK,MAAK,CACpBH,MACIG,EAAMH,QAAUN,EAAOG,KACjBH,EAAOC,MACPD,EAAOG,UAIzB,EAAKM,MAAQ,CACTH,MAAO3F,EAAWqF,EAAOG,KAAOH,EAAOC,MACvCM,YAAa,EAAKA,aAfF,E,qDAqBpB,OACQ,kBAACH,EAAa4H,SAAd,CAAuBC,MAAO7J,KAAKqC,OAC/B,yBAAKrD,UAAWgB,KAAKqC,MAAMH,MAAMJ,YAC7B,kBAAC,GAAD,Y,GA5BNlB,IAAMC,WCAJiJ,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,GAAD,OAEFC,SAASC,eAAe,SDiIpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.a119713d.chunk.js","sourcesContent":["import {GameState} from \"./game-state\";\r\nimport {MAX_LOG_SIZE} from \"../config/constants\";\r\n\r\nexport const ACHIEVEMENT_ENTRY_TYPE = \"ACHIEVEMENT\";\r\nexport const COMMON_ENTRY_TYPE = \"COMMON\";\r\nexport const BLOOD_ENTRY_TYPE = \"BLOOD\";\r\n\r\nexport type DetailedEntry = {\r\n    entry: string,\r\n    entryType: string,\r\n}\r\n\r\nexport function addJournalEntry(gameState: GameState, entry: string){\r\n    gameState.journalState.entries.push({\r\n        entry: entry,\r\n        entryType: COMMON_ENTRY_TYPE\r\n    });\r\n    if(gameState.journalState.entries.length >= MAX_LOG_SIZE) {\r\n        gameState.journalState.entries.shift();\r\n    }\r\n    return gameState;\r\n}\r\n\r\nexport function addDetailedJournalEntry(gameState: GameState, entry: DetailedEntry){\r\n    gameState.journalState.entries.push(entry);\r\n    if(gameState.journalState.entries.length >= MAX_LOG_SIZE) {\r\n        gameState.journalState.entries.shift();\r\n    }\r\n    return gameState;\r\n}\r\n\r\nexport function clearJournal(gameState: GameState) {\r\n    gameState.journalState.entries = [];\r\n}\r\n","export const MIN_SAVE_REWARD_TIME = 24;\r\nexport const TICK_SPEED = 50;\r\nexport const SECONDS_PER_EVENT_CHECK = 5;\r\nexport const MAX_LOG_SIZE = 25;\r\n\r\n// Base Caps\r\nexport const BASE_RELIC_CAP = 100;\r\nexport const BASE_MONEY_CAP = 50;\r\nexport const BASE_KNOWLEDGE_CAP = 10;\r\n\r\n// Panel Keys\r\nexport const SETTINGS_PANEL_KEY = \"SETTINGS\";\r\nexport const GENERATORS_PANEL_KEY = \"GENERATORS\";\r\nexport const LAB_KEY = \"LAB\";\r\nexport const RITUAL_PANEL_KEY = \"RITUALS\";\r\nexport const PATCH_NOTES_KEY = \"PATCH_NOTES\";\r\n","export const CURRENT_VERSION = \"0.1.1\";\r\n","import {COMMON_ENTRY_TYPE, DetailedEntry} from \"./journal\";\r\nimport {CURRENT_VERSION} from \"../config/versioning\";\r\n\r\nexport class GameState {\r\n    resourceState: ResourceState = new ResourceState();\r\n    jobAssignments: JobAssignments = new JobAssignments();\r\n    journalState: JournalState = new JournalState();\r\n    settings: SettingsState = new SettingsState();\r\n    achievements: Achievements = new Achievements();\r\n    researchState: ResearchState = new ResearchState();\r\n    saveTime: Date = new Date();\r\n    version: string = CURRENT_VERSION;\r\n}\r\n\r\nexport class ResourceState {\r\n    relics: number = 0;\r\n    relicCap: number = 0;\r\n    relicRate: number = 0;\r\n    relicGenerator: number = 0;\r\n    sheds: number = 0;\r\n    students: number = 0;\r\n    knowledge: number = 0;\r\n    knowledgeRate: number = 0;\r\n    knowledgeCap: number = 0;\r\n    blood: number = 0;\r\n    bloodRate: number = 0;\r\n    bloodLoss: number = 0;\r\n    bloodChance: number = 0;\r\n    money: number = 0;\r\n    moneyRate = 0;\r\n    moneyCap = 0;\r\n    banks = 0;\r\n    bleedingStones = 0;\r\n    fame: number = 0;\r\n    whispers: number = 0;\r\n}\r\n\r\nexport class JobAssignments {\r\n    gatherRelics: number = 0;\r\n    studyRelics: number = 0;\r\n    giftShop: number = 0;\r\n}\r\n\r\nexport class JournalState {\r\n    entries: DetailedEntry[] = [{\r\n        entry: \"The new dig site lays before me, I wonder what treasures lay yet unearthed?\",\r\n        entryType: COMMON_ENTRY_TYPE\r\n    }];\r\n}\r\n\r\nexport class SettingsState {\r\n    darkMode: boolean = true;\r\n}\r\n\r\nexport class Achievements {\r\n    labUnlocked: boolean = false;\r\n}\r\n\r\nexport class ResearchState {\r\n    banksOpen: boolean = false;\r\n    studentKnowledge: boolean = false;\r\n    profiteering: boolean = false;\r\n    betterShovels: boolean = false;\r\n    bloodWard: boolean = false;\r\n    bloodMeter: boolean = false;\r\n    mapTheGrounds: boolean = false;\r\n    tours: boolean = false;\r\n    ritualCircle: boolean = false;\r\n    searchAlgorithms: boolean = false;\r\n}\r\n\r\nexport function mergeStateWithDefault(gameState: GameState): GameState {\r\n    const newState = {...new GameState(), ...gameState};\r\n    newState.resourceState = {...newState.resourceState, ...gameState.resourceState};\r\n    newState.jobAssignments = {...newState.jobAssignments, ...gameState.jobAssignments};\r\n    newState.journalState = {...newState.journalState, ...gameState.journalState};\r\n    newState.saveTime = gameState.saveTime;\r\n    newState.settings = {...newState.settings, ...gameState.settings};\r\n    newState.achievements = {...newState.achievements, ...gameState.achievements};\r\n    newState.researchState = {...newState.researchState, ...gameState.researchState};\r\n\r\n    return newState;\r\n}\r\n","import {GameState, mergeStateWithDefault} from \"./game-state\";\r\nimport {addJournalEntry} from \"./journal\";\r\nimport {CURRENT_VERSION} from \"../config/versioning\";\r\n\r\nexport function saveGameExists() {\r\n    return !!localStorage.getItem(\"RelicsSave\");\r\n}\r\n\r\nexport function loadSave() {\r\n    const string = localStorage.getItem(\"RelicsSave\");\r\n    return loadSaveFromString(string);\r\n}\r\n\r\nfunction loadSaveFromString(string: string | null) {\r\n    const save =  string ? JSON.parse(atob(string)) : null;\r\n    return mergeStateWithDefault(save);\r\n}\r\n\r\nexport function newSave(): GameState {\r\n    return new GameState();\r\n}\r\n\r\nexport function saveGame(gameState: GameState, manualSave: boolean = false) {\r\n    gameState.saveTime = new Date();\r\n    gameState.version = CURRENT_VERSION;\r\n\r\n    if(manualSave) addJournalEntry(gameState, \"Game Saved\");\r\n    localStorage.setItem(\"RelicsSave\", btoa(JSON.stringify(gameState)));\r\n}\r\n\r\n\r\nexport function importSave(): GameState | null {\r\n    const importText  = prompt(\"Import Save\", \"\");\r\n\r\n    if (importText == null || importText === \"\") {\r\n        return null;\r\n    } else {\r\n        // Try to parse\r\n        return loadSaveFromString(importText);\r\n    }}\r\n\r\nexport function exportSave(gameState: GameState): string {\r\n    gameState.version = CURRENT_VERSION;\r\n    saveGame(gameState);\r\n    return btoa(JSON.stringify(gameState));\r\n}\r\n","import {GameState } from \"../core/game-state\";\r\n\r\nexport class Transaction {\r\n    static isValidPurchase = (gameState: GameState, amount: number): boolean => false ;\r\n    static commitTransaction = (gameState: GameState, amount: number): GameState => {return gameState};\r\n    static updateClock: boolean = false;\r\n}\r\n\r\nexport class Research extends Transaction {\r\n    static isAvailable = (gameState: GameState): boolean => false;\r\n    static buildTooltip = (gameState: GameState): any => \"MISSING TOOLTIP\";\r\n    static title: string = \"MISSING TITLE\";\r\n    static className = \"\";\r\n    static id = \"\";\r\n}\r\n\r\nexport function safeResource(resource: any): number {\r\n    return (resource == undefined || resource == null) ? 0 : resource;\r\n}\r\n","import { Transaction } from \"../Transaction\";\r\nimport {GameState} from \"../../core/game-state\";\r\nimport React from \"react\";\r\n\r\nexport class StudentTransaction extends Transaction{\r\n    updateClock = false;\r\n\r\n    static commitTransaction(gameState: GameState, amount: number): GameState {\r\n        if(StudentTransaction.isValidPurchase(gameState, amount)) {\r\n            const currCost = StudentTransaction.getCost(gameState, amount);\r\n\r\n            gameState.resourceState.relics -= currCost;\r\n            gameState.resourceState.students += amount;\r\n        }\r\n        return gameState;\r\n    }\r\n\r\n    static isValidPurchase(gameState: GameState, amount: number): boolean {\r\n        const currCost = StudentTransaction.getCost(gameState, amount);\r\n\r\n        return gameState.resourceState.relics >= currCost;\r\n    }\r\n\r\n    static getCost(gameState: GameState, purchaseAmount: number) {\r\n        let sum = 0;\r\n        let theoreticalAmt = gameState.resourceState.students || 0;\r\n        for (let i = 0; i < purchaseAmount; i++) {\r\n            sum += 10 + theoreticalAmt * 5;\r\n            theoreticalAmt++;\r\n        }\r\n        return sum;\r\n    }\r\n\r\n    static buildTooltip(gameState: GameState): any {\r\n        return (\r\n            <div className=\"relics-tooltip\">\r\n                <div className=\"relics-tooltip__description\">\r\n                    Hire some students to dust off relics for you.\r\n                    They work for relics.\r\n                    { gameState.achievements.labUnlocked && (<div className={\"knowledge-text\"}>+5 Knowledge cap</div>)}\r\n                </div>\r\n                <div className=\"relics-tooltip__cost\">\r\n                    <div>Relics: {StudentTransaction.getCost(gameState, 1)}</div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","import {GameState} from \"../core/game-state\";\r\n\r\n// Gather\r\nexport function assignGatherers(amount: number, gameState: GameState){\r\n    if(countAvailableStudents(gameState) >= amount) {\r\n        gameState.jobAssignments.gatherRelics += amount;\r\n    }\r\n}\r\nexport function removeGatherers(amount: number, gameState: GameState){\r\n    gameState.jobAssignments.gatherRelics -= amount;\r\n    if(gameState.jobAssignments.gatherRelics < 0) gameState.jobAssignments.gatherRelics = 0;\r\n}\r\n\r\n// Study\r\nexport function assignStudyRelics(amount: number, gameState: GameState){\r\n    if(countAvailableStudents(gameState) >= amount) {\r\n        gameState.jobAssignments.studyRelics += amount;\r\n    }\r\n}\r\nexport function removeStudyRelics(amount: number, gameState: GameState){\r\n    gameState.jobAssignments.studyRelics -= amount;\r\n    if(gameState.jobAssignments.studyRelics < 0) gameState.jobAssignments.studyRelics = 0;\r\n}\r\n\r\n// Work the gift shop\r\nexport function assignGiftShop(amount: number, gameState: GameState){\r\n    if(countAvailableStudents(gameState) >= amount) {\r\n        gameState.jobAssignments.giftShop += amount;\r\n    }\r\n}\r\nexport function removeGiftShop(amount: number, gameState: GameState){\r\n    gameState.jobAssignments.giftShop -= amount;\r\n    if(gameState.jobAssignments.giftShop < 0) gameState.jobAssignments.studyRelics = 0;\r\n}\r\n\r\nexport function countAvailableStudents(gameState: GameState) {\r\n    const assignedStudents = (gameState.jobAssignments.gatherRelics || 0)\r\n        + (gameState.jobAssignments.studyRelics || 0)\r\n        + (gameState.jobAssignments.giftShop|| 0);\r\n    return gameState.resourceState.students - assignedStudents;\r\n}\r\n","import React from \"react\";\r\nimport ReactTooltip from \"react-tooltip\";\r\n\r\ntype RelicsButtonProps = {\r\n  onClick: any;\r\n  id?: string; // Must be provided for tooltip to work\r\n  disabled?: any;\r\n  tooltip?: any;\r\n  compact?: boolean;\r\n  className?: string;\r\n}\r\n\r\nexport class RelicsButton extends React.Component<RelicsButtonProps> {\r\n\r\n    render() {\r\n        const { tooltip, id, children, disabled, onClick, compact } = this.props;\r\n        let className = \"relics-button\";\r\n        if(disabled) className += \" relics-button--disabled\";\r\n        if(compact) className += \" relics-button--compact\";\r\n        if(this.props.className) className += \" \" + this.props.className;\r\n\r\n        const clickFunc = disabled ? () => {} : onClick;\r\n        const dataTipAttr = {};\r\n        if(tooltip)\r\n        {\r\n            // @ts-ignore\r\n            dataTipAttr['data-tip'] = '';\r\n            // @ts-ignore\r\n            dataTipAttr['data-for'] = id;\r\n        }\r\n        return (\r\n            <span { ...dataTipAttr} id={id} key={id} className={className} onClick={clickFunc}>\r\n                {children}\r\n                {tooltip &&\r\n                    <ReactTooltip id={id} key={id} place=\"bottom\" effect=\"solid\">\r\n                        {tooltip}\r\n                    </ReactTooltip>\r\n                }\r\n            </span>\r\n        )\r\n    }\r\n}\r\n","import React from \"react\";\r\nimport {RelicsButton} from \"./relicsButton\";\r\nimport ReactTooltip from \"react-tooltip\";\r\n\r\ntype AssignWorkerOptionProps = {\r\n    id?:string,\r\n    tooltip?: string,\r\n    assignWorkers: any,\r\n    removeWorkers: any,\r\n    currentlyAssigned: number,\r\n    availableWorkers: number,\r\n}\r\n\r\nexport class AssignWorkerOptions extends React.Component<AssignWorkerOptionProps>{\r\n    render() {\r\n        const {\r\n            id,\r\n            tooltip,\r\n            children,\r\n            assignWorkers,\r\n            removeWorkers,\r\n            currentlyAssigned,\r\n            availableWorkers,\r\n        } = this.props;\r\n\r\n        const dataTipAttr = {};\r\n        if(tooltip)\r\n        {\r\n            // @ts-ignore\r\n            dataTipAttr['data-tip'] = '';\r\n            // @ts-ignore\r\n            dataTipAttr['data-for'] = id;\r\n        }\r\n        return (\r\n            <span { ...dataTipAttr} id={id} >\r\n                {children}: {currentlyAssigned || 0}\r\n                <span>\r\n                    <RelicsButton\r\n                        compact={true}\r\n                        disabled={currentlyAssigned <= 0}\r\n                        onClick={() => removeWorkers(1)}\r\n                    >\r\n                        -\r\n                    </RelicsButton>\r\n                    <RelicsButton\r\n                        compact={true}\r\n                        disabled={availableWorkers <= 0}\r\n                        onClick={() => assignWorkers(1)}>\r\n                        +\r\n                    </RelicsButton>\r\n                    <RelicsButton\r\n                        compact={true}\r\n                        disabled={availableWorkers <= 0}\r\n                        onClick={() => assignWorkers(availableWorkers)}>\r\n                        <u>+</u>\r\n                    </RelicsButton>\r\n                </span>\r\n                {tooltip &&\r\n                    <ReactTooltip id={id} place=\"bottom\" effect=\"solid\">\r\n                        {tooltip}\r\n                    </ReactTooltip>\r\n                }\r\n            </span>\r\n        );\r\n    }\r\n}\r\n","import { Transaction } from \"../Transaction\";\r\nimport {GameState} from \"../../core/game-state\";\r\nimport React from \"react\";\r\n\r\nexport class ShedTransaction extends Transaction{\r\n    updateClock = false;\r\n\r\n    static commitTransaction(gameState: GameState, amount: number): GameState {\r\n        if(ShedTransaction.isValidPurchase(gameState, amount)) {\r\n            const currCost = ShedTransaction.getCost(gameState, amount);\r\n\r\n            gameState.resourceState.money -= currCost;\r\n            gameState.resourceState.sheds += amount;\r\n        }\r\n        return gameState;\r\n    }\r\n\r\n    static isValidPurchase(gameState: GameState, amount: number): boolean {\r\n        const currCost = ShedTransaction.getCost(gameState, amount);\r\n        return gameState.resourceState.money >= currCost;\r\n    }\r\n\r\n    static getCost(gameState: GameState, purchaseAmount: number) {\r\n        let sum = 0;\r\n        let theoreticalAmt = gameState.resourceState.sheds || 0;\r\n        for (let i = 0; i < purchaseAmount; i++) {\r\n            sum += 5 + theoreticalAmt * 15;\r\n            theoreticalAmt++;\r\n        }\r\n        return sum;\r\n    }\r\n\r\n    static buildTooltip(gameState: GameState): any {\r\n        return (\r\n            <div className=\"relics-tooltip\">\r\n                <div className=\"relics-tooltip__description\">\r\n                    It turns out we don't need to keep our relics in a pile under a tarp.\r\n                    <br/>+50 relic storage.\r\n                </div>\r\n                <div className=\"relics-tooltip__cost\">\r\n                    <div className={\"money-text\"}>Money: {ShedTransaction.getCost(gameState, 1)}</div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","import {safeResource, Transaction} from \"../Transaction\";\r\nimport {GameState} from \"../../core/game-state\";\r\nimport React from \"react\";\r\n\r\nexport class BankTransaction extends Transaction{\r\n    updateClock = false;\r\n\r\n    static commitTransaction(gameState: GameState, amount: number): GameState {\r\n        if(BankTransaction.isValidPurchase(gameState, amount)) {\r\n            const currCost = BankTransaction.getCost(gameState, amount);\r\n\r\n            gameState.resourceState.money -= currCost;\r\n            gameState.resourceState.banks = safeResource(gameState.resourceState.banks) + amount;\r\n        }\r\n        return gameState;\r\n    }\r\n\r\n    static isValidPurchase(gameState: GameState, amount: number): boolean {\r\n        const currCost = BankTransaction.getCost(gameState, amount);\r\n        return gameState.resourceState.money >= currCost;\r\n    }\r\n\r\n    static getCost(gameState: GameState, purchaseAmount: number) {\r\n        let sum = 0;\r\n        let theoreticalAmt = gameState.resourceState.banks || 0;\r\n        for (let i = 0; i < purchaseAmount; i++) {\r\n            sum += 20 + theoreticalAmt * 20;\r\n            theoreticalAmt++;\r\n        }\r\n        return sum;\r\n    }\r\n\r\n    static buildTooltip(gameState: GameState): any {\r\n        return (\r\n            <div className=\"relics-tooltip\">\r\n                <div className=\"relics-tooltip__description\">\r\n                    It takes money to store money.\r\n                    <br/>+50 money cap.\r\n                </div>\r\n                <div className=\"relics-tooltip__cost\">\r\n                    <div className={\"money-text\"}>Money: {BankTransaction.getCost(gameState, 1)}</div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","import * as React from \"react\";\r\nimport { GameState } from \"../core/game-state\";\r\nimport {StudentTransaction} from \"../economy/transactions/studentTransaction\";\r\nimport {\r\n    assignGatherers,\r\n    assignGiftShop,\r\n    countAvailableStudents,\r\n    removeGatherers,\r\n    removeGiftShop\r\n} from \"../economy/jobAssignments\";\r\nimport {RelicsButton} from \"../shared/relicsButton\";\r\nimport {AssignWorkerOptions} from \"../shared/AssignWorkerOptions\";\r\nimport {ShedTransaction} from \"../economy/transactions/shedTransaction\";\r\nimport {BankTransaction} from \"../economy/transactions/bankTransaction\";\r\n\r\ntype RelicProps = {\r\n    gameState: GameState,\r\n    onPurchase: any,\r\n    onAddCurrency: any\r\n}\r\n\r\nexport class RelicPanel extends React.Component<RelicProps> {\r\n\r\n    render() {\r\n        const { gameState, onAddCurrency, onPurchase } = this.props;\r\n        const availableStudents = countAvailableStudents(gameState);\r\n        const studentsHired = gameState.resourceState.students >= 1;\r\n\r\n        return (\r\n            <div className=\"panel--left-align\">\r\n                <div className=\"button-container\">\r\n                    <RelicsButton onClick={() => onAddCurrency(\"relics\", 1)}>Look for relics</RelicsButton>\r\n                </div>\r\n                {studentsHired &&\r\n                    <div className=\"panel__assignments-container\">\r\n                        <h2>Job Assignments</h2>\r\n                        <AssignWorkerOptions\r\n                            assignWorkers={(amount: number) => assignGatherers(amount, this.props.gameState)}\r\n                            removeWorkers={(amount:number) => removeGatherers(amount, this.props.gameState)}\r\n                            currentlyAssigned={gameState.jobAssignments.gatherRelics}\r\n                            availableWorkers={availableStudents}>\r\n                            Gather Relics\r\n                        </AssignWorkerOptions>\r\n\r\n                        {gameState.researchState.tours &&\r\n                            <div>\r\n                                <AssignWorkerOptions\r\n                                    assignWorkers={(amount: number) => assignGiftShop(amount, this.props.gameState)}\r\n                                    removeWorkers={(amount:number) => removeGiftShop(amount, this.props.gameState)}\r\n                                    currentlyAssigned={gameState.jobAssignments.giftShop}\r\n                                    availableWorkers={availableStudents}\r\n                                >\r\n                                    Gift Shop\r\n                                </AssignWorkerOptions>\r\n                            </div>\r\n                        }\r\n                    </div>\r\n                }\r\n                <br/>\r\n                <div>\r\n                    <div className=\"button-container\">\r\n                        <RelicsButton\r\n                                disabled={!StudentTransaction.isValidPurchase(gameState, 1)}\r\n                                onClick={() => onPurchase(1, StudentTransaction.commitTransaction)}\r\n                                id=\"hireStudent\"\r\n                                tooltip={StudentTransaction.buildTooltip(gameState)}\r\n                        >\r\n                            Hire a Student\r\n                        </RelicsButton>\r\n                    </div>\r\n                    {gameState.researchState.profiteering && <p>Buildings:</p> }\r\n                    {gameState.researchState.profiteering &&\r\n                        <RelicsButton\r\n                            disabled={!ShedTransaction.isValidPurchase(gameState, 1)}\r\n                            onClick={() => onPurchase(1, ShedTransaction.commitTransaction)}\r\n                            id=\"shed\"\r\n                            tooltip={ShedTransaction.buildTooltip(gameState)}\r\n                        >\r\n                            Storage Shed: {gameState.resourceState.sheds}\r\n                        </RelicsButton>\r\n                    }\r\n                    {gameState.researchState.banksOpen &&\r\n                        <RelicsButton\r\n                            disabled={!BankTransaction.isValidPurchase(gameState, 1)}\r\n                            onClick={() => onPurchase(1, BankTransaction.commitTransaction)}\r\n                            id=\"banks\"\r\n                            tooltip={BankTransaction.buildTooltip(gameState)}\r\n                        >\r\n                            Company Banks: {gameState.resourceState.banks}\r\n                        </RelicsButton>\r\n                    }\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","import React from \"react\";\r\n\r\nexport const themes = {\r\n    light: {\r\n        themeClass: 'app app--light',\r\n    },\r\n    dark: {\r\n        themeClass: 'app app--dark',\r\n    },\r\n};\r\n\r\nexport const ThemeContext = React.createContext({\r\n    theme: themes.dark, // default value\r\n    toggleTheme: () => {\r\n    },\r\n});","import {GameState, SettingsState} from \"../core/game-state\";\r\nimport {ThemeContext} from \"../layout/theme-context\";\r\nimport React from \"react\";\r\nimport {RelicsButton} from \"../shared/relicsButton\";\r\nimport {exportSave, importSave} from \"../core/saveService\";\r\nimport {PATCH_NOTES_KEY} from \"../config/constants\";\r\n\r\ntype SettingsProps = {\r\n    gameState: GameState,\r\n    onSave: any,\r\n    onClearSave: any,\r\n    onImportSave: any,\r\n    onChangePanel: any,\r\n}\r\n\r\ntype SaveDataState = {\r\n    saveString: string,\r\n    displayExport: boolean\r\n}\r\n\r\nexport class Settings extends React.Component<SettingsProps, SaveDataState> {\r\n    readonly state: SaveDataState;\r\n\r\n    constructor(props: SettingsProps) {\r\n        super(props)\r\n        this.state = {\r\n            saveString: \"\",\r\n            displayExport: false,\r\n        }\r\n    }\r\n\r\n    onToggleTheme(toggleTheme: any) {\r\n        const { gameState } = this.props;\r\n        gameState.settings.darkMode = !gameState.settings.darkMode;\r\n        toggleTheme();\r\n    }\r\n\r\n    tryImportSave() {\r\n        const save = importSave();\r\n        this.props.onImportSave(save);\r\n    }\r\n\r\n    onExport() {\r\n        this.setState({\r\n            displayExport: true,\r\n            saveString: exportSave(this.props.gameState)\r\n        });\r\n    }\r\n\r\n    render() {\r\n        const {onSave, onClearSave} = this.props;\r\n\r\n        return (\r\n            <div>\r\n                <div className={\"button-container\"}>\r\n                    <p>The game saves automatically every 30s.</p>\r\n                    <RelicsButton onClick={() => onSave()}>Save</RelicsButton>\r\n                    <RelicsButton onClick={() => onClearSave()}>Clear Save</RelicsButton>\r\n                    <br/>\r\n                </div>\r\n                <div className={\"button-container bottom-border\"}>\r\n                    <RelicsButton onClick={() => this.tryImportSave()}>Import</RelicsButton>\r\n                    <RelicsButton onClick={() => this.onExport()}>Export</RelicsButton>\r\n                    <br/><br/>\r\n                    {this.state.displayExport && (\r\n                        <div>\r\n                            Copy and save the text below.\r\n                            <div className=\"settings__export-text\"><textarea className=\"settings__export-text\">{this.state.saveString}</textarea></div>\r\n                        </div>\r\n                    )}\r\n                </div>\r\n                <div>\r\n                    <ThemeContext.Consumer>\r\n                        {({theme, toggleTheme}) => (\r\n                            <div className={\"button-container\"}>\r\n                                <RelicsButton onClick={() => this.onToggleTheme(toggleTheme)}>\r\n                                    Toggle Dark Mode\r\n                                </RelicsButton>\r\n                            </div>\r\n                        )}\r\n                    </ThemeContext.Consumer>\r\n                </div>\r\n                <p>Relics - A game by bearhanded.</p>\r\n                <p><a href=\"https://github.com/bearhanded/relics\">GitHub</a></p>\r\n                <p><RelicsButton onClick={() => this.props.onChangePanel(PATCH_NOTES_KEY)}>Patch Notes</RelicsButton></p>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","import {GameState} from \"./game-state\";\r\nimport {addDetailedJournalEntry, addJournalEntry, BLOOD_ENTRY_TYPE} from \"./journal\";\r\nimport {countAvailableStudents, removeGatherers, removeGiftShop, removeStudyRelics} from \"../economy/jobAssignments\";\r\nimport {safeResource} from \"../economy/Transaction\";\r\nimport {formatRateNumber} from \"../shared/formatNumbers\";\r\n\r\nexport function randomEventsForDuration(gameState: GameState, amount: number) {\r\n    for (let i = 0; i < amount; i++) {\r\n        randomEvent(gameState);\r\n    }\r\n}\r\n\r\nexport function randomEvent(gameState: GameState) {\r\n    const diceRoll = roll1d100();\r\n    if(diceRoll >= 95) {\r\n        addJournalEntry(gameState, \"The wind blows across the dusty plain\");\r\n    }\r\n    if( 10 < diceRoll && diceRoll <= 15) {\r\n        addJournalEntry(gameState, \"A stranger shuffles up and hands something to you: +100 Relics!\");\r\n        gameState.resourceState.relics += 100\r\n    }\r\n\r\n    // Likelihood and damage of a blood event\r\n    let dreadEventChance = Math.log10(gameState.resourceState.blood);\r\n    let bloodLoss = gameState.resourceState.blood*.8; // Expected value to lose in a bad event\r\n    bloodLoss = Math.max(bloodLoss, 1);\r\n    if(dreadEventChance > 10) dreadEventChance = 10;\r\n    if(dreadEventChance < 1) dreadEventChance = 1;\r\n    gameState.resourceState.bloodLoss = bloodLoss;\r\n    gameState.resourceState.bloodChance = dreadEventChance;\r\n\r\n    if(diceRoll <= dreadEventChance && gameState.resourceState.students > 2) {\r\n        // A dark event occurs, protect with blood\r\n        // Mitigate risk & loss\r\n        if(gameState.researchState.bloodWard && gameState.resourceState.blood >= bloodLoss) {\r\n            const journalEntry = ((dreadEventChance >= 5 ) ? \"Your hoarding of blood attracts something sinister.\": \"\")\r\n                + `The ward protects a student in exchange for ${bloodLoss.toFixed()} blood.`;\r\n            gameState.resourceState.blood = safeResource(gameState.resourceState.blood) - bloodLoss;\r\n            addDetailedJournalEntry(gameState, {\r\n                entry: journalEntry,\r\n                entryType: BLOOD_ENTRY_TYPE,\r\n            });\r\n        }\r\n        else  {\r\n            if (countAvailableStudents(gameState) <= 0) {\r\n                if (gameState.jobAssignments.gatherRelics >= 1) {\r\n                    removeGatherers(1, gameState);\r\n                } else if (gameState.jobAssignments.studyRelics >= 1) {\r\n                    removeStudyRelics(1, gameState);\r\n                } else if (gameState.jobAssignments.studyRelics >= 1) {\r\n                    removeGiftShop(1, gameState);\r\n                }\r\n            }\r\n            gameState.resourceState.blood = safeResource(gameState.resourceState.blood) + 1;\r\n            gameState.resourceState.students -= 1;\r\n\r\n            addDetailedJournalEntry(gameState, {\r\n                entry: \"A shout in the dark. You are short one student.\",\r\n                entryType: BLOOD_ENTRY_TYPE,\r\n            });\r\n        }\r\n    }\r\n}\r\n\r\nfunction roll1d100() {\r\n    return Math.floor(Math.random() * 100 + 1);\r\n}\r\n","import {saveGame} from \"./saveService\";\r\nimport {GameState} from \"./game-state\";\r\nimport {\r\n    TICK_SPEED,\r\n    SECONDS_PER_EVENT_CHECK,\r\n    BASE_RELIC_CAP,\r\n    BASE_MONEY_CAP,\r\n    BASE_KNOWLEDGE_CAP\r\n} from \"../config/constants\";\r\nimport {randomEventsForDuration} from \"./event-manager\";\r\nimport {safeResource} from \"../economy/Transaction\";\r\n\r\nexport class GameClock {\r\n    saveClockId: any;\r\n    resourceClockId: any;\r\n    gameState: GameState; // Not readonly, we're emitting the changes for the rest of the app\r\n    tickRatio: number; // Modified each pass of the clock so that we can deal with running in the background\r\n    emitTick: any;\r\n    maxTicks: number;\r\n    lastTickDate: Date;\r\n    randomEventTimer = 0;\r\n\r\n    constructor(gameState: GameState, onTick: any) {\r\n        this.saveClockId = setInterval(\r\n            () => saveGame(gameState),\r\n            30000\r\n        );\r\n        this.gameState = gameState;\r\n        this.updateState(gameState);\r\n        this.tickRatio = TICK_SPEED / 1000; // Default: 50ms / 1000ms, multiply by how many per second you want\r\n        this.maxTicks = (5 * 1000) / TICK_SPEED;\r\n        this.emitTick = onTick;\r\n        this.lastTickDate = new Date(gameState.saveTime); //Easy offline progress solution?\r\n    }\r\n\r\n    private calibrate() {\r\n        const tickTimeStamp = new Date();\r\n        const seconds = (tickTimeStamp.getTime() - this.lastTickDate.getTime()) / 1000;\r\n        this.lastTickDate = tickTimeStamp;\r\n        this.tickRatio = seconds;\r\n        this.randomEventTimer += seconds;\r\n    }\r\n\r\n    private manageRandomEvent(newState: GameState) {\r\n        if(this.randomEventTimer >= SECONDS_PER_EVENT_CHECK ) {\r\n            // every 5s, test for an event\r\n\r\n            randomEventsForDuration(newState, Math.floor(this.randomEventTimer / SECONDS_PER_EVENT_CHECK));\r\n            this.randomEventTimer = 0;\r\n        }\r\n    }\r\n\r\n    tick() {\r\n        this.calibrate();\r\n        const newState = {...this.gameState};\r\n\r\n        // Rates & Stats\r\n        let relicsPerSecond = 0;\r\n        let knowledgePerSecond = 0;\r\n        let moneyPerSecond = 0;\r\n        let bloodPerSecond = 0;\r\n\r\n        // Calculate rates and side effects\r\n        if(this.gameState.jobAssignments.gatherRelics) {\r\n            const relicsMultiplier = 1\r\n                + (this.gameState.researchState.betterShovels ? .5 : 0)\r\n                + (this.gameState.researchState.searchAlgorithms ? .5 : 0);\r\n            relicsPerSecond = this.gameState.jobAssignments.gatherRelics*.5*relicsMultiplier;\r\n        }\r\n        if(this.gameState.jobAssignments.studyRelics && this.gameState.resourceState.relics >= this.gameState.jobAssignments.gatherRelics*10*this.tickRatio) {\r\n            const relicConsumptionRate = this.gameState.jobAssignments.studyRelics*10;\r\n            relicsPerSecond -= relicConsumptionRate;\r\n            knowledgePerSecond = this.gameState.jobAssignments.studyRelics*.1;\r\n        }\r\n        if(this.gameState.researchState.profiteering) {\r\n            moneyPerSecond = .25;\r\n            if(this.gameState.jobAssignments.giftShop) {\r\n                const requiredRelicConsumption = this.gameState.jobAssignments.giftShop*2.5;\r\n                if(this.gameState.resourceState.relics >= requiredRelicConsumption) {\r\n                    moneyPerSecond += this.gameState.jobAssignments.giftShop * .125;\r\n                    relicsPerSecond -= requiredRelicConsumption;\r\n                }\r\n            }\r\n        }\r\n        bloodPerSecond = 0;\r\n        bloodPerSecond += safeResource(this.gameState.resourceState.bleedingStones)*.2;\r\n\r\n        // Apply rates to resources\r\n        newState.resourceState.money     += moneyPerSecond      *this.tickRatio;\r\n        newState.resourceState.relics    += relicsPerSecond     *this.tickRatio;\r\n        newState.resourceState.knowledge += knowledgePerSecond  *this.tickRatio;\r\n        newState.resourceState.blood     += bloodPerSecond      *this.tickRatio;\r\n\r\n        // Apply caps\r\n        const relicCap = BASE_RELIC_CAP + this.gameState.resourceState.sheds*50;\r\n        if(newState.resourceState.relics >= relicCap) newState.resourceState.relics = relicCap;\r\n        newState.resourceState.relicCap = relicCap;\r\n\r\n        let moneyCap = BASE_MONEY_CAP;\r\n        if(newState.researchState.banksOpen) moneyCap += 50;\r\n        if(newState.resourceState.banks > 0) moneyCap += newState.resourceState.banks * 50;\r\n        if(newState.resourceState.money >= moneyCap) newState.resourceState.money = moneyCap;\r\n        newState.resourceState.moneyCap = moneyCap;\r\n\r\n        let knowledgeCap = BASE_KNOWLEDGE_CAP + this.gameState.resourceState.students*5;\r\n        if(newState.resourceState.knowledge >= knowledgeCap) newState.resourceState.knowledge = knowledgeCap;\r\n        newState.resourceState.knowledgeCap = knowledgeCap;\r\n\r\n        // Aggregate stats\r\n        newState.resourceState.relicRate     = relicsPerSecond;\r\n        newState.resourceState.moneyRate     = moneyPerSecond;\r\n        newState.resourceState.knowledgeRate = knowledgePerSecond;\r\n        newState.resourceState.bloodRate     = bloodPerSecond;\r\n\r\n        // Kick off any events that have transpired\r\n        this.manageRandomEvent(newState);\r\n\r\n        // Save and output\r\n        this.gameState = newState;\r\n        this.emitTick(newState);\r\n    }\r\n\r\n    updateState(gameState: GameState) {\r\n        clearInterval(this.resourceClockId);\r\n        this.resourceClockId = setInterval(() => this.tick(), TICK_SPEED);\r\n    }\r\n\r\n    clearClock() {\r\n        clearInterval(this.resourceClockId);\r\n        clearInterval(this.saveClockId);\r\n    }\r\n\r\n\r\n}\r\n","import * as React from \"react\";\r\nimport {JournalState} from \"../core/game-state\";\r\nimport {RelicsButton} from \"../shared/relicsButton\";\r\nimport {ACHIEVEMENT_ENTRY_TYPE, BLOOD_ENTRY_TYPE, COMMON_ENTRY_TYPE, DetailedEntry} from \"../core/journal\";\r\n\r\ntype JournalProps = {\r\n    journalState: JournalState,\r\n    clearLog: any\r\n}\r\n\r\nexport class AdventureLog extends React.Component<JournalProps> {\r\n    getClassName(entry: DetailedEntry) {\r\n        let className = \"padded-text journal__entry\";\r\n        switch (entry.entryType) {\r\n            case ACHIEVEMENT_ENTRY_TYPE:\r\n                className += \" journal__entry--achievement\";\r\n                break;\r\n            case BLOOD_ENTRY_TYPE:\r\n                className += \" blood-text\";\r\n                break;\r\n            case COMMON_ENTRY_TYPE:\r\n            default:\r\n        }\r\n        return className;\r\n    }\r\n\r\n    render() {\r\n        const { journalState, clearLog } = this.props;\r\n        const entryList = journalState.entries.slice(0).reverse().map((entry) =>\r\n            <div className={this.getClassName(entry)}>\r\n                {entry.entry}\r\n            </div>\r\n        );\r\n        return (\r\n            <div className=\"panel--left-align journal-panel\">\r\n                <div className=\"button-container\">\r\n                    <RelicsButton onClick={() => clearLog()}>Clear Log</RelicsButton>\r\n                </div>\r\n                <div className=\"journal\">{entryList}</div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","import * as React from \"react\";\r\nimport { GameState } from \"../core/game-state\";\r\nimport {countAvailableStudents} from \"../economy/jobAssignments\";\r\nimport {formatRateNumber} from \"../shared/formatNumbers\";\r\n\r\ntype ResourceProps = {\r\n    gameState: GameState,\r\n}\r\n\r\ntype ResourcePanelEntryProps = {\r\n    rate?: number;\r\n    cap?: number;\r\n    className?: string;\r\n}\r\n\r\nexport class ResourcePanelEntry extends React.Component<ResourcePanelEntryProps> {\r\n    render() {\r\n        let rateText = \"\";\r\n        const renderRate = this.props.rate !== undefined && this.props.rate !== 0;\r\n        if(this.props.rate !== undefined) rateText = formatRateNumber(this.props.rate) + \"/s\"; // ts has a conniption without the IF\r\n        const renderCap = this.props.cap !== undefined && this.props.cap !== 0;\r\n\r\n        return (\r\n            <div className=\"resources__entry\">\r\n                <div className={this.props.className}>\r\n                    {this.props.children}\r\n                    {renderCap && (\r\n                        <span className=\"resources__rate\">/{this.props.cap}</span>\r\n                    )}\r\n                </div>\r\n                <div className=\"resources__rate\">{renderRate && rateText}</div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\nexport class ResourcePanel extends React.Component<ResourceProps> {\r\n    render() {\r\n        const { gameState } = this.props;\r\n\r\n        return (\r\n            <div>\r\n                <div className=\"panel--center-align resources__container\">\r\n                    {!!gameState.resourceState.relics &&\r\n                        <ResourcePanelEntry rate={gameState.resourceState.relicRate}\r\n                                            cap={gameState.resourceState.relicCap}>\r\n                            Relics: {gameState.resourceState.relics.toFixed()}\r\n                        </ResourcePanelEntry>}\r\n                    {gameState.researchState.profiteering &&\r\n                        <ResourcePanelEntry className=\"money-text\" rate={gameState.resourceState.moneyRate}\r\n                                            cap={gameState.resourceState.moneyCap}>\r\n                            Money: {gameState.resourceState.money.toFixed()}\r\n                        </ResourcePanelEntry>}\r\n                    {gameState.achievements.labUnlocked &&\r\n                        <ResourcePanelEntry className=\"knowledge-text\" rate={gameState.resourceState.knowledgeRate}\r\n                                            cap={gameState.resourceState.knowledgeCap}>\r\n                            Knowledge: {gameState.resourceState.knowledge.toFixed()}\r\n                        </ResourcePanelEntry>}\r\n                    {(!!gameState.resourceState.blood || gameState.researchState.bloodWard) &&\r\n                    <ResourcePanelEntry className=\"blood-text\" rate={gameState.resourceState.bloodRate}>\r\n                        Blood: {gameState.resourceState.blood.toFixed()}\r\n                    </ResourcePanelEntry>}\r\n                </div>\r\n                {!!gameState.resourceState.students &&\r\n                    <div className=\"panel--center-align resources__container\">\r\n                        <div>Students: {countAvailableStudents(gameState)}/{gameState.resourceState.students}</div>\r\n                    </div>\r\n                }\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\n","export function formatRateNumber(number: number): string {\r\n    if(number < 1 && number > -1) {\r\n        return number.toLocaleString('en-US', {\r\n            minimumFractionDigits: 1,\r\n            maximumFractionDigits: 3\r\n        })\r\n    }\r\n    return number.toLocaleString('en-US', {\r\n        maximumFractionDigits: 4\r\n    });\r\n}\r\n","import React from \"react\";\r\n\r\ntype NavButtonProps = {\r\n  onClick: any;\r\n  disabled?: any | undefined;\r\n  selected?: boolean | undefined;\r\n}\r\n\r\nexport class NavButton extends React.Component<NavButtonProps> {\r\n\r\n    render() {\r\n        let className = \"nav-button\";\r\n        if(this.props.disabled) className += \" nav-button--disabled\";\r\n        if(this.props.selected) className += \" nav-button--selected\";\r\n\r\n        const clickFunc = this.props.disabled ? () => {} : this.props.onClick;\r\n        return (\r\n            <div\r\n                className={className}\r\n                onClick={clickFunc}>\r\n                {this.props.children}\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","import React from \"react\";\r\nimport {GENERATORS_PANEL_KEY, LAB_KEY, RITUAL_PANEL_KEY, SETTINGS_PANEL_KEY} from \"../config/constants\";\r\nimport {NavButton} from \"./navButton\";\r\nimport {GameState} from \"../core/game-state\";\r\n\r\ntype PanelSelectorProps = {\r\n    onChangePanel: any,\r\n    selected: string,\r\n    gameState: GameState\r\n}\r\nexport class PanelSelector extends React.Component<PanelSelectorProps>{\r\n    render() {\r\n        const {onChangePanel, selected, gameState} = this.props;\r\n        let name = \"Dig Site\";\r\n        return (\r\n            <div className={\"nav-panel button-container\"}>\r\n                <NavButton selected={selected === GENERATORS_PANEL_KEY}\r\n                           onClick={() => onChangePanel(GENERATORS_PANEL_KEY)}>\r\n                    {name}\r\n                </NavButton>\r\n                {(gameState.resourceState.students >= 10 || gameState.achievements.labUnlocked) &&\r\n                    <NavButton selected={selected === LAB_KEY}\r\n                               onClick={() => onChangePanel(LAB_KEY)}>\r\n                        Research Lab\r\n                    </NavButton>\r\n                }\r\n                {(gameState.researchState.ritualCircle) &&\r\n                <NavButton selected={selected === RITUAL_PANEL_KEY}\r\n                           onClick={() => onChangePanel(RITUAL_PANEL_KEY)}>\r\n                    Ritual Chamber\r\n                </NavButton>\r\n                }\r\n\r\n                <NavButton selected={selected === SETTINGS_PANEL_KEY}\r\n                           onClick={() => onChangePanel(SETTINGS_PANEL_KEY)}>\r\n                    Settings\r\n                </NavButton>\r\n\r\n\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","import {GameState} from \"../../core/game-state\";\r\nimport {Transaction} from \"../Transaction\";\r\nimport React from \"react\";\r\n\r\nexport class KnowledgeTransaction extends Transaction {\r\n    static updateClock = false;\r\n\r\n    static commitTransaction(gameState: GameState, amount: number): GameState {\r\n        if(KnowledgeTransaction.isValidPurchase(gameState, amount)) {\r\n            const currCost = KnowledgeTransaction.getCost(gameState, amount);\r\n\r\n            gameState.resourceState.relics -= currCost;\r\n            gameState.resourceState.knowledge += amount;\r\n        }\r\n        return gameState;\r\n    }\r\n\r\n    static isValidPurchase(gameState: GameState, amount: number): boolean {\r\n        const currCost = KnowledgeTransaction.getCost(gameState, amount);\r\n        return gameState.resourceState.relics >= currCost;\r\n    }\r\n\r\n    static getCost(gameState: GameState, purchaseAmount: number) {\r\n        return 100 * purchaseAmount;\r\n    }\r\n\r\n    static buildTooltip(gameState: GameState): any {\r\n        return (\r\n            <div className=\"relics-tooltip\">\r\n                <div className=\"relics-tooltip__description\">\r\n                    Peruse your collection, perhaps you can find something useful.\r\n                </div>\r\n                <div className=\"relics-tooltip__cost\">\r\n                    <div>Relics: 100</div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","import {Research} from \"../Transaction\";\r\nimport {GameState} from \"../../core/game-state\";\r\nimport {ACHIEVEMENT_ENTRY_TYPE, addDetailedJournalEntry} from \"../../core/journal\";\r\nimport React from \"react\";\r\n\r\nexport class BetterShovels extends Research {\r\n    static updateClock = false;\r\n\r\n    static commitTransaction(gameState: GameState, amount: number): GameState {\r\n        if(BetterShovels.isValidPurchase(gameState, amount)) {\r\n            gameState.resourceState.money -= 25;\r\n            gameState.researchState.betterShovels = true;\r\n            addDetailedJournalEntry(gameState, {\r\n                entry: \"+1 Shovel\",\r\n                entryType: ACHIEVEMENT_ENTRY_TYPE\r\n            });\r\n        }\r\n        return gameState;\r\n    }\r\n\r\n    static isValidPurchase(gameState: GameState, amount: number): boolean {\r\n        return gameState.resourceState.money >= 25;\r\n    }\r\n\r\n    static buildTooltip(gameState: GameState): any {\r\n        return (\r\n            <div className=\"relics-tooltip\">\r\n                <div className=\"relics-tooltip__description\">\r\n                    Buy the team their very first shovel. It's better than none.\r\n                    <br/>Student base gathering rate +0.5 relics/s\r\n                </div>\r\n                <div className=\"relics-tooltip__cost\">\r\n                    <div className=\"money-text\">Money: 25</div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    static isAvailable(gameState: GameState): boolean {\r\n        return gameState.researchState.profiteering && !gameState.researchState.betterShovels;\r\n    }\r\n\r\n    static title = \"Better Shovels\";\r\n    static id = \"better-shovels\";\r\n    static className = \"money-button\";\r\n}\r\n","import React from \"react\";\r\nimport {Research} from \"../Transaction\";\r\nimport {GameState} from \"../../core/game-state\";\r\nimport {addDetailedJournalEntry, BLOOD_ENTRY_TYPE} from \"../../core/journal\";\r\n\r\nexport class BloodWard extends Research {\r\n    static updateClock = false;\r\n\r\n    static commitTransaction(gameState: GameState, amount: number): GameState {\r\n        if(BloodWard.isValidPurchase(gameState, amount)) {\r\n            gameState.resourceState.relics -= 100;\r\n            gameState.resourceState.blood -= 1;\r\n            gameState.resourceState.knowledge -= 20;\r\n\r\n            gameState.researchState.bloodWard = true;\r\n            addDetailedJournalEntry(gameState, {\r\n                entry: \"Following instructions on the ruins, you assemble a ward. That should protect this place.\",\r\n                entryType: BLOOD_ENTRY_TYPE\r\n            });\r\n        }\r\n        return gameState;\r\n    }\r\n\r\n    static isValidPurchase(gameState: GameState, amount: number): boolean {\r\n        return gameState.resourceState.blood >= 1 && gameState.resourceState.knowledge >= 20 && gameState.resourceState.relics >= 100;\r\n    }\r\n\r\n    static buildTooltip(gameState: GameState): any {\r\n        return (\r\n            <div className=\"relics-tooltip\">\r\n                <div className=\"relics-tooltip__description\">\r\n                    The excavated ruins are carved with a repeating pattern, and no one has disappeared in there yet.\r\n                </div>\r\n                <div className=\"relics-tooltip__cost\">\r\n                    <div>Relics: 100</div>\r\n                    <div className=\"knowledge-text\">Knowledge: 20</div>\r\n                    <div className=\"blood-text\">Blood: 1</div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    static isAvailable(gameState: GameState): boolean {\r\n        return gameState.researchState.profiteering && !gameState.researchState.bloodWard;\r\n    }\r\n\r\n    static title = \"Inscribe a ward\";\r\n    static id = \"blood-ward\";\r\n    static className = \"blood-button\";\r\n}","import {Research} from \"../Transaction\";\r\nimport {GameState} from \"../../core/game-state\";\r\nimport {ACHIEVEMENT_ENTRY_TYPE, addDetailedJournalEntry} from \"../../core/journal\";\r\nimport React from \"react\";\r\n\r\nexport class Profit extends Research {\r\n    static updateClock = false;\r\n\r\n    static commitTransaction(gameState: GameState, amount: number): GameState {\r\n        if(Profit.isValidPurchase(gameState, amount)) {\r\n            gameState.resourceState.knowledge -= 10;\r\n            gameState.researchState.profiteering = true;\r\n            addDetailedJournalEntry(gameState, {\r\n                entry: \"A patron finds your work interesting, and provides a slow but steady drip of funding.\",\r\n                entryType: ACHIEVEMENT_ENTRY_TYPE\r\n            });\r\n        }\r\n        return gameState;\r\n    }\r\n\r\n    static isValidPurchase(gameState: GameState, amount: number): boolean {\r\n        return gameState.resourceState.knowledge >= 10;\r\n    }\r\n\r\n    static buildTooltip(gameState: GameState): any {\r\n        return (\r\n            <div className=\"relics-tooltip\">\r\n                <div className=\"relics-tooltip__description\">\r\n                    With your student's help, you know enough now to fund this endeavor.\r\n                    A little embellishment never hurt...\r\n                </div>\r\n                <div className=\"relics-tooltip__cost\">\r\n                    <div className=\"knowledge-text\">Knowledge: 10</div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    static isAvailable(gameState: GameState): boolean {\r\n        return gameState.researchState.studentKnowledge && !gameState.researchState.profiteering;\r\n    }\r\n\r\n    static title = \"Procure Funding\";\r\n    static id = \"profiteering\";\r\n    static className = \"money-button\";\r\n}","import {Research} from \"../Transaction\";\r\nimport {GameState} from \"../../core/game-state\";\r\nimport React from \"react\";\r\n\r\nexport class StudentKnowledge extends Research {\r\n    static updateClock = false;\r\n\r\n    static commitTransaction(gameState: GameState, amount: number): GameState {\r\n        if(StudentKnowledge.isValidPurchase(gameState, amount)) {\r\n            gameState.resourceState.knowledge -= 5;\r\n            gameState.researchState.studentKnowledge = true;\r\n        }\r\n        return gameState;\r\n    }\r\n\r\n    static isValidPurchase(gameState: GameState, amount: number): boolean {\r\n        return gameState.resourceState.knowledge >= 5;\r\n    }\r\n\r\n    static buildTooltip(gameState: GameState): any {\r\n        return (\r\n            <div className=\"relics-tooltip\">\r\n                <div className=\"relics-tooltip__description\">\r\n                    I know enough about this to teach others to do the work, albeit at a reduced efficiency.\r\n                </div>\r\n                <div className=\"relics-tooltip__cost\">\r\n                    <div className=\"knowledge-text\">Knowledge: 5</div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n    static isAvailable(gameState: GameState): boolean {\r\n        return !gameState.researchState.studentKnowledge;\r\n    }\r\n\r\n    static title = \"Studious Students\";\r\n    static id = \"student-knowledge\";\r\n    static className = \"knowledge-button\";\r\n}\r\n","import {Research} from \"../Transaction\";\r\nimport {GameState} from \"../../core/game-state\";\r\nimport React from \"react\";\r\n\r\nexport class MapTheRuins extends Research {\r\n    static updateClock = false;\r\n\r\n    static commitTransaction(gameState: GameState, amount: number): GameState {\r\n        if(MapTheRuins.isValidPurchase(gameState, amount)) {\r\n            gameState.resourceState.knowledge -= 1;\r\n            gameState.researchState.mapTheGrounds = true;\r\n        }\r\n        return gameState;\r\n    }\r\n\r\n    static isValidPurchase(gameState: GameState, amount: number): boolean {\r\n        return gameState.resourceState.knowledge >= 1;\r\n    }\r\n\r\n    static buildTooltip(gameState: GameState): any {\r\n        return (\r\n            <div className=\"relics-tooltip\">\r\n                <div className=\"relics-tooltip__description\">\r\n                    These relics seem to be found near a few particular features.\r\n                    <br/>Increases manual base relic search rate by 1.\r\n                </div>\r\n                <div className=\"relics-tooltip__cost\">\r\n                    <div className=\"knowledge-text\">Knowledge: 1</div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n    static isAvailable(gameState: GameState): boolean {\r\n        return !gameState.researchState.mapTheGrounds;\r\n    }\r\n\r\n    static title = \"Map the Ruins\";\r\n    static id = \"map-ruins\";\r\n    static className = \"knowledge-button\";\r\n}\r\n","import {Research} from \"../Transaction\";\r\nimport {GameState} from \"../../core/game-state\";\r\nimport {ACHIEVEMENT_ENTRY_TYPE, addDetailedJournalEntry, COMMON_ENTRY_TYPE} from \"../../core/journal\";\r\nimport React from \"react\";\r\n\r\nexport class Tours extends Research {\r\n    static updateClock = false;\r\n\r\n    static commitTransaction(gameState: GameState, amount: number): GameState {\r\n        if(Tours.isValidPurchase(gameState, amount)) {\r\n            gameState.resourceState.knowledge -= 25;\r\n            gameState.researchState.tours = true;\r\n            addDetailedJournalEntry(gameState, {\r\n                entry: \"Wait, people will pay to see this place? \" +\r\n                    \"Your students begin offering tours and open a gift shop.\",\r\n                entryType: COMMON_ENTRY_TYPE\r\n            });\r\n        }\r\n        return gameState;\r\n    }\r\n\r\n    static isValidPurchase(gameState: GameState, amount: number): boolean {\r\n        return gameState.resourceState.knowledge >= 25;\r\n    }\r\n\r\n    static buildTooltip(gameState: GameState): any {\r\n        return (\r\n            <div className=\"relics-tooltip\">\r\n                <div className=\"relics-tooltip__description\">\r\n                    You form a committee of students to think very hard about how to make more money.\r\n                </div>\r\n                <div className=\"relics-tooltip__cost\">\r\n                    <div className=\"knowledge-text\">Knowledge: 25</div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    static isAvailable(gameState: GameState): boolean {\r\n        return gameState.researchState.profiteering && !gameState.researchState.tours;\r\n    }\r\n\r\n    static title = \"More funding\";\r\n    static id = \"tours\";\r\n    static className = \"money-button\";\r\n}\r\n","import {Research} from \"../Transaction\";\r\nimport {GameState} from \"../../core/game-state\";\r\nimport {ACHIEVEMENT_ENTRY_TYPE, addDetailedJournalEntry} from \"../../core/journal\";\r\nimport React from \"react\";\r\n\r\nexport class Banks extends Research {\r\n    static updateClock = false;\r\n\r\n    static commitTransaction(gameState: GameState, amount: number): GameState {\r\n        if(Banks.isValidPurchase(gameState, amount)) {\r\n            gameState.resourceState.knowledge -= 20;\r\n            gameState.resourceState.money -= 20;\r\n            gameState.researchState.banksOpen = true;\r\n        }\r\n        addDetailedJournalEntry(gameState, {\r\n            entry: \"+50 money cap\",\r\n            entryType: ACHIEVEMENT_ENTRY_TYPE\r\n        });\r\n        return gameState;\r\n    }\r\n\r\n    static isValidPurchase(gameState: GameState, amount: number): boolean {\r\n        return gameState.resourceState.knowledge >= 20\r\n            && gameState.resourceState.money >= 30;\r\n    }\r\n\r\n    static buildTooltip(gameState: GameState): any {\r\n        return (\r\n            <div className=\"relics-tooltip\">\r\n                <div className=\"relics-tooltip__description\">\r\n                    We have a load of money and no way to have more loads of money.\r\n                    <br/>Increase money cap +50 and unlock a way to do it more.\r\n                </div>\r\n                <div className=\"relics-tooltip__cost\">\r\n                    <div className=\"money-text\">Money: 30</div>\r\n                    <div className=\"knowledge-text\">Knowledge: 20</div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    static isAvailable(gameState: GameState): boolean {\r\n        return gameState.researchState.tours && !gameState.researchState.banksOpen;\r\n    }\r\n\r\n    static title = \"Bigger Wallets\";\r\n    static id = \"banks\";\r\n    static className = \"money-button\";\r\n}","import {Research} from \"../Transaction\";\r\nimport {GameState} from \"../../core/game-state\";\r\nimport {ACHIEVEMENT_ENTRY_TYPE, addDetailedJournalEntry} from \"../../core/journal\";\r\nimport React from \"react\";\r\n\r\nexport class RitualCircle extends Research {\r\n    static updateClock = false;\r\n\r\n    static commitTransaction(gameState: GameState, amount: number): GameState {\r\n        if(RitualCircle.isValidPurchase(gameState, amount)) {\r\n            gameState.resourceState.knowledge -= 50;\r\n            gameState.resourceState.relics -= 250;\r\n\r\n            gameState.researchState.ritualCircle = true;\r\n            addDetailedJournalEntry(gameState, {\r\n                entry: \"You paint a circle on the ground, interlaced with arcane script. What wonders will you create here?\",\r\n                entryType: ACHIEVEMENT_ENTRY_TYPE\r\n            });\r\n        }\r\n        return gameState;\r\n    }\r\n\r\n    static isValidPurchase(gameState: GameState, amount: number): boolean {\r\n        return gameState.resourceState.knowledge >= 50\r\n            && gameState.resourceState.relics >= 250;\r\n    }\r\n\r\n    static buildTooltip(gameState: GameState): any {\r\n        return (\r\n            <div className=\"relics-tooltip\">\r\n                <div className=\"relics-tooltip__description\">\r\n                    Set aside a location and prepare it for incantations. You must find a way to protect your work.\r\n                    <br/>Unlocks the Ritual Chamber.\r\n                </div>\r\n                <div className=\"relics-tooltip__cost\">\r\n                    <div className=\"knowledge-text\">Knowledge: 50</div>\r\n                    <div>Relics: 250</div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    static isAvailable(gameState: GameState): boolean {\r\n        return gameState.researchState.bloodWard && !gameState.researchState.ritualCircle;\r\n    }\r\n\r\n    static title = \"Ritual Chamber\";\r\n    static id = \"ritual-chamber\";\r\n    static className = \"knowledge-button\";\r\n}\r\n","import {Research} from \"../Transaction\";\r\nimport {GameState} from \"../../core/game-state\";\r\nimport {ACHIEVEMENT_ENTRY_TYPE, addDetailedJournalEntry} from \"../../core/journal\";\r\nimport React from \"react\";\r\n\r\nexport class SearchAlgorithms extends Research {\r\n    static updateClock = false;\r\n\r\n    static commitTransaction(gameState: GameState, amount: number): GameState {\r\n        if(SearchAlgorithms.isValidPurchase(gameState, amount)) {\r\n            gameState.resourceState.money -= 25;\r\n            gameState.researchState.searchAlgorithms = true;\r\n            addDetailedJournalEntry(gameState, {\r\n                entry: \"The students look like idiots out there, but the results don't lie. +0.5 base relics/s\",\r\n                entryType: ACHIEVEMENT_ENTRY_TYPE\r\n            });\r\n        }\r\n        return gameState;\r\n    }\r\n\r\n    static isValidPurchase(gameState: GameState, amount: number): boolean {\r\n        return gameState.resourceState.knowledge >= 30 && gameState.resourceState.relics >= 200;\r\n    }\r\n\r\n    static buildTooltip(gameState: GameState): any {\r\n        return (\r\n            <div className=\"relics-tooltip\">\r\n                <div className=\"relics-tooltip__description\">\r\n                    Teach the students how to search more efficiently. It works for you but it might just be confirmation bias.\r\n                    <br/>Student base gathering rate +0.5 relics/s\r\n                </div>\r\n                <div className=\"relics-tooltip__cost\">\r\n                    <div className=\"knowledge-text\">Knowledge: 30</div>\r\n                    <div>Relics: 200</div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    static isAvailable(gameState: GameState): boolean {\r\n        return gameState.researchState.betterShovels && !gameState.researchState.searchAlgorithms;\r\n    }\r\n\r\n    static title = \"Search Algorithms\";\r\n    static id = \"search-algorithms\";\r\n    static className = \"knowledge-button\";\r\n}\r\n","import {Research} from \"../Transaction\";\r\nimport {GameState} from \"../../core/game-state\";\r\nimport {ACHIEVEMENT_ENTRY_TYPE, addDetailedJournalEntry, BLOOD_ENTRY_TYPE} from \"../../core/journal\";\r\nimport React from \"react\";\r\n\r\nexport class BloodMeter extends Research {\r\n    static updateClock = false;\r\n\r\n    static commitTransaction(gameState: GameState, amount: number): GameState {\r\n        if(BloodMeter.isValidPurchase(gameState, amount)) {\r\n            gameState.resourceState.blood -= 20;\r\n            gameState.resourceState.knowledge -= 20;\r\n            gameState.resourceState.relics -= 20\r\n            gameState.researchState.bloodMeter = true;\r\n            addDetailedJournalEntry(gameState, {\r\n                entry: \"You mount a meter to measure the pending danger in the Ritual Chamber\",\r\n                entryType: BLOOD_ENTRY_TYPE\r\n            });\r\n        }\r\n        return gameState;\r\n    }\r\n\r\n    static isValidPurchase(gameState: GameState, amount: number): boolean {\r\n        return gameState.resourceState.blood >= 20 && gameState.resourceState.knowledge >= 20 && gameState.resourceState.relics >= 20;\r\n    }\r\n\r\n    static buildTooltip(gameState: GameState): any {\r\n        return (\r\n            <div className=\"relics-tooltip\">\r\n                <div className=\"relics-tooltip__description\">\r\n                    Perhaps we can prepare, or at least gauge the threats in the shadow.\r\n                    <br/>Build an interesting meter for the Ritual Chamber.\r\n                </div>\r\n                <div className=\"relics-tooltip__cost\">\r\n                    <div className=\"blood-text\">Blood: 20</div>\r\n                    <div className=\"knowledge-text\">Knowledge: 20</div>\r\n                    <div>Relics: 20</div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    static isAvailable(gameState: GameState): boolean {\r\n        return gameState.researchState.ritualCircle && !gameState.researchState.bloodMeter;\r\n    }\r\n\r\n    static title = \"Blood Meter\";\r\n    static id = \"blood-meter\";\r\n    static className = \"blood-button\";\r\n}\r\n","import {GameState} from \"../core/game-state\";\r\nimport {Research} from \"./Transaction\";\r\nimport {BetterShovels} from \"./research/betterShovels\";\r\nimport {BloodWard} from \"./research/bloodWard\";\r\nimport {Profit} from \"./research/profit\";\r\nimport {StudentKnowledge} from \"./research/studentKnowledge\";\r\nimport {MapTheRuins} from \"./research/mapTheRuins\";\r\nimport {Tours} from \"./research/tours\";\r\nimport {Banks} from \"./research/banks\";\r\nimport {RitualCircle} from \"./research/ritualCircle\";\r\nimport {SearchAlgorithms} from \"./research/searchAlgorithms\";\r\nimport {BloodMeter} from \"./research/bloodMeter\";\r\n\r\nexport const allResearches: typeof Research[] = [\r\n    BetterShovels,\r\n    BloodWard,\r\n    Profit,\r\n    StudentKnowledge,\r\n    MapTheRuins,\r\n    Tours,\r\n    Banks,\r\n    RitualCircle,\r\n    SearchAlgorithms,\r\n    BloodMeter\r\n];\r\n\r\nexport function getAvailableResearches(gameState: GameState): typeof Research[] {\r\n    return allResearches.filter((r) => r.isAvailable(gameState));\r\n}\r\n","import React from \"react\";\r\nimport {RelicsButton} from \"./relicsButton\";\r\nimport {Research} from \"../economy/Transaction\";\r\nimport {GameState} from \"../core/game-state\";\r\n\r\ntype ResearchButtonProps = {\r\n    research: typeof Research;\r\n    gameState: GameState;\r\n    onPurchase: any;\r\n}\r\n\r\nexport class ResearchButton extends React.Component<ResearchButtonProps>{\r\n    render() {\r\n        const {gameState, research, onPurchase} = this.props;\r\n        return (\r\n            <RelicsButton\r\n                disabled={!research.isValidPurchase(gameState, 1)}\r\n                onClick={() => onPurchase(1, research.commitTransaction)}\r\n                id={research.id}\r\n                key={research.id}\r\n                className={research.className}\r\n                tooltip={research.buildTooltip(gameState)}\r\n            >\r\n                {research.title}\r\n            </RelicsButton>\r\n        );\r\n    }\r\n}","import React from \"react\";\r\nimport {GameState} from \"../core/game-state\";\r\nimport {labFirstUnlock} from \"../core/achievements\";\r\nimport {RelicsButton} from \"../shared/relicsButton\";\r\nimport {KnowledgeTransaction} from \"../economy/transactions/KnowledgeTransaction\";\r\nimport {AssignWorkerOptions} from \"../shared/AssignWorkerOptions\";\r\nimport {\r\n    assignStudyRelics,\r\n    countAvailableStudents,\r\n    removeStudyRelics\r\n} from \"../economy/jobAssignments\";\r\nimport {getAvailableResearches} from \"../economy/researchManager\";\r\nimport {ResearchButton} from \"../shared/researchButton\";\r\nimport {Research} from \"../economy/Transaction\";\r\n\r\ntype LabProps = {\r\n    gameState: GameState;\r\n    onPurchase: any;\r\n}\r\n\r\nexport class ResearchLab extends React.Component<LabProps> {\r\n    componentDidMount(): void {\r\n        labFirstUnlock(this.props.gameState);\r\n    }\r\n\r\n    assignStudentsStudy = (amount: number) => assignStudyRelics(amount, this.props.gameState);\r\n    removeStudentsStudy = (amount: number) => removeStudyRelics(amount, this.props.gameState);\r\n\r\n    createResearchButton(research: typeof Research): any {\r\n        return (\r\n            <ResearchButton key={research.id} research={research} gameState={this.props.gameState} onPurchase={this.props.onPurchase}/>\r\n        );\r\n    }\r\n\r\n    render() {\r\n        const { gameState, onPurchase } = this.props;\r\n        const availableStudents = countAvailableStudents(gameState);\r\n        let availableResearch = getAvailableResearches(gameState).map((research) => this.createResearchButton(research));\r\n        if(availableResearch.length < 1) {\r\n            availableResearch = [<div>\r\n                You have exhausted all available potential research.<br/>\r\n                Perhaps more will come to you as you look into other matters.\r\n            </div>];\r\n        }\r\n        return (\r\n            <div>\r\n                <div className=\"button-container\">\r\n                    <RelicsButton\r\n                        disabled={!KnowledgeTransaction.isValidPurchase(gameState, 1)}\r\n                        onClick={() => onPurchase(1, KnowledgeTransaction.commitTransaction)}\r\n                        id=\"studyRelics\"\r\n                        tooltip={KnowledgeTransaction.buildTooltip(gameState)}\r\n                    >\r\n                        Study Relics\r\n                    </RelicsButton>\r\n                </div>\r\n                {gameState.researchState.studentKnowledge &&\r\n                    <div>\r\n                        <AssignWorkerOptions\r\n                            id=\"studentsStudying\"\r\n                            assignWorkers={(amount: number) =>this.assignStudentsStudy(amount)}\r\n                            removeWorkers={(amount:number) => this.removeStudentsStudy(amount)}\r\n                            currentlyAssigned={gameState.jobAssignments.studyRelics}\r\n                            availableWorkers={availableStudents}\r\n                            tooltip={\"Produces .1 knowledge per 10 relics.\"}\r\n                        >\r\n                            Student Studying Relics\r\n                        </AssignWorkerOptions>\r\n                    </div>\r\n                }\r\n\r\n                <div>\r\n                    <h2>Research</h2>\r\n                    <div className=\"outline-container\">\r\n                        <div className={\"button-container\"}>\r\n                            { availableResearch }\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","import {GameState} from \"./game-state\";\r\nimport {ACHIEVEMENT_ENTRY_TYPE, addDetailedJournalEntry} from \"./journal\";\r\n\r\nexport function labFirstUnlock(gameState: GameState) {\r\n    if(!gameState.achievements.labUnlocked) {\r\n        gameState.achievements.labUnlocked = true;\r\n        addDetailedJournalEntry(gameState, {\r\n            entry: \"With your new found stash of relics, you retreat to your personal laboratory!\",\r\n            entryType: ACHIEVEMENT_ENTRY_TYPE,\r\n        });\r\n    }\r\n}\r\n","import {safeResource, Transaction} from \"../Transaction\";\r\nimport {GameState} from \"../../core/game-state\";\r\nimport React from \"react\";\r\n\r\nexport class BleedingStonesTransaction extends Transaction{\r\n    updateClock = false;\r\n\r\n    static commitTransaction(gameState: GameState, amount: number): GameState {\r\n        if(BleedingStonesTransaction.isValidPurchase(gameState, amount)) {\r\n            const costs = BleedingStonesTransaction.getCost(gameState, amount);\r\n            gameState.resourceState.blood -= costs[0];\r\n            gameState.resourceState.relics -= costs[1];\r\n            gameState.resourceState.knowledge -= costs[2];\r\n\r\n            gameState.resourceState.bleedingStones = safeResource(gameState.resourceState.bleedingStones) + amount;\r\n        }\r\n        return gameState;\r\n    }\r\n\r\n    static isValidPurchase(gameState: GameState, amount: number): boolean {\r\n        const costs = BleedingStonesTransaction.getCost(gameState, amount);\r\n        return gameState.resourceState.blood >= costs[0]\r\n            && gameState.resourceState.relics >= costs[1]\r\n            && gameState.resourceState.knowledge >= costs[2];\r\n    }\r\n\r\n    static getCost(gameState: GameState, purchaseAmount: number) {\r\n        let bloodSum = 0;\r\n        let knowledgeSum = 0;\r\n        let relicSum = 0;\r\n\r\n        let theoreticalAmt = gameState.resourceState.bleedingStones || 0;\r\n        for (let i = 0; i < purchaseAmount; i++) {\r\n            bloodSum += 1 + theoreticalAmt * 5;\r\n            knowledgeSum += 5 + theoreticalAmt * 5;\r\n            relicSum += 50 + theoreticalAmt * 5;\r\n\r\n            theoreticalAmt++;\r\n        }\r\n        return [bloodSum, relicSum, knowledgeSum];\r\n    }\r\n\r\n    static buildTooltip(gameState: GameState): any {\r\n        const costs = BleedingStonesTransaction.getCost(gameState, 1);\r\n\r\n        return (\r\n            <div className=\"relics-tooltip\">\r\n                <div className=\"relics-tooltip__description\">\r\n                    Anoint a stone, and it will bleed like man.\r\n                    <br/>+.2 blood/s.\r\n                </div>\r\n                <div className=\"relics-tooltip__cost\">\r\n                    <div>Relics: {costs[1]}</div>\r\n                    <div className={\"blood-text\"}>Blood: {costs[0]}</div>\r\n                    <div className={\"knowledge-text\"}>Knowledge: {costs[2]}</div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","import * as React from \"react\";\r\nimport { GameState } from \"../core/game-state\";\r\nimport {RelicsButton} from \"../shared/relicsButton\";\r\nimport {BleedingStonesTransaction} from \"../economy/rituals/bleedingStones\";\r\n\r\ntype RitualProps = {\r\n    gameState: GameState,\r\n    onPurchase: any,\r\n}\r\n\r\nexport class RitualPanel extends React.Component<RitualProps> {\r\n    render() {\r\n        const {gameState, onPurchase} = this.props;\r\n        let alertClass = \"blood-meter__alert \";\r\n        if(gameState.resourceState.bloodChance < 2) {\r\n            alertClass += \"blood-meter__alert--ok\";\r\n        }\r\n        else if(gameState.resourceState.bloodChance < 5) {\r\n            alertClass += \"blood-meter__alert--medium\";\r\n        }\r\n        else alertClass += \"blood-meter__alert--high\";\r\n\r\n        return (\r\n            <div className=\"panel--left-align\">\r\n                <h2>Constructs:</h2>\r\n                <div className=\"button-container\">\r\n                    <RelicsButton\r\n                        disabled={!BleedingStonesTransaction.isValidPurchase(gameState, 1)}\r\n                        onClick={() => onPurchase(1, BleedingStonesTransaction.commitTransaction)}\r\n                        id=\"bloodstone\"\r\n                        tooltip={BleedingStonesTransaction.buildTooltip(gameState)}\r\n                    >\r\n                        Bleeding Stone: {gameState.resourceState.bleedingStones}\r\n                    </RelicsButton>\r\n                </div>\r\n                <br/>\r\n                {gameState.researchState.bloodMeter && (\r\n                    <div className=\"outline-container blood-meter\">\r\n                        <div>\r\n                            <div>Haunt Meter:</div>\r\n                            <div>Chance: {gameState.resourceState.bloodChance.toFixed(1)}%</div>\r\n                            <div>Cost:   {gameState.resourceState.bloodLoss.toFixed()} Blood</div>\r\n                        </div>\r\n                        <div className={alertClass}/>\r\n                    </div>\r\n                )}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","import ReactMarkdown from \"react-markdown\";\r\nimport React from \"react\";\r\n\r\n\r\nexport class PatchNotePanel extends React.Component {\r\n   render() {\r\n        const input = '# Patch Notes\\n' +\r\n            '\\n' +\r\n            '## Version 0.1.1:\\n' +\r\n            'Basic build of the game and component interactions. Added scaffolding for versions.\\n';\r\n\r\n        return (\r\n            <ReactMarkdown source={input} />\r\n        );\r\n    }\r\n}\r\n","import * as React from \"react\";\r\nimport {loadSave, newSave, saveGame, saveGameExists} from \"./saveService\";\r\nimport {RelicPanel} from \"../panels/relicPanel\";\r\nimport {Settings} from \"../panels/settings\";\r\nimport {GameState} from \"./game-state\";\r\nimport {GameClock} from \"./game-clock\";\r\nimport {\r\n    GENERATORS_PANEL_KEY,\r\n    LAB_KEY,\r\n    PATCH_NOTES_KEY,\r\n    RITUAL_PANEL_KEY,\r\n    SETTINGS_PANEL_KEY\r\n} from \"../config/constants\";\r\nimport {addJournalEntry, clearJournal} from \"./journal\";\r\nimport {AdventureLog} from \"../panels/adventureLog\";\r\nimport {ResourcePanel} from \"../panels/resourcePanel\";\r\nimport {PanelSelector} from \"../layout/panelSelector\";\r\nimport {ResearchLab} from \"../panels/lab\";\r\nimport {RitualPanel} from \"../panels/ritualPanel\";\r\nimport {PatchNotePanel} from \"../panels/patchNotes\";\r\n\r\ntype CoreProps = {}\r\ntype CoreState = {\r\n    gameState: GameState,\r\n    activePanel: string\r\n}\r\n\r\nexport class CorePanel extends React.Component<CoreProps, CoreState> {\r\n    clock: GameClock | undefined;\r\n    readonly state = {\r\n        gameState: saveGameExists() ? loadSave() : newSave(),\r\n        activePanel: GENERATORS_PANEL_KEY\r\n    };\r\n\r\n    componentDidMount(): void {\r\n        this.clock = new GameClock(this.state.gameState, (newState: GameState) => this.onTick(newState));\r\n        this.setState({activePanel: GENERATORS_PANEL_KEY});\r\n    }\r\n\r\n    onTick(newState: GameState) {\r\n        this.setState({gameState: newState});\r\n    }\r\n\r\n    addCurrency(currencyName: string, currencyAmount: number) {\r\n        const newState = {...this.state.gameState};\r\n        let relicRate = currencyAmount;\r\n        if(this.state.gameState.researchState.mapTheGrounds) relicRate += 1;\r\n        newState.resourceState.relics += relicRate;\r\n        if(newState.resourceState.relics > newState.resourceState.relicCap) newState.resourceState.relics = newState.resourceState.relicCap;\r\n        addJournalEntry(newState, \"You dust off some potsherds.\");\r\n        this.setState({gameState: newState})\r\n    }\r\n\r\n    makePurchase(purchaseAmount: number, transaction: any) {\r\n        let newState = {...this.state.gameState};\r\n        newState = transaction(newState, purchaseAmount);\r\n\r\n        this.setState({gameState: newState});\r\n        // if(purchaseType.updateClock) {\r\n        //     // @ts-ignore\r\n        //     this.clock.updateState(newState);\r\n        // }\r\n    }\r\n\r\n    clearLog() {\r\n        clearJournal(this.state.gameState)\r\n    }\r\n\r\n    changeActivePanel(panelKey: string) {\r\n        this.setState({activePanel: panelKey});\r\n    }\r\n\r\n    save() {\r\n        const newState = {...this.state.gameState};\r\n        this.setState({gameState: newState});\r\n        saveGame(newState, true);\r\n    }\r\n\r\n    clearSave() {\r\n        // eslint-disable-next-line no-restricted-globals\r\n        const response = confirm(\"Are you sure you want to clear your save?\");\r\n        if (!response) {\r\n            return;\r\n        }\r\n        // @ts-ignore\r\n        this.clock.clearClock();\r\n        const newState = {gameState: newSave()};\r\n        newState.gameState.saveTime = new Date();\r\n        this.setState(newState);\r\n        this.clock = new GameClock(newState.gameState, (newState: GameState) => this.onTick(newState));\r\n        saveGame(newState.gameState);\r\n    }\r\n\r\n    private importSave(save: GameState | null) {\r\n        if(save == null) return;\r\n        // @ts-ignore\r\n        this.clock.clearClock();\r\n        const newState = {gameState: save};\r\n        this.setState(newState);\r\n        this.clock = new GameClock(newState.gameState, (newState: GameState) => this.onTick(newState));\r\n        saveGame(save);\r\n    }\r\n\r\n    render() {\r\n        let activePanel;\r\n        switch (this.state.activePanel) {\r\n            case SETTINGS_PANEL_KEY:\r\n                activePanel = (\r\n                    <Settings\r\n                        gameState={this.state.gameState}\r\n                        onSave={() => this.save()}\r\n                        onClearSave={() => this.clearSave()}\r\n                        onImportSave={(save: GameState | null) => this.importSave(save)}\r\n                        onChangePanel={(panelKey: string) => this.changeActivePanel(panelKey)}\r\n                    />\r\n                );\r\n                break;\r\n            case LAB_KEY:\r\n                activePanel = (\r\n                    <ResearchLab\r\n                        gameState={this.state.gameState}\r\n                        onPurchase={(purchaseAmount: number, transaction: any) => this.makePurchase(purchaseAmount, transaction)}\r\n                    />\r\n                );\r\n                break;\r\n            case RITUAL_PANEL_KEY:\r\n                activePanel = (\r\n                    <RitualPanel\r\n                        gameState={this.state.gameState}\r\n                        onPurchase={(purchaseAmount: number, transaction: any) => this.makePurchase(purchaseAmount, transaction)}\r\n                    />\r\n                );\r\n                break;\r\n            case PATCH_NOTES_KEY:\r\n                activePanel = (\r\n                    <PatchNotePanel/>\r\n                );\r\n                break;\r\n            case GENERATORS_PANEL_KEY:\r\n            default:\r\n                activePanel = (\r\n                    <RelicPanel\r\n                        gameState={this.state.gameState}\r\n                        onAddCurrency={(currencyName: string, currencyAmount: number) => this.addCurrency(currencyName, currencyAmount)}\r\n                        onPurchase={(purchaseAmount: number, transaction: any) => this.makePurchase(purchaseAmount, transaction)}\r\n                    />\r\n                );\r\n\r\n        }\r\n\r\n        return (\r\n            <div className=\"core-panel\">\r\n                <div className=\"core-panel__flex\">\r\n                    <div className=\"core-panel__left-column\">\r\n                        <AdventureLog clearLog={() => this.clearLog()} journalState={this.state.gameState.journalState}/>\r\n                    </div>\r\n                    <div className=\"core-panel__center-column\">\r\n                        <PanelSelector onChangePanel={(panelKey: string) => this.changeActivePanel(panelKey)}\r\n                            selected={this.state.activePanel}\r\n                            gameState={this.state.gameState}\r\n                        />\r\n                        {activePanel}\r\n                    </div>\r\n                    <div className=\"core-panel__right-column\">\r\n                        <ResourcePanel gameState={this.state.gameState}/>\r\n                    </div>\r\n                </div>\r\n\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","import React from 'react';\r\nimport './app.scss';\r\nimport {CorePanel} from \"./core/corePanel\";\r\nimport {ThemeContext, themes} from \"./layout/theme-context\";\r\nimport {loadSave, saveGameExists} from \"./core/saveService\";\r\n\r\ntype AppProps = {}\r\ntype AppState = {\r\n    theme: any,\r\n    toggleTheme: () => {}\r\n}\r\n\r\nclass App extends React.Component<AppProps, AppState> {\r\n    readonly state: AppState;\r\n    toggleTheme: any;\r\n\r\n    constructor(props: any) {\r\n        super(props);\r\n        const darkMode = saveGameExists() && loadSave().settings.darkMode;\r\n\r\n        this.toggleTheme = () => {\r\n            this.setState(state => ({\r\n                theme:\r\n                    state.theme === themes.dark\r\n                        ? themes.light\r\n                        : themes.dark,\r\n            }));\r\n        };\r\n\r\n        this.state = {\r\n            theme: darkMode ? themes.dark : themes.light,\r\n            toggleTheme: this.toggleTheme,\r\n        };\r\n\r\n    }\r\n\r\n    render() {\r\n        return (\r\n                <ThemeContext.Provider value={this.state}>\r\n                    <div className={this.state.theme.themeClass}>\r\n                        <CorePanel/>\r\n                    </div>\r\n                </ThemeContext.Provider>\r\n        );\r\n    }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resource-display are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(\r\n      process.env.PUBLIC_URL,\r\n      window.location.href\r\n    );\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './app';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}