{"version":3,"sources":["core/journal.ts","config/constants.ts","core/game-state.ts","core/saveService.ts","economy/Transaction.ts","economy/transactions/studentTransaction.tsx","economy/jobAssignments.ts","shared/relicsButton.tsx","shared/AssignWorkerOptions.tsx","economy/transactions/shedTransaction.tsx","economy/transactions/bankTransaction.tsx","panels/relicPanel.tsx","layout/theme-context.ts","panels/settings.tsx","core/event-manager.ts","core/game-clock.ts","panels/adventureLog.tsx","panels/resourcePanel.tsx","layout/navButton.tsx","layout/panelSelector.tsx","economy/transactions/KnowledgeTransaction.tsx","economy/research/betterShovels.tsx","economy/research/bloodWard.tsx","economy/research/profit.tsx","economy/research/studentKnowledge.tsx","economy/research/mapTheRuins.tsx","economy/research/tours.tsx","economy/research/banks.tsx","economy/researchManager.ts","shared/researchButton.tsx","panels/lab.tsx","core/achievements.ts","core/corePanel.tsx","app.tsx","serviceWorker.ts","index.tsx"],"names":["addJournalEntry","gameState","entry","journalState","entries","push","entryType","length","shift","addDetailedJournalEntry","GameState","resourceState","ResourceState","jobAssignments","JobAssignments","JournalState","saveTime","Date","settings","SettingsState","achievements","Achievements","researchState","ResearchState","relics","relicCap","relicRate","relicGenerator","sheds","students","knowledge","knowledgeRate","knowledgeCap","blood","bloodRate","money","moneyRate","moneyCap","banks","fame","whispers","gatherRelics","studyRelics","giftShop","darkMode","labUnlocked","banksOpen","studentKnowledge","profiteering","betterShovels","bloodWard","mapTheGrounds","tours","saveGameExists","localStorage","getItem","loadSave","string","newState","mergeStateWithDefault","JSON","parse","atob","newSave","saveGame","manualSave","setItem","btoa","stringify","Transaction","isValidPurchase","amount","commitTransaction","updateClock","Research","isAvailable","buildTooltip","title","className","id","StudentTransaction","currCost","getCost","purchaseAmount","sum","theoreticalAmt","i","removeGatherers","assignStudyRelics","countAvailableStudents","removeStudyRelics","assignedStudents","RelicsButton","this","props","tooltip","children","disabled","onClick","compact","clickFunc","dataTipAttr","key","place","effect","React","Component","AssignWorkerOptions","assignWorkers","removeWorkers","currentlyAssigned","availableWorkers","ShedTransaction","BankTransaction","undefined","resource","RelicPanel","onAddCurrency","onPurchase","availableStudents","studentsHired","assignGatherers","assignGiftShop","removeGiftShop","themes","light","themeClass","dark","ThemeContext","createContext","theme","toggleTheme","Settings","onSave","onClearSave","Consumer","onToggleTheme","href","randomEvent","diceRoll","Math","floor","random","GameClock","onTick","saveClockId","resourceClockId","tickRatio","emitTick","maxTicks","lastTickDate","randomEventTimer","setInterval","updateState","TICK_SPEED","tickTimeStamp","seconds","getTime","randomEventsForDuration","calibrate","relicsPerSecond","knowledgePerSecond","moneyPerSecond","relicsMultiplier","manageRandomEvent","clearInterval","tick","AdventureLog","clearLog","entryList","slice","reverse","map","getClassName","ResourcePanelEntry","renderRate","rate","rateText","cap","ResourcePanel","toFixed","NavButton","selected","PanelSelector","onChangePanel","KnowledgeTransaction","BetterShovels","BloodWard","Profit","StudentKnowledge","MapTheRuins","Tours","Banks","allResearches","ResearchButton","research","ResearchLab","assignStudentsStudy","removeStudentsStudy","availableResearch","filter","r","getAvailableResearches","createResearchButton","CorePanel","clock","state","activePanel","setState","currencyName","currencyAmount","transaction","panelKey","confirm","clearClock","location","reload","save","clearSave","makePurchase","addCurrency","changeActivePanel","App","Provider","value","Boolean","window","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.d7b558d1.chunk.js","sourcesContent":["import {GameState} from \"./game-state\";\nimport {MAX_LOG_SIZE} from \"../config/constants\";\n\nexport const ACHIEVEMENT_ENTRY_TYPE = \"ACHIEVEMENT\";\nexport const COMMON_ENTRY_TYPE = \"COMMON\";\nexport const BLOOD_ENTRY_TYPE = \"BLOOD\";\n\nexport type DetailedEntry = {\n    entry: string,\n    entryType: string,\n}\n\nexport function addJournalEntry(gameState: GameState, entry: string){\n    gameState.journalState.entries.push({\n        entry: entry,\n        entryType: COMMON_ENTRY_TYPE\n    });\n    if(gameState.journalState.entries.length >= MAX_LOG_SIZE) {\n        gameState.journalState.entries.shift();\n    }\n    return gameState;\n}\n\nexport function addDetailedJournalEntry(gameState: GameState, entry: DetailedEntry){\n    gameState.journalState.entries.push(entry);\n    if(gameState.journalState.entries.length >= MAX_LOG_SIZE) {\n        gameState.journalState.entries.shift();\n    }\n    return gameState;\n}\n\nexport function clearJournal(gameState: GameState) {\n    gameState.journalState.entries = [];\n}\n","export const MIN_SAVE_REWARD_TIME = 24;\nexport const TICK_SPEED = 50;\nexport const SECONDS_PER_EVENT_CHECK = 5;\nexport const MAX_LOG_SIZE = 25;\n\n// Base Caps\nexport const BASE_RELIC_CAP = 100;\nexport const BASE_MONEY_CAP = 50;\nexport const BASE_KNOWLEDGE_CAP = 20;\n\n// Panel Keys\nexport const SETTINGS_PANEL_KEY = \"SETTINGS\";\nexport const GENERATORS_PANEL_KEY = \"GENERATORS\";\nexport const LAB_KEY = \"LAB\";\n","import {COMMON_ENTRY_TYPE, DetailedEntry} from \"./journal\";\n\nexport class GameState {\n    resourceState: ResourceState = new ResourceState();\n    jobAssignments: JobAssignments = new JobAssignments();\n    journalState: JournalState = new JournalState();\n    saveTime: Date = new Date();\n    settings: SettingsState = new SettingsState();\n    achievements: Achievements = new Achievements();\n    researchState: ResearchState = new ResearchState();\n}\n\nexport class ResourceState {\n    relics: number = 0;\n    relicCap: number = 0;\n    relicRate: number = 0;\n    relicGenerator: number = 0;\n    sheds: number = 0;\n    students: number = 0;\n    knowledge: number = 0;\n    knowledgeRate: number = 0;\n    knowledgeCap: number = 0;\n    blood: number = 0;\n    bloodRate = 0;\n    money: number = 0;\n    moneyRate = 0;\n    moneyCap = 0;\n    banks = 0;\n    fame: number = 0;\n    whispers: number = 0;\n}\n\nexport class JobAssignments {\n    gatherRelics: number = 0;\n    studyRelics: number = 0;\n    giftShop: number = 0;\n}\n\nexport class JournalState {\n    entries: DetailedEntry[] = [{\n        entry: \"The new dig site lays before me, I wonder what treasures lay yet unearthed?\",\n        entryType: COMMON_ENTRY_TYPE\n    }];\n}\n\nexport class SettingsState {\n    darkMode: boolean = true;\n}\n\nexport class Achievements {\n    labUnlocked: boolean = false;\n}\n\nexport class ResearchState {\n    banksOpen: boolean = false;\n    studentKnowledge: boolean = false;\n    profiteering: boolean = false;\n    betterShovels: boolean = false;\n    bloodWard: boolean = false;\n    mapTheGrounds: boolean = false;\n    tours: boolean = false;\n}\n\nexport function mergeStateWithDefault(gameState: GameState): GameState {\n    const newState = {...new GameState(), ...gameState};\n    newState.resourceState = {...newState.resourceState, ...gameState.resourceState};\n    newState.jobAssignments = {...newState.jobAssignments, ...gameState.jobAssignments};\n    newState.journalState = {...newState.journalState, ...gameState.journalState};\n    newState.saveTime = gameState.saveTime;\n    newState.settings = {...newState.settings, ...gameState.settings};\n    newState.achievements = {...newState.achievements, ...gameState.achievements};\n    newState.researchState = {...newState.researchState, ...gameState.researchState};\n\n    return newState;\n}\n","import {GameState, mergeStateWithDefault} from \"./game-state\";\nimport {addJournalEntry} from \"./journal\";\n\nexport function saveGameExists() {\n    return !!localStorage.getItem(\"RelicsSave\");\n}\n\nexport function loadSave() {\n    const string = localStorage.getItem(\"RelicsSave\");\n    const save =  string ? JSON.parse(atob(string)) : null;\n    return mergeStateWithDefault(save);\n}\n\nexport function newSave(): GameState {\n    return new GameState();\n}\n\nexport function saveGame(gameState: GameState, manualSave: boolean = false) {\n    gameState.saveTime = new Date();\n    if(manualSave) addJournalEntry(gameState, \"Game Saved\");\n    localStorage.setItem(\"RelicsSave\", btoa(JSON.stringify(gameState)));\n}\n\n\nexport function exportSave(gameState: GameState) {\n    saveGame(gameState);\n    // TODO: export\n}\n\nexport function importSave(gameState: GameState) {\n    saveGame(gameState);\n    // TODO: import\n}\n","import {GameState } from \"../core/game-state\";\n\nexport class Transaction {\n    static isValidPurchase = (gameState: GameState, amount: number): boolean => false ;\n    static commitTransaction = (gameState: GameState, amount: number): GameState => {return gameState};\n    static updateClock: boolean = false;\n}\n\nexport class Research extends Transaction {\n    static isAvailable = (gameState: GameState): boolean => false;\n    static buildTooltip = (gameState: GameState): any => \"MISSING TOOLTIP\";\n    static title: string = \"MISSING TITLE\";\n    static className = \"\";\n    static id = \"\";\n}\n\nexport function safeResource(resource: any) {\n    return (resource == undefined || resource == null) ? 0 : resource;\n}","import { Transaction } from \"../Transaction\";\nimport {GameState} from \"../../core/game-state\";\nimport React from \"react\";\n\nexport class StudentTransaction extends Transaction{\n    updateClock = false;\n\n    static commitTransaction(gameState: GameState, amount: number): GameState {\n        if(StudentTransaction.isValidPurchase(gameState, amount)) {\n            const currCost = StudentTransaction.getCost(gameState, amount);\n\n            gameState.resourceState.relics -= currCost;\n            gameState.resourceState.students += amount;\n        }\n        return gameState;\n    }\n\n    static isValidPurchase(gameState: GameState, amount: number): boolean {\n        const currCost = StudentTransaction.getCost(gameState, amount);\n\n        return gameState.resourceState.relics >= currCost;\n    }\n\n    static getCost(gameState: GameState, purchaseAmount: number) {\n        let sum = 0;\n        let theoreticalAmt = gameState.resourceState.students || 0;\n        for (let i = 0; i < purchaseAmount; i++) {\n            sum += 10 + theoreticalAmt * 5;\n            theoreticalAmt++;\n        }\n        return sum;\n    }\n\n    static buildTooltip(gameState: GameState): any {\n        return (\n            <div className=\"relics-tooltip\">\n                <div className=\"relics-tooltip__description\">\n                    Hire some students to dust off relics for you.\n                    They work for relics.\n                    { gameState.achievements.labUnlocked && (<div className={\"knowledge-text\"}>+5 Knowledge cap</div>)}\n                </div>\n                <div className=\"relics-tooltip__cost\">\n                    <div>Relics: {StudentTransaction.getCost(gameState, 1)}</div>\n                </div>\n            </div>\n        );\n    }\n}\n","import {GameState} from \"../core/game-state\";\n\n// Gather\nexport function assignGatherers(amount: number, gameState: GameState){\n    if(countAvailableStudents(gameState) >= amount) {\n        gameState.jobAssignments.gatherRelics += amount;\n    }\n}\nexport function removeGatherers(amount: number, gameState: GameState){\n    gameState.jobAssignments.gatherRelics -= amount;\n    if(gameState.jobAssignments.gatherRelics < 0) gameState.jobAssignments.gatherRelics = 0;\n}\n\n// Study\nexport function assignStudyRelics(amount: number, gameState: GameState){\n    if(countAvailableStudents(gameState) >= amount) {\n        gameState.jobAssignments.studyRelics += amount;\n    }\n}\nexport function removeStudyRelics(amount: number, gameState: GameState){\n    gameState.jobAssignments.studyRelics -= amount;\n    if(gameState.jobAssignments.studyRelics < 0) gameState.jobAssignments.studyRelics = 0;\n}\n\n// Work the gift shop\nexport function assignGiftShop(amount: number, gameState: GameState){\n    if(countAvailableStudents(gameState) >= amount) {\n        gameState.jobAssignments.giftShop += amount;\n    }\n}\nexport function removeGiftShop(amount: number, gameState: GameState){\n    gameState.jobAssignments.giftShop -= amount;\n    if(gameState.jobAssignments.giftShop < 0) gameState.jobAssignments.studyRelics = 0;\n}\n\nexport function countAvailableStudents(gameState: GameState) {\n    const assignedStudents = (gameState.jobAssignments.gatherRelics || 0)\n        + (gameState.jobAssignments.studyRelics || 0);\n    return gameState.resourceState.students - assignedStudents;\n}\n","import React from \"react\";\nimport ReactTooltip from \"react-tooltip\";\n\ntype RelicsButtonProps = {\n  onClick: any;\n  id?: string; // Must be provided for tooltip to work\n  disabled?: any;\n  tooltip?: any;\n  compact?: boolean;\n  className?: string;\n}\n\nexport class RelicsButton extends React.Component<RelicsButtonProps> {\n\n    render() {\n        const { tooltip, id, children, disabled, onClick, compact } = this.props;\n        let className = \"relics-button\";\n        if(disabled) className += \" relics-button--disabled\";\n        if(compact) className += \" relics-button--compact\";\n        if(this.props.className) className += \" \" + this.props.className;\n\n        const clickFunc = disabled ? () => {} : onClick;\n        const dataTipAttr = {};\n        if(tooltip)\n        {\n            // @ts-ignore\n            dataTipAttr['data-tip'] = '';\n            // @ts-ignore\n            dataTipAttr['data-for'] = id;\n        }\n        return (\n            <span { ...dataTipAttr} id={id} key={id} className={className} onClick={clickFunc}>\n                {children}\n                {tooltip &&\n                    <ReactTooltip id={id} key={id} place=\"bottom\" effect=\"solid\">\n                        {tooltip}\n                    </ReactTooltip>\n                }\n            </span>\n        )\n    }\n}\n","import React from \"react\";\nimport {RelicsButton} from \"./relicsButton\";\nimport ReactTooltip from \"react-tooltip\";\n\ntype AssignWorkerOptionProps = {\n    id?:string,\n    tooltip?: string,\n    assignWorkers: any,\n    removeWorkers: any,\n    currentlyAssigned: number,\n    availableWorkers: number,\n}\n\nexport class AssignWorkerOptions extends React.Component<AssignWorkerOptionProps>{\n    render() {\n        const {\n            id,\n            tooltip,\n            children,\n            assignWorkers,\n            removeWorkers,\n            currentlyAssigned,\n            availableWorkers,\n        } = this.props;\n\n        const dataTipAttr = {};\n        if(tooltip)\n        {\n            // @ts-ignore\n            dataTipAttr['data-tip'] = '';\n            // @ts-ignore\n            dataTipAttr['data-for'] = id;\n        }\n        return (\n            <span { ...dataTipAttr} id={id} >\n                {children}: {currentlyAssigned || 0}\n                <span>\n                    <RelicsButton\n                        compact={true}\n                        disabled={currentlyAssigned <= 0}\n                        onClick={() => removeWorkers(1)}\n                    >\n                        -\n                    </RelicsButton>\n                    <RelicsButton\n                        compact={true}\n                        disabled={availableWorkers <= 0}\n                        onClick={() => assignWorkers(1)}>\n                        +\n                    </RelicsButton>\n                    <RelicsButton\n                        compact={true}\n                        disabled={availableWorkers <= 0}\n                        onClick={() => assignWorkers(availableWorkers)}>\n                        <u>+</u>\n                    </RelicsButton>\n                </span>\n                {tooltip &&\n                    <ReactTooltip id={id} place=\"bottom\" effect=\"solid\">\n                        {tooltip}\n                    </ReactTooltip>\n                }\n            </span>\n        );\n    }\n}\n","import { Transaction } from \"../Transaction\";\nimport {GameState} from \"../../core/game-state\";\nimport React from \"react\";\n\nexport class ShedTransaction extends Transaction{\n    updateClock = false;\n\n    static commitTransaction(gameState: GameState, amount: number): GameState {\n        if(ShedTransaction.isValidPurchase(gameState, amount)) {\n            const currCost = ShedTransaction.getCost(gameState, amount);\n\n            gameState.resourceState.money -= currCost;\n            gameState.resourceState.sheds += amount;\n        }\n        return gameState;\n    }\n\n    static isValidPurchase(gameState: GameState, amount: number): boolean {\n        const currCost = ShedTransaction.getCost(gameState, amount);\n        return gameState.resourceState.money >= currCost;\n    }\n\n    static getCost(gameState: GameState, purchaseAmount: number) {\n        let sum = 0;\n        let theoreticalAmt = gameState.resourceState.sheds || 0;\n        for (let i = 0; i < purchaseAmount; i++) {\n            sum += 5 + theoreticalAmt * 15;\n            theoreticalAmt++;\n        }\n        return sum;\n    }\n\n    static buildTooltip(gameState: GameState): any {\n        return (\n            <div className=\"relics-tooltip\">\n                <div className=\"relics-tooltip__description\">\n                    It turns out we don't need to keep our relics in a pile under a tarp.\n                    <br/>+50 relic storage.\n                </div>\n                <div className=\"relics-tooltip__cost\">\n                    <div className={\"money-text\"}>Money: {ShedTransaction.getCost(gameState, 1)}</div>\n                </div>\n            </div>\n        );\n    }\n}\n","import {safeResource, Transaction} from \"../Transaction\";\nimport {GameState} from \"../../core/game-state\";\nimport React from \"react\";\n\nexport class BankTransaction extends Transaction{\n    updateClock = false;\n\n    static commitTransaction(gameState: GameState, amount: number): GameState {\n        if(BankTransaction.isValidPurchase(gameState, amount)) {\n            const currCost = BankTransaction.getCost(gameState, amount);\n\n            gameState.resourceState.money -= currCost;\n            gameState.resourceState.banks = safeResource(gameState.resourceState.banks) + amount;\n        }\n        return gameState;\n    }\n\n    static isValidPurchase(gameState: GameState, amount: number): boolean {\n        const currCost = BankTransaction.getCost(gameState, amount);\n        return gameState.resourceState.money >= currCost;\n    }\n\n    static getCost(gameState: GameState, purchaseAmount: number) {\n        let sum = 0;\n        let theoreticalAmt = gameState.resourceState.banks || 0;\n        for (let i = 0; i < purchaseAmount; i++) {\n            sum += 20 + theoreticalAmt * 20;\n            theoreticalAmt++;\n        }\n        return sum;\n    }\n\n    static buildTooltip(gameState: GameState): any {\n        return (\n            <div className=\"relics-tooltip\">\n                <div className=\"relics-tooltip__description\">\n                    It takes money to store money.\n                    <br/>+50 money cap.\n                </div>\n                <div className=\"relics-tooltip__cost\">\n                    <div className={\"money-text\"}>Money: {BankTransaction.getCost(gameState, 1)}</div>\n                </div>\n            </div>\n        );\n    }\n}\n","import * as React from \"react\";\nimport { GameState } from \"../core/game-state\";\nimport {StudentTransaction} from \"../economy/transactions/studentTransaction\";\nimport {\n    assignGatherers,\n    assignGiftShop,\n    countAvailableStudents,\n    removeGatherers,\n    removeGiftShop\n} from \"../economy/jobAssignments\";\nimport {RelicsButton} from \"../shared/relicsButton\";\nimport {AssignWorkerOptions} from \"../shared/AssignWorkerOptions\";\nimport {ShedTransaction} from \"../economy/transactions/shedTransaction\";\nimport {BankTransaction} from \"../economy/transactions/bankTransaction\";\n\ntype GeneratorProps = {\n    gameState: GameState,\n    onPurchase: any,\n    onAddCurrency: any\n}\n\nexport class RelicPanel extends React.Component<GeneratorProps> {\n\n    render() {\n        const { gameState, onAddCurrency, onPurchase } = this.props;\n        const availableStudents = countAvailableStudents(gameState);\n        const studentsHired = gameState.resourceState.students >= 1;\n\n        return (\n            <div className=\"panel--left-align\">\n                <div className=\"button-container\">\n                    <RelicsButton onClick={() => onAddCurrency(\"relics\", 1)}>Look for relics</RelicsButton>\n                </div>\n                {studentsHired &&\n                    <AssignWorkerOptions\n                        assignWorkers={(amount: number) => assignGatherers(amount, this.props.gameState)}\n                        removeWorkers={(amount:number) => removeGatherers(amount, this.props.gameState)}\n                        currentlyAssigned={gameState.jobAssignments.gatherRelics}\n                        availableWorkers={availableStudents}>\n                        Gathering Relics\n                    </AssignWorkerOptions>\n                }\n                {gameState.researchState.tours &&\n                    <div>\n                        <AssignWorkerOptions\n                            assignWorkers={(amount: number) => assignGiftShop(amount, this.props.gameState)}\n                            removeWorkers={(amount:number) => removeGiftShop(amount, this.props.gameState)}\n                            currentlyAssigned={gameState.jobAssignments.giftShop}\n                            availableWorkers={availableStudents}>\n                            Gift Shop\n                        </AssignWorkerOptions>\n                    </div>\n                }\n                <br/>\n                <div>\n                    <div className=\"button-container\">\n                        <RelicsButton\n                                disabled={!StudentTransaction.isValidPurchase(gameState, 1)}\n                                onClick={() => onPurchase(1, StudentTransaction.commitTransaction)}\n                                id=\"hireStudent\"\n                                tooltip={StudentTransaction.buildTooltip(gameState)}\n                        >\n                            Hire a Student\n                        </RelicsButton>\n                    </div>\n                    {gameState.researchState.profiteering && <p>Buildings:</p> }\n                    {gameState.researchState.profiteering &&\n                        <RelicsButton\n                            disabled={!ShedTransaction.isValidPurchase(gameState, 1)}\n                            onClick={() => onPurchase(1, ShedTransaction.commitTransaction)}\n                            id=\"shed\"\n                            tooltip={ShedTransaction.buildTooltip(gameState)}\n                        >\n                            Storage Shed: {gameState.resourceState.sheds}\n                        </RelicsButton>\n                    }\n                    {gameState.researchState.banksOpen &&\n                        <RelicsButton\n                            disabled={!BankTransaction.isValidPurchase(gameState, 1)}\n                            onClick={() => onPurchase(1, BankTransaction.commitTransaction)}\n                            id=\"banks\"\n                            tooltip={BankTransaction.buildTooltip(gameState)}\n                        >\n                            Company Banks: {gameState.resourceState.banks}\n                        </RelicsButton>\n                    }\n                </div>\n            </div>\n        );\n    }\n}\n","import React from \"react\";\n\nexport const themes = {\n    light: {\n        themeClass: 'app app--light',\n    },\n    dark: {\n        themeClass: 'app app--dark',\n    },\n};\n\nexport const ThemeContext = React.createContext({\n    theme: themes.dark, // default value\n    toggleTheme: () => {\n    },\n});","import {GameState} from \"../core/game-state\";\nimport {ThemeContext} from \"../layout/theme-context\";\nimport React from \"react\";\nimport {RelicsButton} from \"../shared/relicsButton\";\n\ntype SettingsProps = {\n    gameState: GameState,\n    onSave: any,\n    onClearSave: any\n}\n\nexport class Settings extends React.Component<SettingsProps> {\n    onToggleTheme(toggleTheme: any) {\n        const { gameState } = this.props;\n        gameState.settings.darkMode = !gameState.settings.darkMode;\n        toggleTheme();\n    }\n    render() {\n        const {onSave, onClearSave} = this.props;\n\n        return (\n            <div>\n                <div className={\"button-container bottom-border\"}>\n                    <p>The game saves automatically every 30s.</p>\n                    <RelicsButton onClick={() => onSave()}>Save</RelicsButton>\n                    <RelicsButton onClick={() => onClearSave()}>Clear Save</RelicsButton>\n                </div>\n                <div>\n                    <ThemeContext.Consumer>\n                        {({theme, toggleTheme}) => (\n                            <div className={\"button-container\"}>\n                                <RelicsButton onClick={() => this.onToggleTheme(toggleTheme)}>\n                                    Toggle Dark Mode\n                                </RelicsButton>\n                            </div>\n                        )}\n                    </ThemeContext.Consumer>\n                </div>\n                <p>Relics - A game by bearhanded.</p>\n                <p><a href=\"https://github.com/bearhanded/relics\">GitHub</a></p>\n            </div>\n        );\n    }\n}\n","import {GameState} from \"./game-state\";\nimport {addDetailedJournalEntry, addJournalEntry, BLOOD_ENTRY_TYPE} from \"./journal\";\nimport {countAvailableStudents, removeGatherers, removeStudyRelics} from \"../economy/jobAssignments\";\n\nexport function randomEventsForDuration(gameState: GameState, amount: number) {\n    for (let i = 0; i < amount; i++) {\n        randomEvent(gameState);\n    }\n}\n\nexport function randomEvent(gameState: GameState) {\n    const diceRoll = roll1d100();\n    if(diceRoll >= 95) {\n        addJournalEntry(gameState, \"The wind blows across the dusty plain\");\n    }\n    if( 10 <= diceRoll && diceRoll <= 15) {\n        addJournalEntry(gameState, \"A stranger shuffles up and hands something to you: +100 Relics!\");\n        gameState.resourceState.relics += 100\n    }\n    if(diceRoll === 1 && gameState.resourceState.students > 2) {\n        // A dark event occurs\n        if(!gameState.researchState.bloodWard) {\n            if (countAvailableStudents(gameState) <= 0) {\n                if (gameState.jobAssignments.gatherRelics >= 1) {\n                    removeGatherers(1, gameState);\n                } else if (gameState.jobAssignments.studyRelics >= 1) {\n                    removeStudyRelics(1, gameState);\n                }\n            }\n            gameState.resourceState.blood ? gameState.resourceState.blood++ : gameState.resourceState.blood = 1;\n            gameState.resourceState.students -= 1;\n\n            addDetailedJournalEntry(gameState, {\n                entry: \"A shout in the dark. You are short one student.\",\n                entryType: BLOOD_ENTRY_TYPE,\n            });\n        } else {\n            gameState.resourceState.blood ? gameState.resourceState.blood++ : gameState.resourceState.blood = 1;\n            addDetailedJournalEntry(gameState, {\n                entry: \"The ward protects the student in exchange for a drop shed.\",\n                entryType: BLOOD_ENTRY_TYPE,\n            });\n        }\n    }\n}\n\nfunction roll1d100() {\n    return Math.floor(Math.random() * 100 + 1);\n}\n","import {saveGame} from \"./saveService\";\nimport {GameState} from \"./game-state\";\nimport {\n    TICK_SPEED,\n    SECONDS_PER_EVENT_CHECK,\n    BASE_RELIC_CAP,\n    BASE_MONEY_CAP,\n    BASE_KNOWLEDGE_CAP\n} from \"../config/constants\";\nimport {randomEventsForDuration} from \"./event-manager\";\n\nexport class GameClock {\n    saveClockId: any;\n    resourceClockId: any;\n    gameState: GameState; // Not readonly, we're emitting the changes for the rest of the app\n    tickRatio: number; // Modified each pass of the clock so that we can deal with running in the background\n    emitTick: any;\n    maxTicks: number;\n    lastTickDate: Date;\n    randomEventTimer = 0;\n\n    constructor(gameState: GameState, onTick: any) {\n        this.saveClockId = setInterval(\n            () => saveGame(gameState),\n            30000\n        );\n        this.gameState = gameState;\n        this.updateState(gameState);\n        this.tickRatio = TICK_SPEED / 1000; // Default: 50ms / 1000ms, multiply by how many per second you want\n        this.maxTicks = (5 * 1000) / TICK_SPEED;\n        this.emitTick = onTick;\n        this.lastTickDate = new Date(gameState.saveTime); //Easy offline progress solution?\n    }\n\n    private calibrate() {\n        const tickTimeStamp = new Date();\n        const seconds = (tickTimeStamp.getTime() - this.lastTickDate.getTime()) / 1000;\n        this.lastTickDate = tickTimeStamp;\n        this.tickRatio = seconds;\n        this.randomEventTimer += seconds;\n    }\n\n    private manageRandomEvent(newState: GameState) {\n        if(this.randomEventTimer >= SECONDS_PER_EVENT_CHECK ) {\n            // every 5s, test for an event\n\n            randomEventsForDuration(newState, Math.floor(this.randomEventTimer / SECONDS_PER_EVENT_CHECK));\n            this.randomEventTimer = 0;\n        }\n    }\n\n    tick() {\n        this.calibrate();\n        const newState = {...this.gameState};\n\n        // Rates & Stats\n        let relicsPerSecond = 0;\n        let knowledgePerSecond = 0;\n        let moneyPerSecond = 0;\n\n        // Calculate rates and side effects\n        if(this.gameState.jobAssignments.gatherRelics) {\n            const relicsMultiplier = 1\n                + (this.gameState.researchState.betterShovels ? .5 : 0);\n            relicsPerSecond = this.gameState.jobAssignments.gatherRelics*.5*relicsMultiplier;\n        }\n        if(this.gameState.jobAssignments.studyRelics && this.gameState.resourceState.relics >= this.gameState.jobAssignments.gatherRelics*10*this.tickRatio) {\n            const relicConsumptionRate = this.gameState.jobAssignments.studyRelics*10;\n            relicsPerSecond -= relicConsumptionRate;\n            knowledgePerSecond = this.gameState.jobAssignments.studyRelics*.1;\n        }\n        if(this.gameState.researchState.profiteering) {\n            moneyPerSecond = .25;\n            if(this.gameState.jobAssignments.giftShop) {\n                moneyPerSecond += this.gameState.jobAssignments.giftShop*.125;\n                relicsPerSecond -= this.gameState.jobAssignments.giftShop*2.5;\n            }\n        }\n\n        // Apply rates to resources\n        newState.resourceState.money     += moneyPerSecond      *this.tickRatio;\n        newState.resourceState.relics    += relicsPerSecond     *this.tickRatio;\n        newState.resourceState.knowledge += knowledgePerSecond  *this.tickRatio;\n\n        // Apply caps\n        const relicCap = BASE_RELIC_CAP + this.gameState.resourceState.sheds*50;\n        if(newState.resourceState.relics >= relicCap) newState.resourceState.relics = relicCap;\n        newState.resourceState.relicCap = relicCap;\n\n        let moneyCap = BASE_MONEY_CAP;\n        if(newState.researchState.banksOpen) moneyCap += 50;\n        if(newState.resourceState.banks > 0) moneyCap += newState.resourceState.banks * 50;\n        if(newState.resourceState.money >= moneyCap) newState.resourceState.money = moneyCap;\n        newState.resourceState.moneyCap = moneyCap;\n\n        let knowledgeCap = BASE_KNOWLEDGE_CAP + this.gameState.resourceState.students*5;\n        if(newState.resourceState.knowledge >= knowledgeCap) newState.resourceState.knowledge = knowledgeCap;\n        newState.resourceState.knowledgeCap = knowledgeCap;\n\n        // Aggregate stats\n        newState.resourceState.relicRate     = relicsPerSecond;\n        newState.resourceState.moneyRate     = moneyPerSecond;\n        newState.resourceState.knowledgeRate = knowledgePerSecond;\n\n        // Kick off any events that have transpired\n        this.manageRandomEvent(newState);\n\n        // Save and output\n        this.gameState = newState;\n        this.emitTick(newState);\n    }\n\n    updateState(gameState: GameState) {\n        clearInterval(this.resourceClockId);\n        this.resourceClockId = setInterval(() => this.tick(), TICK_SPEED);\n    }\n\n    clearClock() {\n        clearInterval(this.resourceClockId);\n        clearInterval(this.saveClockId);\n    }\n\n}\n","import * as React from \"react\";\nimport {JournalState} from \"../core/game-state\";\nimport {RelicsButton} from \"../shared/relicsButton\";\nimport {ACHIEVEMENT_ENTRY_TYPE, BLOOD_ENTRY_TYPE, COMMON_ENTRY_TYPE, DetailedEntry} from \"../core/journal\";\n\ntype JournalProps = {\n    journalState: JournalState,\n    clearLog: any\n}\n\nexport class AdventureLog extends React.Component<JournalProps> {\n    getClassName(entry: DetailedEntry) {\n        let className = \"padded-text journal__entry\";\n        switch (entry.entryType) {\n            case ACHIEVEMENT_ENTRY_TYPE:\n                className += \" journal__entry--achievement\";\n                break;\n            case BLOOD_ENTRY_TYPE:\n                className += \" blood-text\";\n                break;\n            case COMMON_ENTRY_TYPE:\n            default:\n        }\n        return className;\n    }\n\n    render() {\n        const { journalState, clearLog } = this.props;\n        const entryList = journalState.entries.slice(0).reverse().map((entry) =>\n            <div className={this.getClassName(entry)}>\n                {entry.entry}\n            </div>\n        );\n        return (\n            <div className=\"panel--left-align journal-panel\">\n                <div className=\"button-container\">\n                    <RelicsButton onClick={() => clearLog()}>Clear Log</RelicsButton>\n                </div>\n                <div className=\"journal\">{entryList}</div>\n            </div>\n        );\n    }\n}\n","import * as React from \"react\";\nimport { GameState } from \"../core/game-state\";\nimport {countAvailableStudents} from \"../economy/jobAssignments\";\n\ntype ResourceProps = {\n    gameState: GameState,\n}\n\ntype ResourcePanelEntryProps = {\n    rate?: number;\n    cap?: number;\n    className?: string;\n}\n\nexport class ResourcePanelEntry extends React.Component<ResourcePanelEntryProps> {\n    render() {\n        const renderRate = this.props.rate !== undefined && this.props.rate !== 0;\n        const rateText = this.props.rate + \"/s\";\n        const renderCap = this.props.cap !== undefined && this.props.cap !== 0;\n\n        return (\n            <div className=\"resources__entry\">\n                <div className={this.props.className}>\n                    {this.props.children}\n                    {this.props.cap && (\n                        <span className=\"resources__rate\">/{this.props.cap}</span>\n                    )}\n                </div>\n                <div className=\"resources__rate\">{renderRate && rateText}</div>\n            </div>\n        );\n    }\n}\nexport class ResourcePanel extends React.Component<ResourceProps> {\n    render() {\n        const { gameState } = this.props;\n\n        return (\n            <div>\n                <div className=\"panel--center-align resources__container\">\n                    {!!gameState.resourceState.relics &&\n                        <ResourcePanelEntry rate={gameState.resourceState.relicRate}\n                                            cap={gameState.resourceState.relicCap}>\n                            Relics: {gameState.resourceState.relics.toFixed()}\n                        </ResourcePanelEntry>}\n                    {gameState.researchState.profiteering &&\n                        <ResourcePanelEntry className=\"money-text\" rate={gameState.resourceState.moneyRate}\n                                            cap={gameState.resourceState.moneyCap}>\n                            Money: {gameState.resourceState.money.toFixed()}\n                        </ResourcePanelEntry>}\n                    {!!gameState.resourceState.knowledge &&\n                        <ResourcePanelEntry className=\"knowledge-text\" rate={gameState.resourceState.knowledgeRate}\n                                            cap={gameState.resourceState.knowledgeCap}>\n                            Knowledge: {gameState.resourceState.knowledge.toFixed()}\n                        </ResourcePanelEntry>}\n                    {!!gameState.resourceState.blood &&\n                        <ResourcePanelEntry className=\"blood-text\">\n                            Blood: {gameState.resourceState.blood.toFixed()}\n                        </ResourcePanelEntry>}\n                </div>\n                {!!gameState.resourceState.students &&\n                    <div className=\"panel--center-align resources__container\">\n                        <div>Students: {countAvailableStudents(gameState)}/{gameState.resourceState.students}</div>\n                    </div>\n                }\n            </div>\n        );\n    }\n}\n","import React from \"react\";\n\ntype NavButtonProps = {\n  onClick: any;\n  disabled?: any | undefined;\n  selected?: boolean | undefined;\n}\n\nexport class NavButton extends React.Component<NavButtonProps> {\n\n    render() {\n        let className = \"nav-button\";\n        if(this.props.disabled) className += \" nav-button--disabled\";\n        if(this.props.selected) className += \" nav-button--selected\";\n\n        const clickFunc = this.props.disabled ? () => {} : this.props.onClick;\n        return (\n            <span\n                className={className}\n                onClick={clickFunc}>\n                {this.props.children}\n            </span>\n        )\n    }\n}","import React from \"react\";\nimport {GENERATORS_PANEL_KEY, LAB_KEY, SETTINGS_PANEL_KEY} from \"../config/constants\";\nimport {NavButton} from \"./navButton\";\nimport {GameState} from \"../core/game-state\";\n\ntype PanelSelectorProps = {\n    onChangePanel: any,\n    selected: string,\n    gameState: GameState\n}\nexport class PanelSelector extends React.Component<PanelSelectorProps>{\n    render() {\n        const {onChangePanel, selected, gameState} = this.props;\n        let name = \"Dig Site\";\n        return (\n            <div className={\"nav-panel\"}>\n                <NavButton selected={selected === GENERATORS_PANEL_KEY}\n                           onClick={() => onChangePanel(GENERATORS_PANEL_KEY)}>\n                    {name}\n                </NavButton>\n                {(gameState.resourceState.students >= 10 || gameState.achievements.labUnlocked) &&\n                    <NavButton selected={selected === LAB_KEY}\n                               onClick={() => onChangePanel(LAB_KEY)}>\n                        Research Lab\n                    </NavButton>\n                }\n\n                <NavButton selected={selected === SETTINGS_PANEL_KEY}\n                           onClick={() => onChangePanel(SETTINGS_PANEL_KEY)}>\n                    Settings\n                </NavButton>\n            </div>\n        );\n    }\n}\n","import {GameState} from \"../../core/game-state\";\nimport {Transaction} from \"../Transaction\";\nimport React from \"react\";\n\nexport class KnowledgeTransaction extends Transaction {\n    static updateClock = false;\n\n    static commitTransaction(gameState: GameState, amount: number): GameState {\n        if(KnowledgeTransaction.isValidPurchase(gameState, amount)) {\n            const currCost = KnowledgeTransaction.getCost(gameState, amount);\n\n            gameState.resourceState.relics -= currCost;\n            gameState.resourceState.knowledge += amount;\n        }\n        return gameState;\n    }\n\n    static isValidPurchase(gameState: GameState, amount: number): boolean {\n        const currCost = KnowledgeTransaction.getCost(gameState, amount);\n        return gameState.resourceState.relics >= currCost;\n    }\n\n    static getCost(gameState: GameState, purchaseAmount: number) {\n        return 100 * purchaseAmount;\n    }\n\n    static buildTooltip(gameState: GameState): any {\n        return (\n            <div className=\"relics-tooltip\">\n                <div className=\"relics-tooltip__description\">\n                    Peruse your collection, perhaps you can find something useful.\n                </div>\n                <div className=\"relics-tooltip__cost\">\n                    <div>Relics: 100</div>\n                </div>\n            </div>\n        );\n    }\n}\n","import {Research} from \"../Transaction\";\nimport {GameState} from \"../../core/game-state\";\nimport {ACHIEVEMENT_ENTRY_TYPE, addDetailedJournalEntry} from \"../../core/journal\";\nimport React from \"react\";\n\nexport class BetterShovels extends Research {\n    static updateClock = false;\n\n    static commitTransaction(gameState: GameState, amount: number): GameState {\n        if(BetterShovels.isValidPurchase(gameState, amount)) {\n            gameState.resourceState.money -= 25;\n            gameState.researchState.betterShovels = true;\n            addDetailedJournalEntry(gameState, {\n                entry: \"+1 Shovel\",\n                entryType: ACHIEVEMENT_ENTRY_TYPE\n            });\n        }\n        return gameState;\n    }\n\n    static isValidPurchase(gameState: GameState, amount: number): boolean {\n        return gameState.resourceState.money >= 25;\n    }\n\n    static buildTooltip(gameState: GameState): any {\n        return (\n            <div className=\"relics-tooltip\">\n                <div className=\"relics-tooltip__description\">\n                    Buy the team their very first shovel. It's better than none.\n                    <br/>Student base gathering rate +.5 relics/s\n                </div>\n                <div className=\"relics-tooltip__cost\">\n                    <div className=\"money-text\">Money: 25</div>\n                </div>\n            </div>\n        );\n    }\n\n    static isAvailable(gameState: GameState): boolean {\n        return gameState.researchState.profiteering && !gameState.researchState.betterShovels;\n    }\n\n    static title = \"Better Shovels\";\n    static id = \"better-shovels\";\n    static className = \"money-button\";\n}\n","import React from \"react\";\nimport {Research} from \"../Transaction\";\nimport {GameState} from \"../../core/game-state\";\nimport {addDetailedJournalEntry, BLOOD_ENTRY_TYPE} from \"../../core/journal\";\n\nexport class BloodWard extends Research {\n    static updateClock = false;\n\n    static commitTransaction(gameState: GameState, amount: number): GameState {\n        if(BloodWard.isValidPurchase(gameState, amount)) {\n            gameState.resourceState.relics -= 100;\n            gameState.resourceState.blood -= 1;\n            gameState.resourceState.knowledge -= 20;\n\n            gameState.researchState.bloodWard = true;\n            addDetailedJournalEntry(gameState, {\n                entry: \"Following instructions on the ruins, you assemble a ward. That should protect this place.\",\n                entryType: BLOOD_ENTRY_TYPE\n            });\n        }\n        return gameState;\n    }\n\n    static isValidPurchase(gameState: GameState, amount: number): boolean {\n        return gameState.resourceState.blood >= 1 && gameState.resourceState.knowledge >= 20 && gameState.resourceState.relics >= 100;\n    }\n\n    static buildTooltip(gameState: GameState): any {\n        return (\n            <div className=\"relics-tooltip\">\n                <div className=\"relics-tooltip__description\">\n                    The excavated ruins are carved with a repeating pattern, and no one has disappeared in there yet.\n                </div>\n                <div className=\"relics-tooltip__cost\">\n                    <div>Relics: 100</div>\n                    <div className=\"knowledge-text\">Knowledge: 20</div>\n                    <div className=\"blood-text\">Blood: 1</div>\n                </div>\n            </div>\n        );\n    }\n\n    static isAvailable(gameState: GameState): boolean {\n        return gameState.researchState.profiteering && !gameState.researchState.bloodWard;\n    }\n\n    static title = \"Inscribe a ward\";\n    static id = \"blood-ward\";\n    static className = \"blood-button\";\n}","import {Research} from \"../Transaction\";\nimport {GameState} from \"../../core/game-state\";\nimport {ACHIEVEMENT_ENTRY_TYPE, addDetailedJournalEntry} from \"../../core/journal\";\nimport React from \"react\";\n\nexport class Profit extends Research {\n    static updateClock = false;\n\n    static commitTransaction(gameState: GameState, amount: number): GameState {\n        if(Profit.isValidPurchase(gameState, amount)) {\n            gameState.resourceState.knowledge -= 10;\n            gameState.researchState.profiteering = true;\n            addDetailedJournalEntry(gameState, {\n                entry: \"A patron finds your work interesting, and provides a slow but steady drip of funding.\",\n                entryType: ACHIEVEMENT_ENTRY_TYPE\n            });\n        }\n        return gameState;\n    }\n\n    static isValidPurchase(gameState: GameState, amount: number): boolean {\n        return gameState.resourceState.knowledge >= 10;\n    }\n\n    static buildTooltip(gameState: GameState): any {\n        return (\n            <div className=\"relics-tooltip\">\n                <div className=\"relics-tooltip__description\">\n                    With your student's help, you know enough now to fund this endeavor.\n                    A little embellishment never hurt...\n                </div>\n                <div className=\"relics-tooltip__cost\">\n                    <div className=\"knowledge-text\">Knowledge: 10</div>\n                </div>\n            </div>\n        );\n    }\n\n    static isAvailable(gameState: GameState): boolean {\n        return gameState.researchState.studentKnowledge && !gameState.researchState.profiteering;\n    }\n\n    static title = \"Procure Funding\";\n    static id = \"profiteering\";\n    static className = \"money-button\";\n}","import {Research} from \"../Transaction\";\nimport {GameState} from \"../../core/game-state\";\nimport React from \"react\";\n\nexport class StudentKnowledge extends Research {\n    static updateClock = false;\n\n    static commitTransaction(gameState: GameState, amount: number): GameState {\n        if(StudentKnowledge.isValidPurchase(gameState, amount)) {\n            gameState.resourceState.knowledge -= 5;\n            gameState.researchState.studentKnowledge = true;\n        }\n        return gameState;\n    }\n\n    static isValidPurchase(gameState: GameState, amount: number): boolean {\n        return gameState.resourceState.knowledge >= 5;\n    }\n\n    static buildTooltip(gameState: GameState): any {\n        return (\n            <div className=\"relics-tooltip\">\n                <div className=\"relics-tooltip__description\">\n                    I know enough about this to teach others to do the work, albeit at a reduced efficiency.\n                </div>\n                <div className=\"relics-tooltip__cost\">\n                    <div className=\"knowledge-text\">Knowledge: 5</div>\n                </div>\n            </div>\n        );\n    }\n    static isAvailable(gameState: GameState): boolean {\n        return !gameState.researchState.studentKnowledge;\n    }\n\n    static title = \"Studious Students\";\n    static id = \"student-knowledge\";\n    static className = \"knowledge-button\";\n}\n","import {Research} from \"../Transaction\";\nimport {GameState} from \"../../core/game-state\";\nimport React from \"react\";\n\nexport class MapTheRuins extends Research {\n    static updateClock = false;\n\n    static commitTransaction(gameState: GameState, amount: number): GameState {\n        if(MapTheRuins.isValidPurchase(gameState, amount)) {\n            gameState.resourceState.knowledge -= 1;\n            gameState.researchState.mapTheGrounds = true;\n        }\n        return gameState;\n    }\n\n    static isValidPurchase(gameState: GameState, amount: number): boolean {\n        return gameState.resourceState.knowledge >= 1;\n    }\n\n    static buildTooltip(gameState: GameState): any {\n        return (\n            <div className=\"relics-tooltip\">\n                <div className=\"relics-tooltip__description\">\n                    These relics seem to be found near a few particular features.\n                    <br/>Increases manual base relic search rate by 1.\n                </div>\n                <div className=\"relics-tooltip__cost\">\n                    <div className=\"knowledge-text\">Knowledge: 1</div>\n                </div>\n            </div>\n        );\n    }\n    static isAvailable(gameState: GameState): boolean {\n        return !gameState.researchState.mapTheGrounds;\n    }\n\n    static title = \"Map the Ruins\";\n    static id = \"map-ruins\";\n    static className = \"knowledge-button\";\n}\n","import {Research} from \"../Transaction\";\nimport {GameState} from \"../../core/game-state\";\nimport {ACHIEVEMENT_ENTRY_TYPE, addDetailedJournalEntry, COMMON_ENTRY_TYPE} from \"../../core/journal\";\nimport React from \"react\";\n\nexport class Tours extends Research {\n    static updateClock = false;\n\n    static commitTransaction(gameState: GameState, amount: number): GameState {\n        if(Tours.isValidPurchase(gameState, amount)) {\n            gameState.resourceState.knowledge -= 25;\n            gameState.researchState.tours = true;\n            addDetailedJournalEntry(gameState, {\n                entry: \"Wait, people will pay to see this place?\",\n                entryType: COMMON_ENTRY_TYPE\n            });\n        }\n        return gameState;\n    }\n\n    static isValidPurchase(gameState: GameState, amount: number): boolean {\n        return gameState.resourceState.knowledge >= 25;\n    }\n\n    static buildTooltip(gameState: GameState): any {\n        return (\n            <div className=\"relics-tooltip\">\n                <div className=\"relics-tooltip__description\">\n                    You form a committee of students to think very hard about how to make more money.\n                </div>\n                <div className=\"relics-tooltip__cost\">\n                    <div className=\"knowledge-text\">Knowledge: 25</div>\n                </div>\n            </div>\n        );\n    }\n\n    static isAvailable(gameState: GameState): boolean {\n        return gameState.researchState.profiteering && !gameState.researchState.tours;\n    }\n\n    static title = \"More funding\";\n    static id = \"tours\";\n    static className = \"money-button\";\n}","import {Research} from \"../Transaction\";\nimport {GameState} from \"../../core/game-state\";\nimport {ACHIEVEMENT_ENTRY_TYPE, addDetailedJournalEntry} from \"../../core/journal\";\nimport React from \"react\";\n\nexport class Banks extends Research {\n    static updateClock = false;\n\n    static commitTransaction(gameState: GameState, amount: number): GameState {\n        if(Banks.isValidPurchase(gameState, amount)) {\n            gameState.resourceState.knowledge -= 20;\n            gameState.resourceState.money -= 20;\n            gameState.researchState.banksOpen = true;\n        }\n        addDetailedJournalEntry(gameState, {\n            entry: \"+50 money cap\",\n            entryType: ACHIEVEMENT_ENTRY_TYPE\n        });\n        return gameState;\n    }\n\n    static isValidPurchase(gameState: GameState, amount: number): boolean {\n        return gameState.resourceState.knowledge >= 20\n            && gameState.resourceState.money >= 30;\n    }\n\n    static buildTooltip(gameState: GameState): any {\n        return (\n            <div className=\"relics-tooltip\">\n                <div className=\"relics-tooltip__description\">\n                    We have a load of money and no way to have more loads of money.\n                    <br/>Increase money cap +50 and unlock a way to do it more.\n                </div>\n                <div className=\"relics-tooltip__cost\">\n                    <div className=\"money-text\">Money: 30</div>\n                    <div className=\"knowledge-text\">Knowledge: 20</div>\n                </div>\n            </div>\n        );\n    }\n\n    static isAvailable(gameState: GameState): boolean {\n        return gameState.researchState.tours && !gameState.researchState.banksOpen;\n    }\n\n    static title = \"Bigger Wallets\";\n    static id = \"banks\";\n    static className = \"money-button\";\n}","import {GameState} from \"../core/game-state\";\nimport {Research} from \"./Transaction\";\nimport {BetterShovels} from \"./research/betterShovels\";\nimport {BloodWard} from \"./research/bloodWard\";\nimport {Profit} from \"./research/profit\";\nimport {StudentKnowledge} from \"./research/studentKnowledge\";\nimport {MapTheRuins} from \"./research/mapTheRuins\";\nimport {Tours} from \"./research/tours\";\nimport {Banks} from \"./research/banks\";\n\nexport const allResearches: typeof Research[] = [\n    BetterShovels,\n    BloodWard,\n    Profit,\n    StudentKnowledge,\n    MapTheRuins,\n    Tours,\n    Banks\n];\n\nexport function getAvailableResearches(gameState: GameState): typeof Research[] {\n    return allResearches.filter((r) => r.isAvailable(gameState));\n}\n","import React from \"react\";\nimport {RelicsButton} from \"./relicsButton\";\nimport {Research} from \"../economy/Transaction\";\nimport {GameState} from \"../core/game-state\";\n\ntype ResearchButtonProps = {\n    research: typeof Research;\n    gameState: GameState;\n    onPurchase: any;\n}\n\nexport class ResearchButton extends React.Component<ResearchButtonProps>{\n    render() {\n        const {gameState, research, onPurchase} = this.props;\n        return (\n            <RelicsButton\n                disabled={!research.isValidPurchase(gameState, 1)}\n                onClick={() => onPurchase(1, research.commitTransaction)}\n                id={research.id}\n                key={research.id}\n                className={research.className}\n                tooltip={research.buildTooltip(gameState)}\n            >\n                {research.title}\n            </RelicsButton>\n        );\n    }\n}","import React from \"react\";\nimport {GameState} from \"../core/game-state\";\nimport {labFirstUnlock} from \"../core/achievements\";\nimport {RelicsButton} from \"../shared/relicsButton\";\nimport {KnowledgeTransaction} from \"../economy/transactions/KnowledgeTransaction\";\nimport {AssignWorkerOptions} from \"../shared/AssignWorkerOptions\";\nimport {\n    assignStudyRelics,\n    countAvailableStudents,\n    removeStudyRelics\n} from \"../economy/jobAssignments\";\nimport {getAvailableResearches} from \"../economy/researchManager\";\nimport {ResearchButton} from \"../shared/researchButton\";\nimport {Research} from \"../economy/Transaction\";\n\ntype LabProps = {\n    gameState: GameState;\n    onPurchase: any;\n}\n\nexport class ResearchLab extends React.Component<LabProps> {\n    componentDidMount(): void {\n        labFirstUnlock(this.props.gameState);\n    }\n\n    assignStudentsStudy = (amount: number) => assignStudyRelics(amount, this.props.gameState);\n    removeStudentsStudy = (amount: number) => removeStudyRelics(amount, this.props.gameState);\n\n    createResearchButton(research: typeof Research): any {\n        return (\n            <ResearchButton key={research.id} research={research} gameState={this.props.gameState} onPurchase={this.props.onPurchase}/>\n        );\n    }\n\n    render() {\n        const { gameState, onPurchase } = this.props;\n        const availableStudents = countAvailableStudents(gameState);\n        const availableResearch = getAvailableResearches(gameState).map((research) => this.createResearchButton(research));\n\n        return (\n            <div>\n                <div className=\"button-container\">\n                    <RelicsButton\n                        disabled={!KnowledgeTransaction.isValidPurchase(gameState, 1)}\n                        onClick={() => onPurchase(1, KnowledgeTransaction.commitTransaction)}\n                        id=\"studyRelics\"\n                        tooltip={KnowledgeTransaction.buildTooltip(gameState)}\n                    >\n                        Study Relics\n                    </RelicsButton>\n                </div>\n                {gameState.researchState.studentKnowledge &&\n                    <div>\n                        <AssignWorkerOptions\n                            id=\"studentsStudying\"\n                            assignWorkers={(amount: number) =>this.assignStudentsStudy(amount)}\n                            removeWorkers={(amount:number) => this.removeStudentsStudy(amount)}\n                            currentlyAssigned={gameState.jobAssignments.studyRelics}\n                            availableWorkers={availableStudents}\n                            tooltip={\"Produces 1 knowledge per 100 relics.\"}\n                        >\n                            Student Studying Relics\n                        </AssignWorkerOptions>\n                    </div>\n                }\n\n                <div>\n                    <p>Research</p>\n                    { availableResearch }\n                </div>\n            </div>\n        );\n    }\n}\n","import {GameState} from \"./game-state\";\nimport {ACHIEVEMENT_ENTRY_TYPE, addDetailedJournalEntry} from \"./journal\";\n\nexport function labFirstUnlock(gameState: GameState) {\n    if(!gameState.achievements.labUnlocked) {\n        gameState.achievements.labUnlocked = true;\n        addDetailedJournalEntry(gameState, {\n            entry: \"With your new found stash of relics, you retreat to your personal laboratory!\",\n            entryType: ACHIEVEMENT_ENTRY_TYPE,\n        });\n    }\n}\n","import * as React from \"react\";\nimport {loadSave, newSave, saveGame, saveGameExists} from \"./saveService\";\nimport {RelicPanel} from \"../panels/relicPanel\";\nimport {Settings} from \"../panels/settings\";\nimport {GameState} from \"./game-state\";\nimport {GameClock} from \"./game-clock\";\nimport {GENERATORS_PANEL_KEY, LAB_KEY, SETTINGS_PANEL_KEY} from \"../config/constants\";\nimport {addJournalEntry, clearJournal} from \"./journal\";\nimport {AdventureLog} from \"../panels/adventureLog\";\nimport {ResourcePanel} from \"../panels/resourcePanel\";\nimport {PanelSelector} from \"../layout/panelSelector\";\nimport {ResearchLab} from \"../panels/lab\";\n\ntype CoreProps = {}\ntype CoreState = {\n    gameState: GameState,\n    activePanel: string\n}\n\nexport class CorePanel extends React.Component<CoreProps, CoreState> {\n    clock: GameClock | undefined;\n    readonly state = {\n        gameState: saveGameExists() ? loadSave() : newSave(),\n        activePanel: GENERATORS_PANEL_KEY\n    };\n\n    componentDidMount(): void {\n        // TODO: Calculate offline progress before starting clock\n        this.clock = new GameClock(this.state.gameState, (newState: GameState) => this.onTick(newState));\n        this.setState({activePanel: GENERATORS_PANEL_KEY});\n    }\n\n    onTick(newState: GameState) {\n        this.setState({gameState: newState});\n    }\n\n    addCurrency(currencyName: string, currencyAmount: number) {\n        const newState = {...this.state.gameState};\n        let relicRate = currencyAmount;\n        if(this.state.gameState.researchState.mapTheGrounds) relicRate += 1;\n        newState.resourceState.relics += relicRate;\n        if(newState.resourceState.relics > newState.resourceState.relicCap) newState.resourceState.relics = newState.resourceState.relicCap;\n        addJournalEntry(newState, \"You dust off some potsherds.\");\n        this.setState({gameState: newState})\n    }\n\n    makePurchase(purchaseAmount: number, transaction: any) {\n        let newState = {...this.state.gameState};\n        newState = transaction(newState, purchaseAmount);\n\n        this.setState({gameState: newState});\n        // if(purchaseType.updateClock) {\n        //     // @ts-ignore\n        //     this.clock.updateState(newState);\n        // }\n    }\n\n    clearLog() {\n        clearJournal(this.state.gameState)\n    }\n\n    changeActivePanel(panelKey: string) {\n        this.setState({activePanel: panelKey});\n    }\n\n    save() {\n        const newState = {...this.state.gameState};\n        this.setState({gameState: newState});\n        saveGame(newState, true);\n    }\n\n    clearSave() {\n        // eslint-disable-next-line no-restricted-globals\n        const response = confirm(\"Are you sure you want to clear your save?\");\n        if (!response) {\n            return;\n        }\n        // @ts-ignore\n        this.clock.clearClock();\n        const newState = newSave();\n        newState.saveTime = new Date();\n        this.setState({gameState: newState});\n        saveGame(newState);\n        // eslint-disable-next-line no-restricted-globals\n        location.reload();\n    }\n\n    render() {\n        let activePanel;\n        switch (this.state.activePanel) {\n            case SETTINGS_PANEL_KEY:\n                activePanel = (\n                    <Settings\n                        gameState={this.state.gameState}\n                        onSave={() => this.save()}\n                        onClearSave={() => this.clearSave()}\n                    />\n                );\n                break;\n            case LAB_KEY:\n                activePanel = (\n                    <ResearchLab\n                        gameState={this.state.gameState}\n                        onPurchase={(purchaseAmount: number, transaction: any) => this.makePurchase(purchaseAmount, transaction)}\n                    />\n                );\n                break;\n            case GENERATORS_PANEL_KEY:\n            default:\n                activePanel = (\n                    <RelicPanel\n                        gameState={this.state.gameState}\n                        onAddCurrency={(currencyName: string, currencyAmount: number) => this.addCurrency(currencyName, currencyAmount)}\n                        onPurchase={(purchaseAmount: number, transaction: any) => this.makePurchase(purchaseAmount, transaction)}\n                    />\n                );\n        }\n\n        return (\n            <div className=\"core-panel\">\n                <div className=\"core-panel__flex\">\n                    <div className=\"core-panel__left-column\">\n                        <AdventureLog clearLog={() => this.clearLog()} journalState={this.state.gameState.journalState}/>\n                    </div>\n                    <div className=\"core-panel__center-column\">\n                        <PanelSelector onChangePanel={(panelKey: string) => this.changeActivePanel(panelKey)}\n                            selected={this.state.activePanel}\n                            gameState={this.state.gameState}\n                        />\n                        {activePanel}\n                    </div>\n                    <div className=\"core-panel__right-column\">\n                        <ResourcePanel gameState={this.state.gameState}/>\n                    </div>\n                </div>\n\n            </div>\n        );\n    }\n}\n","import React from 'react';\nimport './app.scss';\nimport {CorePanel} from \"./core/corePanel\";\nimport {ThemeContext, themes} from \"./layout/theme-context\";\nimport {loadSave, saveGameExists} from \"./core/saveService\";\n\ntype AppProps = {}\ntype AppState = {\n    theme: any,\n    toggleTheme: () => {}\n}\n\nclass App extends React.Component<AppProps, AppState> {\n    readonly state: AppState;\n    toggleTheme: any;\n\n    constructor(props: any) {\n        super(props);\n        const darkMode = saveGameExists() && loadSave().settings.darkMode;\n\n        this.toggleTheme = () => {\n            this.setState(state => ({\n                theme:\n                    state.theme === themes.dark\n                        ? themes.light\n                        : themes.dark,\n            }));\n        };\n\n        this.state = {\n            theme: darkMode ? themes.dark : themes.light,\n            toggleTheme: this.toggleTheme,\n        };\n\n    }\n\n    render() {\n        return (\n                <ThemeContext.Provider value={this.state}>\n                    <div className={this.state.theme.themeClass}>\n                        <CorePanel/>\n                    </div>\n                </ThemeContext.Provider>\n        );\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resource-display are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './app';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}