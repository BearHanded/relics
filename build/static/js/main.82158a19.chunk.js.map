{"version":3,"sources":["core/game-state.ts","core/saveService.ts","layout/Header.tsx","economy/transactions/studentTransaction.ts","economy/jobAssignments.ts","panels/relicPanel.tsx","layout/theme-context.ts","settings/Settings.tsx","core/journal.ts","config/constants.ts","core/event-manager.ts","core/game-clock.ts","layout/PanelSelector.tsx","panels/adventureLog.tsx","panels/resourcePanel.tsx","core/corePanel.tsx","app.tsx","serviceWorker.ts","index.tsx"],"names":["GameState","resourceState","ResourceState","jobAssignments","JobAssignments","journalState","JournalState","saveTime","Date","settings","SettingsState","relics","relicGenerator","students","money","gatherRelics","entries","darkMode","saveGameExists","localStorage","getItem","loadSave","string","save","JSON","parse","atob","newSave","saveGame","gameState","setItem","btoa","stringify","Header","this","getStory","React","StudentTransaction","updateClock","amount","isValidPurchase","currCost","getCost","purchaseAmount","sum","theoreticalAmt","i","countAvailableStudents","assignedStudents","RelicPanel","studentTransaction","assignGatherers","props","removeGatherers","onAddCurrency","onPurchase","availableStudents","onClick","disabled","assignGather","removeGather","data-tip","data-for","id","place","effect","themes","light","themeClass","dark","ThemeContext","createContext","theme","toggleTheme","Settings","onSave","onClearSave","Consumer","onToggleTheme","toString","Component","addJournalEntry","entry","push","length","shift","randomEvent","diceRoll","Math","floor","random","console","log","GameClock","onTick","saveClockId","resourceClockId","tickRatio","emitTick","maxTicks","tickNumber","setInterval","updateState","TICK_SPEED","newState","clearInterval","tick","PanelSelector","onChangePanel","AdventureLog","clearLog","entryList","map","ResourcePanel","toFixed","CorePanel","clock","state","activePanel","setState","currencyName","currencyAmount","purchaseType","commitTransaction","panelKey","clearClock","location","reload","clearSave","addCurrency","makePurchase","className","changeActivePanel","App","Provider","value","Boolean","window","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.82158a19.chunk.js","sourcesContent":["export class GameState {\n    resourceState: ResourceState = new ResourceState();\n    jobAssignments: JobAssignments = new JobAssignments();\n    journalState: JournalState = new JournalState();\n    saveTime: Date = new Date();\n    settings: SettingsState = new SettingsState();\n}\n\nexport class ResourceState {\n    relics: number = 0;\n    relicGenerator: number = 0;\n    students: number = 0;\n    money: number = 0;\n}\n\nexport class JobAssignments {\n    gatherRelics: number = 0;\n}\n\nexport class JournalState {\n    entries: string[] = [\"Where am I?\"];\n}\n\nexport class SettingsState {\n    darkMode: boolean = false;\n}","import {GameState} from \"./game-state\";\n\nexport function saveGameExists() {\n    return !!localStorage.getItem(\"RelicsSave\");\n}\n\nexport function loadSave() {\n    const string = localStorage.getItem(\"RelicsSave\");\n    const save =  string ? JSON.parse(atob(string)) : null;\n    const merged = {...new GameState(), ...save};\n    return merged;\n}\n\nexport function newSave(): GameState {\n    return new GameState();\n}\n\nexport function saveGame(gameState: GameState) {\n    gameState.saveTime = new Date();\n    localStorage.setItem(\"RelicsSave\", btoa(JSON.stringify(gameState)));\n}\n\n\nexport function exportSave(gameState: GameState) {\n    saveGame(gameState);\n    // TODO: export\n}\n","import * as React from \"react\";\nimport {GameState} from \"../core/game-state\";\n\ntype LogProps = {\n    gameState: GameState\n}\n\nexport class Header extends React.Component<LogProps> {\n\n    getStory() {\n        return `These dusty relics are probably worth something!`\n    }\n\n\n    render() {\n        return (\n            <h1>{this.getStory()}</h1>\n        );\n    }\n}\n","import {ITransaction } from \"./ITransaction\";\nimport {GameState} from \"../../core/game-state\";\n\nexport class StudentTransaction implements ITransaction {\n    updateClock = false;\n\n    commitTransaction(gameState: GameState, amount: number): GameState {\n        if(this.isValidPurchase(gameState, amount)) {\n            const currCost = this.getCost(gameState, amount);\n\n            gameState.resourceState.relics -= currCost;\n            gameState.resourceState.students += amount;\n        }\n        return gameState;\n    }\n\n    isValidPurchase(gameState: GameState, amount: number): boolean {\n        const currCost = this.getCost(gameState, amount);\n\n        return gameState.resourceState.relics >= currCost;\n    }\n\n    getCost(gameState: GameState, purchaseAmount: number) {\n        let sum = 0;\n        let theoreticalAmt = gameState.resourceState.students || 0;\n        for (let i = 0; i < purchaseAmount; i++) {\n            sum += 25 + theoreticalAmt * 10;\n            theoreticalAmt++;\n        }\n        return sum;\n    }\n}\n","import {GameState} from \"../core/game-state\";\n\nexport function assignGatherers(amount: number, gameState: GameState){\n    // Cache available in the future?\n    if(countAvailableStudents(gameState) >= amount) {\n        gameState.jobAssignments.gatherRelics += amount;\n    }\n}\n\nexport function removeGatherers(amount: number, gameState: GameState){\n    // Cache available in the future?\n    gameState.jobAssignments.gatherRelics -= amount;\n    if(gameState.jobAssignments.gatherRelics < 0) gameState.jobAssignments.gatherRelics = 0;\n}\n\nexport function countAvailableStudents(gameState: GameState) {\n    const assignedStudents = gameState.jobAssignments.gatherRelics;\n    return gameState.resourceState.students - assignedStudents;\n}","import * as React from \"react\";\nimport { GameState } from \"../core/game-state\";\nimport {RelicGenerator} from \"../economy/transactions/relicGenerator\";\nimport {StudentTransaction} from \"../economy/transactions/studentTransaction\";\nimport ReactTooltip from \"react-tooltip\";\nimport {assignGatherers, countAvailableStudents, removeGatherers} from \"../economy/jobAssignments\";\n\ntype GeneratorProps = {\n    gameState: GameState,\n    onPurchase: any,\n    onAddCurrency: any\n}\n\nexport class RelicPanel extends React.Component<GeneratorProps> {\n    readonly studentTransaction = new StudentTransaction();\n\n    assignGather() {\n        const { gameState } = this.props;\n        assignGatherers(1, gameState);\n    }\n    removeGather() {\n        const { gameState } = this.props;\n        removeGatherers(1, gameState);\n    }\n\n    render() {\n        const { gameState, onAddCurrency, onPurchase } = this.props;\n        const availableStudents = countAvailableStudents(gameState);\n        return (\n            <div>\n                <button onClick={() => onAddCurrency(\"relics\", 1)}>Look for relics</button>\n                <p>\n                    Students working: {gameState.jobAssignments.gatherRelics}\n                    <button\n                        disabled={availableStudents <= 0}\n                        onClick={()=>this.assignGather()}>+</button>\n                    <button\n                        disabled={gameState.jobAssignments.gatherRelics <= 0}\n                        onClick={()=>this.removeGather()}>-</button>\n                </p>\n                <br/>\n                <div>\n                    <div data-tip data-for=\"hireStudent\">\n                        <button disabled={!this.studentTransaction.isValidPurchase(gameState, 1)}\n                                onClick={() => onPurchase(1, this.studentTransaction)}>\n                            Hire a Student\n                        </button>\n                    </div>\n                    <ReactTooltip id=\"hireStudent\" place=\"top\" effect=\"solid\">\n                        Hire some students to dust off relics for you. They work for relics.\n                        Relics: {this.studentTransaction.getCost(gameState, 1)}\n                    </ReactTooltip>\n                </div>\n            </div>\n        );\n    }\n}\n","import React from \"react\";\n\nexport const themes = {\n    light: {\n        themeClass: 'app app--light',\n    },\n    dark: {\n        themeClass: 'app app--dark',\n    },\n};\n\nexport const ThemeContext = React.createContext({\n    theme: themes.dark, // default value\n    toggleTheme: () => {\n    },\n});","import {GameState} from \"../core/game-state\";\nimport {ThemeContext} from \"../layout/theme-context\";\nimport React from \"react\";\n\ntype SettingsProps = {\n    gameState: GameState,\n    onSave: any,\n    onClearSave: any\n}\n\nexport class Settings extends React.Component<SettingsProps> {\n    onToggleTheme(toggleTheme: any) {\n        const { gameState } = this.props;\n        gameState.settings.darkMode = !gameState.settings.darkMode;\n        toggleTheme();\n    }\n    render() {\n        const {onSave, onClearSave} = this.props;\n\n        return (\n            <div>\n                <div>\n                    <button onClick={() => onSave()}>Save</button>\n                    <button onClick={() => onClearSave()}>Clear Save</button>\n                </div>\n                <div>\n                    <ThemeContext.Consumer>\n                        {({theme, toggleTheme}) => (\n                            <button onClick={() => this.onToggleTheme(toggleTheme)}>\n                                Toggle Dark Mode\n                            </button>\n                        )}\n                    </ThemeContext.Consumer>\n                </div>\n                <p>Last Saved at ${this.props.gameState.saveTime ? this.props.gameState.saveTime.toString() : \"\"}</p>\n            </div>\n        );\n    }\n}\n","import {GameState} from \"./game-state\";\nimport {MAX_LOG_SIZE} from \"../config/constants\";\n\nexport function addJournalEntry(gameState: GameState, entry: string){\n    gameState.journalState.entries.push(entry);\n    if(gameState.journalState.entries.length >= MAX_LOG_SIZE) {\n        gameState.journalState.entries.shift();\n    }\n    return gameState;\n}\n\nexport function clearJournal(gameState: GameState) {\n    gameState.journalState.entries = [];\n}","export const MIN_SAVE_REWARD_TIME = 24;\nexport const TICK_SPEED = 50;\nexport const MAX_LOG_SIZE = 25;\n\n// Panel Keys\nexport const SETTINGS_PANEL_KEY = \"SETTINGS\";\nexport const GENERATORS_PANEL_KEY = \"GENERATORS\"","import {GameState} from \"./game-state\";\nimport {addJournalEntry} from \"./journal\";\n\nexport function randomEvent(gameState: GameState) {\n    const diceRoll = roll1d100();\n    console.log(diceRoll);\n    if(diceRoll >= 95) {\n        addJournalEntry(gameState, \"The wind blows across the dusty plain\")\n    }\n    if( 10 <= diceRoll && diceRoll <= 15) {\n        addJournalEntry(gameState, \"A stranger shuffles up and hands something to you: +100 Relics!\")\n        gameState.resourceState.relics += 100\n    }\n}\n\nfunction roll1d100() {\n    return Math.floor(Math.random() * 100 + 1);\n}","import {saveGame} from \"./saveService\";\nimport {GameState} from \"./game-state\";\nimport {TICK_SPEED} from \"../config/constants\";\nimport {randomEvent} from \"./event-manager\";\n\nexport class GameClock {\n    saveClockId: any;\n    resourceClockId: any;\n    gameState: GameState; // Not readonly, we're emitting the changes for the rest of the app\n    tickRatio: number;\n    emitTick: any;\n    maxTicks: number;\n    tickNumber: number = 0;\n\n    constructor(gameState: GameState, onTick: any) {\n        this.saveClockId = setInterval(\n            () => saveGame(gameState),\n            30000\n        );\n        this.gameState = gameState;\n        this.updateState(gameState);\n        this.tickRatio = TICK_SPEED / 1000;\n        this.maxTicks = (5 * 1000) / TICK_SPEED;\n        this.emitTick = onTick;\n    }\n\n    tick() {\n        // TODO: Tickcount, random event on tickcount\n        var newState = {...this.gameState};\n        if(this.gameState.jobAssignments.gatherRelics) {\n            newState.resourceState.relics += this.gameState.jobAssignments.gatherRelics*this.tickRatio;\n        }\n\n        if(this.tickNumber >= this.maxTicks ) {\n            // every 5s, test for an event\n            randomEvent(newState);\n            this.tickNumber = 1;\n        }\n        this.gameState = newState;\n        this.emitTick(newState);\n        this.tickNumber++;\n    }\n\n    updateState(gameState: GameState) {\n        clearInterval(this.resourceClockId);\n        this.resourceClockId = setInterval(() => this.tick(), TICK_SPEED);\n    }\n\n    clearClock() {\n        clearInterval(this.resourceClockId);\n        clearInterval(this.saveClockId);\n    }\n\n}\n","import React from \"react\";\nimport {GENERATORS_PANEL_KEY, SETTINGS_PANEL_KEY} from \"../config/constants\";\n\ntype PanelSelectorProps = {\n    onChangePanel: any\n}\nexport class PanelSelector extends React.Component<PanelSelectorProps>{\n    render() {\n        const {onChangePanel} = this.props;\n        return (\n            <div>\n                <button onClick={() => onChangePanel(GENERATORS_PANEL_KEY)}>The Fields</button>\n                <button onClick={() => onChangePanel(SETTINGS_PANEL_KEY)}>Settings</button>\n            </div>\n        );\n    }\n}","import * as React from \"react\";\nimport {JournalState} from \"../core/game-state\";\n\ntype JournalProps = {\n    journalState: JournalState,\n    clearLog: any\n}\n\nexport class AdventureLog extends React.Component<JournalProps> {\n\n    getStory() {\n        return `These dusty relics are probably worth something!`\n    }\n\n    render() {\n        const { journalState, clearLog } = this.props;\n        const entryList = journalState.entries.map((entry) =>\n            <p>{entry}</p>\n        );\n        return (\n            <div>\n                <button onClick={() => clearLog()}>Clear Log</button>\n                <div>{entryList}</div>\n            </div>\n        );\n    }\n}\n","import * as React from \"react\";\nimport { GameState } from \"../core/game-state\";\nimport {RelicGenerator} from \"../economy/transactions/relicGenerator\";\nimport {countAvailableStudents} from \"../economy/jobAssignments\";\n\ntype ResourceProps = {\n    gameState: GameState,\n}\n\nexport class ResourcePanel extends React.Component<ResourceProps> {\n\n    render() {\n        const { gameState } = this.props;\n        return (\n            <div>\n                <div>Students: {countAvailableStudents(gameState)}/{gameState.resourceState.students}</div>\n                <div>Relics: {gameState.resourceState.relics.toFixed()}</div>\n            </div>\n        );\n    }\n}\n","import * as React from \"react\";\nimport {loadSave, newSave, saveGame, saveGameExists} from \"./saveService\";\nimport {Header} from \"../layout/Header\";\nimport {RelicPanel} from \"../panels/relicPanel\";\nimport {Settings} from \"../settings/Settings\";\nimport {GameState} from \"./game-state\";\nimport {ITransaction} from \"../economy/transactions/ITransaction\";\nimport {GameClock} from \"./game-clock\";\nimport {PanelSelector} from \"../layout/PanelSelector\";\nimport {GENERATORS_PANEL_KEY, SETTINGS_PANEL_KEY} from \"../config/constants\";\nimport {addJournalEntry, clearJournal} from \"./journal\";\nimport {AdventureLog} from \"../panels/adventureLog\";\nimport {ResourcePanel} from \"../panels/resourcePanel\";\n\ntype CoreProps = {}\ntype CoreState = {\n    gameState: GameState,\n    activePanel: string\n}\n\nexport class CorePanel extends React.Component<CoreProps, CoreState> {\n    clock: GameClock | undefined;\n    readonly state = {\n        gameState: saveGameExists() ? loadSave() : newSave(),\n        activePanel: GENERATORS_PANEL_KEY\n    };\n\n    componentDidMount(): void {\n        this.clock = new GameClock(this.state.gameState, (newState: GameState) => this.onTick(newState));\n        this.setState({activePanel: GENERATORS_PANEL_KEY});\n    }\n\n    onTick(newState: GameState) {\n        this.setState({gameState: newState});\n    }\n\n    addCurrency(currencyName: string, currencyAmount: number) {\n        // TODO: Abstract this for manual action & future FAME multiplier\n        const newState = {...this.state.gameState};\n        newState.resourceState.relics += currencyAmount;\n        addJournalEntry(newState, \"You dust off some potsherds.\");\n        this.setState({gameState: newState})\n    }\n\n    makePurchase(purchaseAmount: number, purchaseType: ITransaction) {\n        let newState = {...this.state.gameState};\n        newState = purchaseType.commitTransaction(newState, purchaseAmount);\n\n        this.setState({gameState: newState});\n        if(purchaseType.updateClock) {\n            // @ts-ignore\n            this.clock.updateState(newState);\n        }\n    }\n\n    clearLog() {\n        clearJournal(this.state.gameState)\n    }\n\n    changeActivePanel(panelKey: string) {\n        this.setState({activePanel: panelKey});\n    }\n\n    save() {\n        const newState = {...this.state.gameState};\n        this.setState({gameState: newState});\n        saveGame(newState);\n    }\n\n    clearSave() {\n        // @ts-ignore\n        this.clock.clearClock();\n        const newState = newSave();\n        newState.saveTime = new Date();\n        this.setState({gameState: newState});\n        saveGame(newState);\n        // eslint-disable-next-line no-restricted-globals\n        location.reload();\n    }\n\n    render() {\n        let activePanel;\n        switch (this.state.activePanel) {\n            case SETTINGS_PANEL_KEY:\n                activePanel = (\n                    <Settings\n                        gameState={this.state.gameState}\n                        onSave={() => this.save()}\n                        onClearSave={() => this.clearSave()}\n                    />\n                )\n                break;\n            case GENERATORS_PANEL_KEY:\n            default:\n                activePanel = (\n                    <RelicPanel\n                        gameState={this.state.gameState}\n                        onAddCurrency={(currencyName: string, currencyAmount: number) => this.addCurrency(currencyName, currencyAmount)}\n                        onPurchase={(purchaseAmount: number, purchaseType: ITransaction) => this.makePurchase(purchaseAmount, purchaseType)}\n                    />\n                );\n        }\n\n        return (\n            <div>\n                <header className=\"app-header\">\n                    <Header gameState={this.state.gameState}/>\n                </header>\n                <PanelSelector onChangePanel={(panelKey: string) => this.changeActivePanel(panelKey)}/>\n                <div className=\"core-panel__flex\">\n                    <AdventureLog clearLog={() => this.clearLog()} journalState={this.state.gameState.journalState}/>\n                    {activePanel}\n                    <ResourcePanel gameState={this.state.gameState}/>\n                </div>\n\n            </div>\n        );\n    }\n}\n","import React from 'react';\nimport './app.scss';\nimport {CorePanel} from \"./core/corePanel\";\nimport {ThemeContext, themes} from \"./layout/theme-context\";\nimport {loadSave, newSave, saveGameExists} from \"./core/saveService\";\n\ntype AppProps = {}\ntype AppState = {\n    theme: any,\n    toggleTheme: () => {}\n}\n\nclass App extends React.Component<AppProps, AppState> {\n    readonly state: AppState;\n    toggleTheme: any;\n\n    constructor(props: any) {\n        super(props);\n        const darkMode = saveGameExists() && loadSave().settings.darkMode;\n        console.log(\"MODE\", darkMode);\n\n        this.toggleTheme = () => {\n            this.setState(state => ({\n                theme:\n                    state.theme === themes.dark\n                        ? themes.light\n                        : themes.dark,\n            }));\n        };\n\n        this.state = {\n            theme: darkMode ? themes.dark : themes.light,\n            toggleTheme: this.toggleTheme,\n        };\n\n    }\n\n    render() {\n        return (\n                <ThemeContext.Provider value={this.state}>\n                    <div className={this.state.theme.themeClass}>\n                        <CorePanel/>\n                    </div>\n                </ThemeContext.Provider>\n        );\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resource-display are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './app';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}