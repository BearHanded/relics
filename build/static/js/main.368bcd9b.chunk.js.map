{"version":3,"sources":["core/journal.ts","config/constants.ts","core/game-state.ts","core/saveService.ts","economy/Transaction.ts","economy/transactions/studentTransaction.tsx","economy/jobAssignments.ts","shared/relicsButton.tsx","shared/AssignWorkerOptions.tsx","economy/transactions/shedTransaction.tsx","panels/relicPanel.tsx","layout/theme-context.ts","panels/settings.tsx","core/event-manager.ts","core/game-clock.ts","panels/adventureLog.tsx","panels/resourcePanel.tsx","layout/navButton.tsx","layout/panelSelector.tsx","economy/transactions/KnowledgeTransaction.tsx","economy/research/betterShovels.tsx","economy/research/bloodWard.tsx","economy/research/profit.tsx","economy/research/studentKnowledge.tsx","economy/research/mapTheRuins.tsx","economy/researchManager.ts","shared/researchButton.tsx","panels/lab.tsx","core/achievements.ts","core/corePanel.tsx","app.tsx","serviceWorker.ts","index.tsx"],"names":["addJournalEntry","gameState","entry","journalState","entries","push","entryType","length","shift","addDetailedJournalEntry","GameState","resourceState","ResourceState","jobAssignments","JobAssignments","JournalState","saveTime","Date","settings","SettingsState","achievements","Achievements","researchState","ResearchState","relics","relicCap","relicRate","relicGenerator","sheds","students","knowledge","knowledgeRate","blood","bloodRate","money","moneyRate","moneyCap","fame","whispers","gatherRelics","studyRelics","darkMode","labUnlocked","studentKnowledge","profiteering","betterShovels","bloodWard","mapTheGrounds","saveGameExists","localStorage","getItem","loadSave","string","newState","mergeStateWithDefault","JSON","parse","atob","newSave","saveGame","manualSave","setItem","btoa","stringify","Transaction","isValidPurchase","amount","commitTransaction","updateClock","Research","isAvailable","buildTooltip","title","className","id","StudentTransaction","currCost","getCost","purchaseAmount","sum","theoreticalAmt","i","removeGatherers","assignStudyRelics","countAvailableStudents","removeStudyRelics","assignedStudents","RelicsButton","this","props","tooltip","children","disabled","onClick","compact","clickFunc","dataTipAttr","key","place","effect","React","Component","AssignWorkerOptions","assignWorkers","removeWorkers","currentlyAssigned","availableWorkers","ShedTransaction","RelicPanel","assignGatherers","onAddCurrency","onPurchase","availableStudents","studentsHired","assignGather","removeGather","themes","light","themeClass","dark","ThemeContext","createContext","theme","toggleTheme","Settings","onSave","onClearSave","Consumer","onToggleTheme","href","randomEvent","diceRoll","Math","floor","random","GameClock","onTick","saveClockId","resourceClockId","tickRatio","emitTick","maxTicks","lastTickDate","randomEventTimer","setInterval","updateState","TICK_SPEED","tickTimeStamp","seconds","getTime","randomEventsForDuration","calibrate","relicsPerSecond","knowledgePerSecond","moneyPerSecond","relicsMultiplier","relicConsumptionRate","knowRate","manageRandomEvent","clearInterval","tick","AdventureLog","clearLog","entryList","slice","reverse","map","getClassName","ResourcePanelEntry","renderRate","undefined","rate","rateText","cap","ResourcePanel","toFixed","NavButton","selected","PanelSelector","onChangePanel","KnowledgeTransaction","BetterShovels","BloodWard","Profit","StudentKnowledge","MapTheRuins","allResearches","ResearchButton","research","ResearchLab","assignStudentsStudy","removeStudentsStudy","availableResearch","filter","r","getAvailableResearches","createResearchButton","CorePanel","clock","state","activePanel","setState","currencyName","currencyAmount","transaction","panelKey","clearClock","location","reload","save","clearSave","makePurchase","addCurrency","changeActivePanel","App","Provider","value","Boolean","window","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.368bcd9b.chunk.js","sourcesContent":["import {GameState} from \"./game-state\";\nimport {MAX_LOG_SIZE} from \"../config/constants\";\n\nexport const ACHIEVEMENT_ENTRY_TYPE = \"ACHIEVEMENT\";\nexport const COMMON_ENTRY_TYPE = \"COMMON\";\nexport const BLOOD_ENTRY_TYPE = \"BLOOD\";\n\nexport type DetailedEntry = {\n    entry: string,\n    entryType: string,\n}\n\nexport function addJournalEntry(gameState: GameState, entry: string){\n    gameState.journalState.entries.push({\n        entry: entry,\n        entryType: COMMON_ENTRY_TYPE\n    });\n    if(gameState.journalState.entries.length >= MAX_LOG_SIZE) {\n        gameState.journalState.entries.shift();\n    }\n    return gameState;\n}\n\nexport function addDetailedJournalEntry(gameState: GameState, entry: DetailedEntry){\n    gameState.journalState.entries.push(entry);\n    if(gameState.journalState.entries.length >= MAX_LOG_SIZE) {\n        gameState.journalState.entries.shift();\n    }\n    return gameState;\n}\n\nexport function clearJournal(gameState: GameState) {\n    gameState.journalState.entries = [];\n}\n","export const MIN_SAVE_REWARD_TIME = 24;\nexport const TICK_SPEED = 50;\nexport const SECONDS_PER_EVENT_CHECK = 5;\nexport const MAX_LOG_SIZE = 25;\n\n// Base Caps\nexport const BASE_RELIC_CAP = 100;\nexport const BASE_MONEY_CAP = 50;\n\n// Panel Keys\nexport const SETTINGS_PANEL_KEY = \"SETTINGS\";\nexport const GENERATORS_PANEL_KEY = \"GENERATORS\";\nexport const LAB_KEY = \"LAB\";\n","import {COMMON_ENTRY_TYPE, DetailedEntry} from \"./journal\";\n\nexport class GameState {\n    resourceState: ResourceState = new ResourceState();\n    jobAssignments: JobAssignments = new JobAssignments();\n    journalState: JournalState = new JournalState();\n    saveTime: Date = new Date();\n    settings: SettingsState = new SettingsState();\n    achievements: Achievements = new Achievements();\n    researchState: ResearchState = new ResearchState();\n}\n\nexport class ResourceState {\n    relics: number = 0;\n    relicCap: number = 0;\n    relicRate: number = 0;\n    relicGenerator: number = 0;\n    sheds: number = 0;\n    students: number = 0;\n    knowledge: number = 0;\n    knowledgeRate: number = 0;\n    blood: number = 0;\n    bloodRate = 0;\n    money: number = 0;\n    moneyRate = 0;\n    moneyCap = 0;\n    fame: number = 0;\n    whispers: number = 0;\n}\n\nexport class JobAssignments {\n    gatherRelics: number = 0;\n    studyRelics: number = 0;\n}\n\nexport class JournalState {\n    entries: DetailedEntry[] = [{\n        entry: \"The new dig site lays before me, I wonder what treasures lay yet unearthed?\",\n        entryType: COMMON_ENTRY_TYPE\n    }];\n}\n\nexport class SettingsState {\n    darkMode: boolean = true;\n}\n\nexport class Achievements {\n    labUnlocked: boolean = false;\n}\n\nexport class ResearchState {\n    studentKnowledge: boolean = false;\n    profiteering: boolean = false;\n    betterShovels: boolean = false;\n    bloodWard: boolean = false;\n    mapTheGrounds: boolean = false;\n}\n\nexport function mergeStateWithDefault(gameState: GameState): GameState {\n    const newState = {...new GameState(), ...gameState};\n    newState.resourceState = {...newState.resourceState, ...gameState.resourceState};\n    newState.jobAssignments = {...newState.jobAssignments, ...gameState.jobAssignments};\n    newState.journalState = {...newState.journalState, ...gameState.journalState};\n    newState.saveTime = gameState.saveTime;\n    newState.settings = {...newState.settings, ...gameState.settings};\n    newState.achievements = {...newState.achievements, ...gameState.achievements};\n    newState.researchState = {...newState.researchState, ...gameState.researchState};\n\n    return newState;\n}\n","import {GameState, mergeStateWithDefault} from \"./game-state\";\nimport {addJournalEntry} from \"./journal\";\n\nexport function saveGameExists() {\n    return !!localStorage.getItem(\"RelicsSave\");\n}\n\nexport function loadSave() {\n    const string = localStorage.getItem(\"RelicsSave\");\n    const save =  string ? JSON.parse(atob(string)) : null;\n    return mergeStateWithDefault(save);\n}\n\nexport function newSave(): GameState {\n    return new GameState();\n}\n\nexport function saveGame(gameState: GameState, manualSave: boolean = false) {\n    gameState.saveTime = new Date();\n    if(manualSave) addJournalEntry(gameState, \"Game Saved\");\n    localStorage.setItem(\"RelicsSave\", btoa(JSON.stringify(gameState)));\n}\n\n\nexport function exportSave(gameState: GameState) {\n    saveGame(gameState);\n    // TODO: export\n}\n\nexport function importSave(gameState: GameState) {\n    saveGame(gameState);\n    // TODO: import\n}\n","import {GameState } from \"../core/game-state\";\n\nexport class Transaction {\n    static isValidPurchase = (gameState: GameState, amount: number): boolean => false ;\n    static commitTransaction = (gameState: GameState, amount: number): GameState => {return gameState};\n    static updateClock: boolean = false;\n}\n\nexport class Research extends Transaction {\n    static isAvailable = (gameState: GameState): boolean => false;\n    static buildTooltip = (gameState: GameState): any => \"MISSING TOOLTIP\";\n    static title: string = \"MISSING TITLE\";\n    static className = \"\";\n    static id = \"\";\n}\n","import { Transaction } from \"../Transaction\";\nimport {GameState} from \"../../core/game-state\";\nimport React from \"react\";\n\nexport class StudentTransaction extends Transaction{\n    updateClock = false;\n\n    static commitTransaction(gameState: GameState, amount: number): GameState {\n        if(StudentTransaction.isValidPurchase(gameState, amount)) {\n            const currCost = StudentTransaction.getCost(gameState, amount);\n\n            gameState.resourceState.relics -= currCost;\n            gameState.resourceState.students += amount;\n        }\n        return gameState;\n    }\n\n    static isValidPurchase(gameState: GameState, amount: number): boolean {\n        const currCost = StudentTransaction.getCost(gameState, amount);\n\n        return gameState.resourceState.relics >= currCost;\n    }\n\n    static getCost(gameState: GameState, purchaseAmount: number) {\n        let sum = 0;\n        let theoreticalAmt = gameState.resourceState.students || 0;\n        for (let i = 0; i < purchaseAmount; i++) {\n            sum += 10 + theoreticalAmt * 5;\n            theoreticalAmt++;\n        }\n        return sum;\n    }\n\n    static buildTooltip(gameState: GameState): any {\n        return (\n            <div className=\"relics-tooltip\">\n                <div className=\"relics-tooltip__description\">\n                    Hire some students to dust off relics for you.\n                    They work for relics.\n                </div>\n                <div className=\"relics-tooltip__cost\">\n                    <div>Relics: {StudentTransaction.getCost(gameState, 1)}</div>\n                </div>\n            </div>\n        );\n    }\n}\n","import {GameState} from \"../core/game-state\";\n\nexport function assignGatherers(amount: number, gameState: GameState){\n    // Cache available in the future?\n    if(countAvailableStudents(gameState) >= amount) {\n        gameState.jobAssignments.gatherRelics += amount;\n    }\n}\n\nexport function removeGatherers(amount: number, gameState: GameState){\n    // Cache available in the future?\n    gameState.jobAssignments.gatherRelics -= amount;\n    if(gameState.jobAssignments.gatherRelics < 0) gameState.jobAssignments.gatherRelics = 0;\n}\n\nexport function assignStudyRelics(amount: number, gameState: GameState){\n    // Cache available in the future?\n    if(countAvailableStudents(gameState) >= amount) {\n        gameState.jobAssignments.studyRelics += amount;\n    }\n}\n\nexport function removeStudyRelics(amount: number, gameState: GameState){\n    // Cache available in the future?\n    gameState.jobAssignments.studyRelics -= amount;\n    if(gameState.jobAssignments.studyRelics < 0) gameState.jobAssignments.studyRelics = 0;\n}\n\nexport function countAvailableStudents(gameState: GameState) {\n    const assignedStudents = (gameState.jobAssignments.gatherRelics || 0)\n        + (gameState.jobAssignments.studyRelics || 0);\n    return gameState.resourceState.students - assignedStudents;\n}\n","import React from \"react\";\nimport ReactTooltip from \"react-tooltip\";\n\ntype RelicsButtonProps = {\n  onClick: any;\n  id?: string; // Must be provided for tooltip to work\n  disabled?: any;\n  tooltip?: any;\n  compact?: boolean;\n  className?: string;\n}\n\nexport class RelicsButton extends React.Component<RelicsButtonProps> {\n\n    render() {\n        const { tooltip, id, children, disabled, onClick, compact } = this.props;\n        let className = \"relics-button\";\n        if(disabled) className += \" relics-button--disabled\";\n        if(compact) className += \" relics-button--compact\";\n        if(this.props.className) className += \" \" + this.props.className;\n\n        const clickFunc = disabled ? () => {} : onClick;\n        const dataTipAttr = {};\n        if(tooltip)\n        {\n            // @ts-ignore\n            dataTipAttr['data-tip'] = '';\n            // @ts-ignore\n            dataTipAttr['data-for'] = id;\n        }\n        return (\n            <span { ...dataTipAttr} id={id} key={id} className={className} onClick={clickFunc}>\n                {children}\n                {tooltip &&\n                    <ReactTooltip id={id} key={id} place=\"bottom\" effect=\"solid\">\n                        {tooltip}\n                    </ReactTooltip>\n                }\n            </span>\n        )\n    }\n}\n","import React from \"react\";\nimport {RelicsButton} from \"./relicsButton\";\nimport ReactTooltip from \"react-tooltip\";\n\ntype AssignWorkerOptionProps = {\n    id?:string,\n    tooltip?: string,\n    assignWorkers: any,\n    removeWorkers: any,\n    currentlyAssigned: number,\n    availableWorkers: number,\n}\n\nexport class AssignWorkerOptions extends React.Component<AssignWorkerOptionProps>{\n    render() {\n        const {\n            id,\n            tooltip,\n            children,\n            assignWorkers,\n            removeWorkers,\n            currentlyAssigned,\n            availableWorkers,\n        } = this.props;\n\n        const dataTipAttr = {};\n        if(tooltip)\n        {\n            // @ts-ignore\n            dataTipAttr['data-tip'] = '';\n            // @ts-ignore\n            dataTipAttr['data-for'] = id;\n        }\n        return (\n            <span { ...dataTipAttr} id={id} >\n                {children}: {currentlyAssigned || 0}\n                <span>\n                    <RelicsButton\n                        compact={true}\n                        disabled={currentlyAssigned <= 0}\n                        onClick={() => removeWorkers(1)}\n                    >\n                        -\n                    </RelicsButton>\n                    <RelicsButton\n                        compact={true}\n                        disabled={availableWorkers <= 0}\n                        onClick={() => assignWorkers(1)}>\n                        +\n                    </RelicsButton>\n                    <RelicsButton\n                        compact={true}\n                        disabled={availableWorkers <= 0}\n                        onClick={() => assignWorkers(availableWorkers)}>\n                        <u>+</u>\n                    </RelicsButton>\n                </span>\n                {tooltip &&\n                    <ReactTooltip id={id} place=\"bottom\" effect=\"solid\">\n                        {tooltip}\n                    </ReactTooltip>\n                }\n            </span>\n        );\n    }\n}\n","import { Transaction } from \"../Transaction\";\nimport {GameState} from \"../../core/game-state\";\nimport React from \"react\";\n\nexport class ShedTransaction extends Transaction{\n    updateClock = false;\n\n    static commitTransaction(gameState: GameState, amount: number): GameState {\n        if(ShedTransaction.isValidPurchase(gameState, amount)) {\n            const currCost = ShedTransaction.getCost(gameState, amount);\n\n            gameState.resourceState.money -= currCost;\n            gameState.resourceState.sheds += amount;\n        }\n        return gameState;\n    }\n\n    static isValidPurchase(gameState: GameState, amount: number): boolean {\n        const currCost = ShedTransaction.getCost(gameState, amount);\n        return gameState.resourceState.money >= currCost;\n    }\n\n    static getCost(gameState: GameState, purchaseAmount: number) {\n        let sum = 0;\n        let theoreticalAmt = gameState.resourceState.sheds || 0;\n        for (let i = 0; i < purchaseAmount; i++) {\n            sum += 5 + theoreticalAmt * 15;\n            theoreticalAmt++;\n        }\n        return sum;\n    }\n\n    static buildTooltip(gameState: GameState): any {\n        return (\n            <div className=\"relics-tooltip\">\n                <div className=\"relics-tooltip__description\">\n                    It turns out we don't need to keep our relics in a pile under a tarp.\n                </div>\n                <div className=\"relics-tooltip__cost\">\n                    <div className={\"money-text\"}>Money: {ShedTransaction.getCost(gameState, 1)}</div>\n                </div>\n            </div>\n        );\n    }\n}\n","import * as React from \"react\";\nimport { GameState } from \"../core/game-state\";\nimport {StudentTransaction} from \"../economy/transactions/studentTransaction\";\nimport {assignGatherers, countAvailableStudents, removeGatherers} from \"../economy/jobAssignments\";\nimport {RelicsButton} from \"../shared/relicsButton\";\nimport {AssignWorkerOptions} from \"../shared/AssignWorkerOptions\";\nimport {ShedTransaction} from \"../economy/transactions/shedTransaction\";\n\ntype GeneratorProps = {\n    gameState: GameState,\n    onPurchase: any,\n    onAddCurrency: any\n}\n\nexport class RelicPanel extends React.Component<GeneratorProps> {\n    assignGather(amount: number) {\n        const { gameState } = this.props;\n        assignGatherers(amount, gameState);\n    }\n    removeGather(amount: number) {\n        const { gameState } = this.props;\n        removeGatherers(amount, gameState);\n    }\n\n    render() {\n        const { gameState, onAddCurrency, onPurchase } = this.props;\n        const availableStudents = countAvailableStudents(gameState);\n        const studentsHired = gameState.resourceState.students >= 1;\n\n        return (\n            <div className=\"panel--left-align\">\n                <div className=\"button-container\">\n                    <RelicsButton onClick={() => onAddCurrency(\"relics\", 1)}>Look for relics</RelicsButton>\n                </div>\n                {studentsHired &&\n                    <AssignWorkerOptions\n                        assignWorkers={(amount: number) =>this.assignGather(amount)}\n                        removeWorkers={(amount:number) => this.removeGather(amount)}\n                        currentlyAssigned={gameState.jobAssignments.gatherRelics}\n                        availableWorkers={availableStudents}>\n                        Gathering Relics\n                    </AssignWorkerOptions>\n                }\n                <br/>\n                <div>\n                    <div className=\"button-container\">\n                        <RelicsButton\n                                disabled={!StudentTransaction.isValidPurchase(gameState, 1)}\n                                onClick={() => onPurchase(1, StudentTransaction.commitTransaction)}\n                                id=\"hireStudent\"\n                                tooltip={StudentTransaction.buildTooltip(gameState)}\n                        >\n                            Hire a Student\n                        </RelicsButton>\n                    </div>\n                    {gameState.researchState.profiteering &&\n                        <div>\n                            <p>Buildings:</p>\n                            <RelicsButton\n                                disabled={!ShedTransaction.isValidPurchase(gameState, 1)}\n                                onClick={() => onPurchase(1, ShedTransaction.commitTransaction)}\n                                id=\"shed\"\n                                tooltip={ShedTransaction.buildTooltip(gameState)}\n                            >\n                                Storage Shed: {gameState.resourceState.sheds}\n                            </RelicsButton>\n                        </div>\n                    }\n                </div>\n            </div>\n        );\n    }\n}\n","import React from \"react\";\n\nexport const themes = {\n    light: {\n        themeClass: 'app app--light',\n    },\n    dark: {\n        themeClass: 'app app--dark',\n    },\n};\n\nexport const ThemeContext = React.createContext({\n    theme: themes.dark, // default value\n    toggleTheme: () => {\n    },\n});","import {GameState} from \"../core/game-state\";\nimport {ThemeContext} from \"../layout/theme-context\";\nimport React from \"react\";\nimport {RelicsButton} from \"../shared/relicsButton\";\n\ntype SettingsProps = {\n    gameState: GameState,\n    onSave: any,\n    onClearSave: any\n}\n\nexport class Settings extends React.Component<SettingsProps> {\n    onToggleTheme(toggleTheme: any) {\n        const { gameState } = this.props;\n        gameState.settings.darkMode = !gameState.settings.darkMode;\n        toggleTheme();\n    }\n    render() {\n        const {onSave, onClearSave} = this.props;\n\n        return (\n            <div>\n                <div className={\"button-container\"}>\n                    <RelicsButton onClick={() => onSave()}>Save</RelicsButton>\n                    <RelicsButton onClick={() => onClearSave()}>Clear Save</RelicsButton>\n                </div>\n                <div>\n                    <ThemeContext.Consumer>\n                        {({theme, toggleTheme}) => (\n                            <div className={\"button-container\"}>\n                                <RelicsButton onClick={() => this.onToggleTheme(toggleTheme)}>\n                                    Toggle Dark Mode\n                                </RelicsButton>\n                            </div>\n                        )}\n                    </ThemeContext.Consumer>\n                </div>\n                <p>Relics - A game by bearhanded.</p>\n                <p><a href=\"https://github.com/bearhanded/relics\">GitHub</a></p>\n            </div>\n        );\n    }\n}\n","import {GameState} from \"./game-state\";\nimport {addDetailedJournalEntry, addJournalEntry, BLOOD_ENTRY_TYPE} from \"./journal\";\nimport {countAvailableStudents, removeGatherers, removeStudyRelics} from \"../economy/jobAssignments\";\n\nexport function randomEventsForDuration(gameState: GameState, amount: number) {\n    for (let i = 0; i < amount; i++) {\n        randomEvent(gameState);\n    }\n}\n\nexport function randomEvent(gameState: GameState) {\n    const diceRoll = roll1d100();\n    if(diceRoll >= 95) {\n        addJournalEntry(gameState, \"The wind blows across the dusty plain\");\n    }\n    if( 10 <= diceRoll && diceRoll <= 15) {\n        addJournalEntry(gameState, \"A stranger shuffles up and hands something to you: +100 Relics!\");\n        gameState.resourceState.relics += 100\n    }\n    if(diceRoll === 1 && gameState.resourceState.students > 2) {\n        // A dark event occurs\n        if(!gameState.researchState.bloodWard) {\n            if (countAvailableStudents(gameState) <= 0) {\n                if (gameState.jobAssignments.gatherRelics >= 1) {\n                    removeGatherers(1, gameState);\n                } else if (gameState.jobAssignments.studyRelics >= 1) {\n                    removeStudyRelics(1, gameState);\n                }\n            }\n            gameState.resourceState.blood ? gameState.resourceState.blood++ : gameState.resourceState.blood = 1;\n            gameState.resourceState.students -= 1;\n\n            addDetailedJournalEntry(gameState, {\n                entry: \"A shout in the dark. You are short one student.\",\n                entryType: BLOOD_ENTRY_TYPE,\n            });\n        } else {\n            gameState.resourceState.blood ? gameState.resourceState.blood++ : gameState.resourceState.blood = 1;\n            addDetailedJournalEntry(gameState, {\n                entry: \"The ward protects the student in exchange for a drop shed.\",\n                entryType: BLOOD_ENTRY_TYPE,\n            });\n        }\n    }\n}\n\nfunction roll1d100() {\n    return Math.floor(Math.random() * 100 + 1);\n}\n","import {saveGame} from \"./saveService\";\nimport {GameState} from \"./game-state\";\nimport {TICK_SPEED, SECONDS_PER_EVENT_CHECK, BASE_RELIC_CAP, BASE_MONEY_CAP} from \"../config/constants\";\nimport {randomEventsForDuration} from \"./event-manager\";\n\nexport class GameClock {\n    saveClockId: any;\n    resourceClockId: any;\n    gameState: GameState; // Not readonly, we're emitting the changes for the rest of the app\n    tickRatio: number; // Modified each pass of the clock so that we can deal with running in the background\n    emitTick: any;\n    maxTicks: number;\n    lastTickDate: Date;\n    randomEventTimer = 0;\n\n    constructor(gameState: GameState, onTick: any) {\n        this.saveClockId = setInterval(\n            () => saveGame(gameState),\n            30000\n        );\n        this.gameState = gameState;\n        this.updateState(gameState);\n        this.tickRatio = TICK_SPEED / 1000; // Default: 50ms / 1000ms, multiply by how many per second you want\n        this.maxTicks = (5 * 1000) / TICK_SPEED;\n        this.emitTick = onTick;\n        this.lastTickDate = new Date(gameState.saveTime); //Easy offline progress solution?\n    }\n\n    private calibrate() {\n        const tickTimeStamp = new Date();\n        const seconds = (tickTimeStamp.getTime() - this.lastTickDate.getTime()) / 1000;\n        this.lastTickDate = tickTimeStamp;\n        this.tickRatio = seconds;\n        this.randomEventTimer += seconds;\n    }\n\n    private manageRandomEvent(newState: GameState) {\n        if(this.randomEventTimer >= SECONDS_PER_EVENT_CHECK ) {\n            // every 5s, test for an event\n\n            randomEventsForDuration(newState, Math.floor(this.randomEventTimer / SECONDS_PER_EVENT_CHECK));\n            this.randomEventTimer = 0;\n        }\n    }\n\n    tick() {\n        this.calibrate();\n\n        var newState = {...this.gameState};\n\n        // Stats\n        let relicsPerSecond = 0;\n        let knowledgePerSecond = 0;\n        let moneyPerSecond = 0\n\n        // Resource Management\n        if(this.gameState.jobAssignments.gatherRelics) {\n            const relicsMultiplier = 1\n                + (this.gameState.researchState.betterShovels ? .5 : 0);\n            relicsPerSecond = this.gameState.jobAssignments.gatherRelics*.5*relicsMultiplier;\n            newState.resourceState.relics += relicsPerSecond*this.tickRatio;\n        }\n        if(this.gameState.jobAssignments.studyRelics && this.gameState.resourceState.relics >= this.gameState.jobAssignments.gatherRelics*10*this.tickRatio) {\n            const relicConsumptionRate = this.gameState.jobAssignments.studyRelics*10;\n            relicsPerSecond -= relicConsumptionRate;\n            newState.resourceState.relics -= relicConsumptionRate*this.tickRatio;\n            const knowRate = this.gameState.jobAssignments.studyRelics*.1;\n            newState.resourceState.knowledge += knowRate*this.tickRatio;\n            knowledgePerSecond += knowRate;\n        }\n        if(this.gameState.researchState.profiteering) {\n            // Money accrual\n            this.gameState.resourceState.money += .25*this.tickRatio;\n            moneyPerSecond = .25;\n        }\n\n        // Apply caps\n        const relicCap = BASE_RELIC_CAP + this.gameState.resourceState.sheds*50;\n        if(newState.resourceState.relics >= relicCap) newState.resourceState.relics = relicCap;\n        newState.resourceState.relicCap = relicCap;\n\n        const moneyCap = BASE_MONEY_CAP;\n        if(newState.resourceState.money >= moneyCap) newState.resourceState.money = moneyCap;\n        newState.resourceState.moneyCap = BASE_MONEY_CAP;\n\n        // Aggregate stats\n        newState.resourceState.relicRate = relicsPerSecond;\n        newState.resourceState.moneyRate = moneyPerSecond;\n        newState.resourceState.knowledgeRate = knowledgePerSecond;\n\n        // Kick off any events that have transpired\n        this.manageRandomEvent(newState);\n\n        // Save and output\n        this.gameState = newState;\n        this.emitTick(newState);\n    }\n\n    updateState(gameState: GameState) {\n        clearInterval(this.resourceClockId);\n        this.resourceClockId = setInterval(() => this.tick(), TICK_SPEED);\n    }\n\n    clearClock() {\n        clearInterval(this.resourceClockId);\n        clearInterval(this.saveClockId);\n    }\n\n}\n","import * as React from \"react\";\nimport {JournalState} from \"../core/game-state\";\nimport {RelicsButton} from \"../shared/relicsButton\";\nimport {ACHIEVEMENT_ENTRY_TYPE, BLOOD_ENTRY_TYPE, COMMON_ENTRY_TYPE, DetailedEntry} from \"../core/journal\";\n\ntype JournalProps = {\n    journalState: JournalState,\n    clearLog: any\n}\n\nexport class AdventureLog extends React.Component<JournalProps> {\n    getClassName(entry: DetailedEntry) {\n        let className = \"padded-text journal__entry\";\n        switch (entry.entryType) {\n            case ACHIEVEMENT_ENTRY_TYPE:\n                className += \" journal__entry--achievement\";\n                break;\n            case BLOOD_ENTRY_TYPE:\n                className += \" blood-text\";\n                break;\n            case COMMON_ENTRY_TYPE:\n            default:\n        }\n        return className;\n    }\n\n    render() {\n        const { journalState, clearLog } = this.props;\n        const entryList = journalState.entries.slice(0).reverse().map((entry) =>\n            <div className={this.getClassName(entry)}>\n                {entry.entry}\n            </div>\n        );\n        return (\n            <div className=\"panel--left-align journal-panel\">\n                <div className=\"button-container\">\n                    <RelicsButton onClick={() => clearLog()}>Clear Log</RelicsButton>\n                </div>\n                <div className=\"journal\">{entryList}</div>\n            </div>\n        );\n    }\n}\n","import * as React from \"react\";\nimport { GameState } from \"../core/game-state\";\nimport {countAvailableStudents} from \"../economy/jobAssignments\";\n\ntype ResourceProps = {\n    gameState: GameState,\n}\n\ntype ResourcePanelEntryProps = {\n    rate?: number;\n    cap?: number;\n    className?: string;\n}\n\nexport class ResourcePanelEntry extends React.Component<ResourcePanelEntryProps> {\n    render() {\n        const renderRate = this.props.rate !== undefined && this.props.rate !== 0;\n        const rateText = this.props.rate + \"/s\";\n        return (\n            <div className=\"resources__entry\">\n                <div className={this.props.className}>\n                    {this.props.children}\n                    {this.props.cap && (\n                        <span className=\"resources__rate\">/{this.props.cap}</span>\n                    )}\n                </div>\n                <div className=\"resources__rate\">{renderRate && rateText}</div>\n            </div>\n        );\n    }\n}\nexport class ResourcePanel extends React.Component<ResourceProps> {\n    render() {\n        const { gameState } = this.props;\n\n        return (\n            <div>\n                <div className=\"panel--center-align resources__container\">\n                    {!!gameState.resourceState.relics &&\n                        <ResourcePanelEntry rate={gameState.resourceState.relicRate}\n                                            cap={gameState.resourceState.relicCap}>\n                            Relics: {gameState.resourceState.relics.toFixed()}\n                        </ResourcePanelEntry>}\n                    {gameState.researchState.profiteering &&\n                        <ResourcePanelEntry className=\"money-text\" rate={gameState.resourceState.moneyRate}\n                                            cap={gameState.resourceState.moneyCap}>\n                            Money: {gameState.resourceState.money.toFixed()}\n                        </ResourcePanelEntry>}\n                    {!!gameState.resourceState.knowledge &&\n                        <ResourcePanelEntry className=\"knowledge-text\" rate={gameState.resourceState.knowledgeRate}>\n                            Knowledge: {gameState.resourceState.knowledge.toFixed()}\n                        </ResourcePanelEntry>}\n                    {!!gameState.resourceState.blood &&\n                        <ResourcePanelEntry className=\"blood-text\">\n                            Blood: {gameState.resourceState.blood.toFixed()}\n                        </ResourcePanelEntry>}\n                </div>\n                {!!gameState.resourceState.students &&\n                    <div className=\"panel--center-align resources__container\">\n                        <div>Students: {countAvailableStudents(gameState)}/{gameState.resourceState.students}</div>\n                    </div>\n                }\n            </div>\n        );\n    }\n}\n","import React from \"react\";\n\ntype NavButtonProps = {\n  onClick: any;\n  disabled?: any | undefined;\n  selected?: boolean | undefined;\n}\n\nexport class NavButton extends React.Component<NavButtonProps> {\n\n    render() {\n        let className = \"nav-button\";\n        if(this.props.disabled) className += \" nav-button--disabled\";\n        if(this.props.selected) className += \" nav-button--selected\";\n\n        const clickFunc = this.props.disabled ? () => {} : this.props.onClick;\n        return (\n            <span\n                className={className}\n                onClick={clickFunc}>\n                {this.props.children}\n            </span>\n        )\n    }\n}","import React from \"react\";\nimport {GENERATORS_PANEL_KEY, LAB_KEY, SETTINGS_PANEL_KEY} from \"../config/constants\";\nimport {NavButton} from \"./navButton\";\nimport {GameState} from \"../core/game-state\";\n\ntype PanelSelectorProps = {\n    onChangePanel: any,\n    selected: string,\n    gameState: GameState\n}\nexport class PanelSelector extends React.Component<PanelSelectorProps>{\n    render() {\n        const {onChangePanel, selected, gameState} = this.props;\n        return (\n            <div className={\"nav-panel\"}>\n                <NavButton selected={selected === GENERATORS_PANEL_KEY}\n                           onClick={() => onChangePanel(GENERATORS_PANEL_KEY)}>\n                    Dig Site 1\n                </NavButton>\n                {(gameState.resourceState.students >= 10 || gameState.achievements.labUnlocked) &&\n                    <NavButton selected={selected === LAB_KEY}\n                               onClick={() => onChangePanel(LAB_KEY)}>\n                        Research Lab\n                    </NavButton>\n                }\n\n                <NavButton selected={selected === SETTINGS_PANEL_KEY}\n                           onClick={() => onChangePanel(SETTINGS_PANEL_KEY)}>\n                    Settings\n                </NavButton>\n            </div>\n        );\n    }\n}\n","import {GameState} from \"../../core/game-state\";\nimport {Transaction} from \"../Transaction\";\nimport React from \"react\";\n\nexport class KnowledgeTransaction extends Transaction {\n    static updateClock = false;\n\n    static commitTransaction(gameState: GameState, amount: number): GameState {\n        if(KnowledgeTransaction.isValidPurchase(gameState, amount)) {\n            const currCost = KnowledgeTransaction.getCost(gameState, amount);\n\n            gameState.resourceState.relics -= currCost;\n            gameState.resourceState.knowledge += amount;\n        }\n        return gameState;\n    }\n\n    static isValidPurchase(gameState: GameState, amount: number): boolean {\n        const currCost = KnowledgeTransaction.getCost(gameState, amount);\n        return gameState.resourceState.relics >= currCost;\n    }\n\n    static getCost(gameState: GameState, purchaseAmount: number) {\n        return 50 * purchaseAmount;\n    }\n\n    static buildTooltip(gameState: GameState): any {\n        return (\n            <div className=\"relics-tooltip\">\n                <div className=\"relics-tooltip__description\">\n                    Peruse your collection, perhaps you can find something useful.\n                </div>\n                <div className=\"relics-tooltip__cost\">\n                    <div>Relics: 50</div>\n                </div>\n            </div>\n        );\n    }\n}\n","import {Research} from \"../Transaction\";\nimport {GameState} from \"../../core/game-state\";\nimport {ACHIEVEMENT_ENTRY_TYPE, addDetailedJournalEntry} from \"../../core/journal\";\nimport React from \"react\";\n\nexport class BetterShovels extends Research {\n    static updateClock = false;\n\n    static commitTransaction(gameState: GameState, amount: number): GameState {\n        if(BetterShovels.isValidPurchase(gameState, amount)) {\n            gameState.resourceState.money -= 50;\n            gameState.researchState.betterShovels = true;\n            addDetailedJournalEntry(gameState, {\n                entry: \"A patron finds your work interesting, and provides a slow but steady drip of funding.\",\n                entryType: ACHIEVEMENT_ENTRY_TYPE\n            });\n        }\n        return gameState;\n    }\n\n    static isValidPurchase(gameState: GameState, amount: number): boolean {\n        return gameState.resourceState.money >= 50;\n    }\n\n    static buildTooltip(gameState: GameState): any {\n        return (\n            <div className=\"relics-tooltip\">\n                <div className=\"relics-tooltip__description\">\n                    Buy the team their very first shovel. It's better than none.\n                </div>\n                <div className=\"relics-tooltip__cost\">\n                    <div className=\"money-text\">Money: 50</div>\n                </div>\n            </div>\n        );\n    }\n\n    static isAvailable(gameState: GameState): boolean {\n        return gameState.researchState.profiteering && !gameState.researchState.betterShovels;\n    }\n\n    static title = \"Better Shovels\";\n    static id = \"better-shovels\";\n    static className = \"money-button\";\n}\n","import React from \"react\";\nimport {Research} from \"../Transaction\";\nimport {GameState} from \"../../core/game-state\";\nimport {addDetailedJournalEntry, BLOOD_ENTRY_TYPE} from \"../../core/journal\";\n\nexport class BloodWard extends Research {\n    static updateClock = false;\n\n    static commitTransaction(gameState: GameState, amount: number): GameState {\n        if(BloodWard.isValidPurchase(gameState, amount)) {\n            gameState.resourceState.relics -= 100;\n            gameState.resourceState.blood -= 1;\n            gameState.resourceState.knowledge -= 20;\n\n            gameState.researchState.bloodWard = true;\n            addDetailedJournalEntry(gameState, {\n                entry: \"Following instructions on the ruins, you assemble a ward. That should protect this place.\",\n                entryType: BLOOD_ENTRY_TYPE\n            });\n        }\n        return gameState;\n    }\n\n    static isValidPurchase(gameState: GameState, amount: number): boolean {\n        return gameState.resourceState.blood >= 1 && gameState.resourceState.knowledge >= 20 && gameState.resourceState.relics >= 100;\n    }\n\n    static buildTooltip(gameState: GameState): any {\n        return (\n            <div className=\"relics-tooltip\">\n                <div className=\"relics-tooltip__description\">\n                    The excavated ruins are carved with a repeating pattern, and no one has disappeared in there yet.\n                </div>\n                <div className=\"relics-tooltip__cost\">\n                    <div>Relics: 100</div>\n                    <div className=\"knowledge-text\">Knowledge: 20</div>\n                    <div className=\"blood-text\">Blood: 1</div>\n                </div>\n            </div>\n        );\n    }\n\n    static isAvailable(gameState: GameState): boolean {\n        return gameState.researchState.profiteering && !gameState.researchState.bloodWard;\n    }\n\n    static title = \"Inscribe a ward\";\n    static id = \"blood-ward\";\n    static className = \"blood-button\";\n}","import {Research} from \"../Transaction\";\nimport {GameState} from \"../../core/game-state\";\nimport {ACHIEVEMENT_ENTRY_TYPE, addDetailedJournalEntry} from \"../../core/journal\";\nimport React from \"react\";\n\nexport class Profit extends Research {\n    static updateClock = false;\n\n    static commitTransaction(gameState: GameState, amount: number): GameState {\n        if(Profit.isValidPurchase(gameState, amount)) {\n            gameState.resourceState.knowledge -= 10;\n            gameState.researchState.profiteering = true;\n            addDetailedJournalEntry(gameState, {\n                entry: \"A patron finds your work interesting, and provides a slow but steady drip of funding. Relic speed x 1.5.\",\n                entryType: ACHIEVEMENT_ENTRY_TYPE\n            });\n        }\n        return gameState;\n    }\n\n    static isValidPurchase(gameState: GameState, amount: number): boolean {\n        return gameState.resourceState.knowledge >= 10;\n    }\n\n    static buildTooltip(gameState: GameState): any {\n        return (\n            <div className=\"relics-tooltip\">\n                <div className=\"relics-tooltip__description\">\n                    With your student's help, you know enough now to fund this endeavor.\n                    A little embellishment never hurt...\n                </div>\n                <div className=\"relics-tooltip__cost\">\n                    <div className=\"knowledge-text\">Knowledge: 10</div>\n                </div>\n            </div>\n        );\n    }\n\n    static isAvailable(gameState: GameState): boolean {\n        return gameState.researchState.studentKnowledge && !gameState.researchState.profiteering;\n    }\n\n    static title = \"Procure Funding\";\n    static id = \"profiteering\";\n    static className = \"money-button\";\n}","import {Research} from \"../Transaction\";\nimport {GameState} from \"../../core/game-state\";\nimport React from \"react\";\n\nexport class StudentKnowledge extends Research {\n    static updateClock = false;\n\n    static commitTransaction(gameState: GameState, amount: number): GameState {\n        if(StudentKnowledge.isValidPurchase(gameState, amount)) {\n            gameState.resourceState.knowledge -= 5;\n            gameState.researchState.studentKnowledge = true;\n        }\n        return gameState;\n    }\n\n    static isValidPurchase(gameState: GameState, amount: number): boolean {\n        return gameState.resourceState.knowledge >= 5;\n    }\n\n    static buildTooltip(gameState: GameState): any {\n        return (\n            <div className=\"relics-tooltip\">\n                <div className=\"relics-tooltip__description\">\n                    I know enough about this to teach others to do the work, albeit at a reduced efficiency.\n                </div>\n                <div className=\"relics-tooltip__cost\">\n                    <div className=\"knowledge-text\">Knowledge: 5</div>\n                </div>\n            </div>\n        );\n    }\n    static isAvailable(gameState: GameState): boolean {\n        return !gameState.researchState.studentKnowledge;\n    }\n\n    static title = \"Studious Students\";\n    static id = \"student-knowledge\";\n    static className = \"knowledge-button\";\n}\n","import {Research} from \"../Transaction\";\nimport {GameState} from \"../../core/game-state\";\nimport React from \"react\";\n\nexport class MapTheRuins extends Research {\n    static updateClock = false;\n\n    static commitTransaction(gameState: GameState, amount: number): GameState {\n        if(MapTheRuins.isValidPurchase(gameState, amount)) {\n            gameState.resourceState.knowledge -= 1;\n            gameState.researchState.mapTheGrounds = true;\n        }\n        return gameState;\n    }\n\n    static isValidPurchase(gameState: GameState, amount: number): boolean {\n        return gameState.resourceState.knowledge >= 1;\n    }\n\n    static buildTooltip(gameState: GameState): any {\n        return (\n            <div className=\"relics-tooltip\">\n                <div className=\"relics-tooltip__description\">\n                    These relics seem to be found near a few particular features.\n                    <br/>Increases base relic search rate by 1.\n                </div>\n                <div className=\"relics-tooltip__cost\">\n                    <div className=\"knowledge-text\">Knowledge: 1</div>\n                </div>\n            </div>\n        );\n    }\n    static isAvailable(gameState: GameState): boolean {\n        return !gameState.researchState.mapTheGrounds;\n    }\n\n    static title = \"Map the Ruins\";\n    static id = \"map-ruins\";\n    static className = \"knowledge-button\";\n}\n","import {GameState} from \"../core/game-state\";\nimport {Research} from \"./Transaction\";\nimport {BetterShovels} from \"./research/betterShovels\";\nimport {BloodWard} from \"./research/bloodWard\";\nimport {Profit} from \"./research/profit\";\nimport {StudentKnowledge} from \"./research/studentKnowledge\";\nimport {MapTheRuins} from \"./research/mapTheRuins\";\n\nexport const allResearches: typeof Research[] = [\n    BetterShovels,\n    BloodWard,\n    Profit,\n    StudentKnowledge,\n    MapTheRuins\n];\n\nexport function getAvailableResearches(gameState: GameState): typeof Research[] {\n    return allResearches.filter((r) => r.isAvailable(gameState));\n}\n","import React from \"react\";\nimport {RelicsButton} from \"./relicsButton\";\nimport {Research} from \"../economy/Transaction\";\nimport {GameState} from \"../core/game-state\";\n\ntype ResearchButtonProps = {\n    research: typeof Research;\n    gameState: GameState;\n    onPurchase: any;\n}\n\nexport class ResearchButton extends React.Component<ResearchButtonProps>{\n    render() {\n        const {gameState, research, onPurchase} = this.props;\n        return (\n            <RelicsButton\n                disabled={!research.isValidPurchase(gameState, 1)}\n                onClick={() => onPurchase(1, research.commitTransaction)}\n                id={research.id}\n                key={research.id}\n                className={research.className}\n                tooltip={research.buildTooltip(gameState)}\n            >\n                {research.title}\n            </RelicsButton>\n        );\n    }\n}","import React from \"react\";\nimport {GameState} from \"../core/game-state\";\nimport {labFirstUnlock} from \"../core/achievements\";\nimport {RelicsButton} from \"../shared/relicsButton\";\nimport {KnowledgeTransaction} from \"../economy/transactions/KnowledgeTransaction\";\nimport {AssignWorkerOptions} from \"../shared/AssignWorkerOptions\";\nimport {\n    assignStudyRelics,\n    countAvailableStudents,\n    removeStudyRelics\n} from \"../economy/jobAssignments\";\nimport {getAvailableResearches} from \"../economy/researchManager\";\nimport {ResearchButton} from \"../shared/researchButton\";\nimport {Research} from \"../economy/Transaction\";\n\ntype LabProps = {\n    gameState: GameState;\n    onPurchase: any;\n}\n\nexport class ResearchLab extends React.Component<LabProps> {\n    componentDidMount(): void {\n        labFirstUnlock(this.props.gameState);\n    }\n\n    assignStudentsStudy = (amount: number) => assignStudyRelics(amount, this.props.gameState);\n    removeStudentsStudy = (amount: number) => removeStudyRelics(amount, this.props.gameState);\n\n    createResearchButton(research: typeof Research): any {\n        return (\n            <ResearchButton key={research.id} research={research} gameState={this.props.gameState} onPurchase={this.props.onPurchase}/>\n        );\n    }\n\n    render() {\n        const { gameState, onPurchase } = this.props;\n        const availableStudents = countAvailableStudents(gameState);\n        const availableResearch = getAvailableResearches(gameState).map((research) => this.createResearchButton(research));\n\n        return (\n            <div>\n                <div className=\"button-container\">\n                    <RelicsButton\n                        disabled={!KnowledgeTransaction.isValidPurchase(gameState, 1)}\n                        onClick={() => onPurchase(1, KnowledgeTransaction.commitTransaction)}\n                        id=\"studyRelics\"\n                        tooltip={KnowledgeTransaction.buildTooltip(gameState)}\n                    >\n                        Study Relics\n                    </RelicsButton>\n                </div>\n                {gameState.researchState.studentKnowledge &&\n                    <div>\n                        <AssignWorkerOptions\n                            id=\"studentsStudying\"\n                            assignWorkers={(amount: number) =>this.assignStudentsStudy(amount)}\n                            removeWorkers={(amount:number) => this.removeStudentsStudy(amount)}\n                            currentlyAssigned={gameState.jobAssignments.studyRelics}\n                            availableWorkers={availableStudents}\n                            tooltip={\"Produces 1 knowledge per 100 relics.\"}\n                        >\n                            Student Studying Relics\n                        </AssignWorkerOptions>\n                    </div>\n                }\n\n                <div>\n                    <p>Research</p>\n                    { availableResearch }\n                </div>\n            </div>\n        );\n    }\n}\n","import {GameState} from \"./game-state\";\nimport {ACHIEVEMENT_ENTRY_TYPE, addDetailedJournalEntry} from \"./journal\";\n\nexport function labFirstUnlock(gameState: GameState) {\n    if(!gameState.achievements.labUnlocked) {\n        gameState.achievements.labUnlocked = true;\n        addDetailedJournalEntry(gameState, {\n            entry: \"With your new found stash of relics, you retreat to your personal laboratory!\",\n            entryType: ACHIEVEMENT_ENTRY_TYPE,\n        });\n    }\n}\n","import * as React from \"react\";\nimport {loadSave, newSave, saveGame, saveGameExists} from \"./saveService\";\nimport {RelicPanel} from \"../panels/relicPanel\";\nimport {Settings} from \"../panels/settings\";\nimport {GameState} from \"./game-state\";\nimport {GameClock} from \"./game-clock\";\nimport {GENERATORS_PANEL_KEY, LAB_KEY, SETTINGS_PANEL_KEY} from \"../config/constants\";\nimport {addJournalEntry, clearJournal} from \"./journal\";\nimport {AdventureLog} from \"../panels/adventureLog\";\nimport {ResourcePanel} from \"../panels/resourcePanel\";\nimport {PanelSelector} from \"../layout/panelSelector\";\nimport {ResearchLab} from \"../panels/lab\";\n\ntype CoreProps = {}\ntype CoreState = {\n    gameState: GameState,\n    activePanel: string\n}\n\nexport class CorePanel extends React.Component<CoreProps, CoreState> {\n    clock: GameClock | undefined;\n    readonly state = {\n        gameState: saveGameExists() ? loadSave() : newSave(),\n        activePanel: GENERATORS_PANEL_KEY\n    };\n\n    componentDidMount(): void {\n        // TODO: Calculate offline progress before starting clock\n        this.clock = new GameClock(this.state.gameState, (newState: GameState) => this.onTick(newState));\n        this.setState({activePanel: GENERATORS_PANEL_KEY});\n    }\n\n    onTick(newState: GameState) {\n        this.setState({gameState: newState});\n    }\n\n    addCurrency(currencyName: string, currencyAmount: number) {\n        const newState = {...this.state.gameState};\n        let relicRate = currencyAmount;\n        if(this.state.gameState.researchState.mapTheGrounds) relicRate += 1;\n        newState.resourceState.relics += relicRate;\n        addJournalEntry(newState, \"You dust off some potsherds.\");\n        this.setState({gameState: newState})\n    }\n\n    makePurchase(purchaseAmount: number, transaction: any) {\n        let newState = {...this.state.gameState};\n        newState = transaction(newState, purchaseAmount);\n\n        this.setState({gameState: newState});\n        // if(purchaseType.updateClock) {\n        //     // @ts-ignore\n        //     this.clock.updateState(newState);\n        // }\n    }\n\n    clearLog() {\n        clearJournal(this.state.gameState)\n    }\n\n    changeActivePanel(panelKey: string) {\n        this.setState({activePanel: panelKey});\n    }\n\n    save() {\n        const newState = {...this.state.gameState};\n        this.setState({gameState: newState});\n        saveGame(newState, true);\n    }\n\n    clearSave() {\n        // @ts-ignore\n        this.clock.clearClock();\n        const newState = newSave();\n        newState.saveTime = new Date();\n        this.setState({gameState: newState});\n        saveGame(newState);\n        // eslint-disable-next-line no-restricted-globals\n        location.reload();\n    }\n\n    render() {\n        let activePanel;\n        switch (this.state.activePanel) {\n            case SETTINGS_PANEL_KEY:\n                activePanel = (\n                    <Settings\n                        gameState={this.state.gameState}\n                        onSave={() => this.save()}\n                        onClearSave={() => this.clearSave()}\n                    />\n                );\n                break;\n            case LAB_KEY:\n                activePanel = (\n                    <ResearchLab\n                        gameState={this.state.gameState}\n                        onPurchase={(purchaseAmount: number, transaction: any) => this.makePurchase(purchaseAmount, transaction)}\n                    />\n                );\n                break;\n            case GENERATORS_PANEL_KEY:\n            default:\n                activePanel = (\n                    <RelicPanel\n                        gameState={this.state.gameState}\n                        onAddCurrency={(currencyName: string, currencyAmount: number) => this.addCurrency(currencyName, currencyAmount)}\n                        onPurchase={(purchaseAmount: number, transaction: any) => this.makePurchase(purchaseAmount, transaction)}\n                    />\n                );\n        }\n\n        return (\n            <div className=\"core-panel\">\n                <div className=\"core-panel__flex\">\n                    <div className=\"core-panel__left-column\">\n                        <AdventureLog clearLog={() => this.clearLog()} journalState={this.state.gameState.journalState}/>\n                    </div>\n                    <div className=\"core-panel__center-column\">\n                        <PanelSelector onChangePanel={(panelKey: string) => this.changeActivePanel(panelKey)}\n                            selected={this.state.activePanel}\n                            gameState={this.state.gameState}\n                        />\n                        {activePanel}\n                    </div>\n                    <div className=\"core-panel__right-column\">\n                        <ResourcePanel gameState={this.state.gameState}/>\n                    </div>\n                </div>\n\n            </div>\n        );\n    }\n}\n","import React from 'react';\nimport './app.scss';\nimport {CorePanel} from \"./core/corePanel\";\nimport {ThemeContext, themes} from \"./layout/theme-context\";\nimport {loadSave, saveGameExists} from \"./core/saveService\";\n\ntype AppProps = {}\ntype AppState = {\n    theme: any,\n    toggleTheme: () => {}\n}\n\nclass App extends React.Component<AppProps, AppState> {\n    readonly state: AppState;\n    toggleTheme: any;\n\n    constructor(props: any) {\n        super(props);\n        const darkMode = saveGameExists() && loadSave().settings.darkMode;\n\n        this.toggleTheme = () => {\n            this.setState(state => ({\n                theme:\n                    state.theme === themes.dark\n                        ? themes.light\n                        : themes.dark,\n            }));\n        };\n\n        this.state = {\n            theme: darkMode ? themes.dark : themes.light,\n            toggleTheme: this.toggleTheme,\n        };\n\n    }\n\n    render() {\n        return (\n                <ThemeContext.Provider value={this.state}>\n                    <div className={this.state.theme.themeClass}>\n                        <CorePanel/>\n                    </div>\n                </ThemeContext.Provider>\n        );\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resource-display are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './app';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}