{"version":3,"sources":["core/journal.ts","config/constants.ts","core/game-state.ts","core/saveService.ts","economy/Transaction.ts","economy/transactions/studentTransaction.tsx","economy/jobAssignments.ts","shared/relicsButton.tsx","shared/AssignWorkerOptions.tsx","panels/relicPanel.tsx","layout/theme-context.ts","panels/settings.tsx","core/event-manager.ts","core/game-clock.ts","panels/adventureLog.tsx","panels/resourcePanel.tsx","layout/navButton.tsx","layout/panelSelector.tsx","economy/transactions/KnowledgeTransaction.tsx","economy/researches/studentKnowledge.tsx","economy/researches/profit.tsx","economy/researches/betterShovels.tsx","economy/researches/bloodWard.tsx","panels/lab.tsx","core/achievements.ts","core/corePanel.tsx","app.tsx","serviceWorker.ts","index.tsx"],"names":["addJournalEntry","gameState","entry","journalState","entries","push","entryType","length","shift","addDetailedJournalEntry","GameState","resourceState","ResourceState","jobAssignments","JobAssignments","JournalState","saveTime","Date","settings","SettingsState","achievements","Achievements","researchState","ResearchState","relics","relicGenerator","students","knowledge","blood","money","fame","whispers","gatherRelics","studyRelics","darkMode","labUnlocked","studentKnowledge","profiteering","betterShovels","bloodWard","saveGameExists","localStorage","getItem","loadSave","string","newState","mergeStateWithDefault","JSON","parse","atob","newSave","saveGame","manualSave","setItem","btoa","stringify","Transaction","isValidPurchase","amount","commitTransaction","updateClock","StudentTransaction","currCost","getCost","purchaseAmount","sum","theoreticalAmt","i","className","removeGatherers","assignStudyRelics","console","log","countAvailableStudents","removeStudyRelics","assignedStudents","RelicsButton","this","props","tooltip","id","children","disabled","onClick","compact","clickFunc","dataTipAttr","place","effect","React","Component","AssignWorkerOptions","assignWorkers","removeWorkers","currentlyAssigned","availableWorkers","RelicPanel","assignGatherers","onAddCurrency","onPurchase","availableStudents","studentsHired","assignGather","removeGather","buildTooltip","themes","light","themeClass","dark","ThemeContext","createContext","theme","toggleTheme","Settings","onSave","onClearSave","Consumer","onToggleTheme","href","randomEvent","diceRoll","Math","floor","random","GameClock","onTick","saveClockId","resourceClockId","tickRatio","emitTick","maxTicks","lastTickDate","randomEventTimer","setInterval","updateState","TICK_SPEED","tickTimeStamp","seconds","getTime","randomEventsForDuration","calibrate","relicsMultiplier","manageRandomEvent","clearInterval","tick","AdventureLog","clearLog","entryList","slice","reverse","map","getClassName","ResourcePanel","toFixed","NavButton","selected","PanelSelector","onChangePanel","KnowledgeTransaction","StudentKnowledge","Profit","BetterShovels","BloodWard","ResearchLab","assignStudentsStudy","removeStudentsStudy","CorePanel","clock","state","activePanel","setState","currencyName","currencyAmount","transaction","panelKey","clearClock","location","reload","save","clearSave","makePurchase","addCurrency","changeActivePanel","App","Provider","value","Boolean","window","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.7514eaa5.chunk.js","sourcesContent":["import {GameState} from \"./game-state\";\nimport {MAX_LOG_SIZE} from \"../config/constants\";\n\nexport const ACHIEVEMENT_ENTRY_TYPE = \"ACHIEVEMENT\";\nexport const COMMON_ENTRY_TYPE = \"COMMON\";\nexport const BLOOD_ENTRY_TYPE = \"BLOOD\";\n\nexport type DetailedEntry = {\n    entry: string,\n    entryType: string,\n}\n\nexport function addJournalEntry(gameState: GameState, entry: string){\n    gameState.journalState.entries.push({\n        entry: entry,\n        entryType: COMMON_ENTRY_TYPE\n    });\n    if(gameState.journalState.entries.length >= MAX_LOG_SIZE) {\n        gameState.journalState.entries.shift();\n    }\n    return gameState;\n}\n\nexport function addDetailedJournalEntry(gameState: GameState, entry: DetailedEntry){\n    gameState.journalState.entries.push(entry);\n    if(gameState.journalState.entries.length >= MAX_LOG_SIZE) {\n        gameState.journalState.entries.shift();\n    }\n    return gameState;\n}\n\nexport function clearJournal(gameState: GameState) {\n    gameState.journalState.entries = [];\n}\n","export const MIN_SAVE_REWARD_TIME = 24;\nexport const TICK_SPEED = 50;\nexport const SECONDS_PER_EVENT_CHECK = 5;\nexport const MAX_LOG_SIZE = 25;\n\n// Panel Keys\nexport const SETTINGS_PANEL_KEY = \"SETTINGS\";\nexport const GENERATORS_PANEL_KEY = \"GENERATORS\";\nexport const LAB_KEY = \"LAB\";\n","import {COMMON_ENTRY_TYPE, DetailedEntry} from \"./journal\";\n\nexport class GameState {\n    resourceState: ResourceState = new ResourceState();\n    jobAssignments: JobAssignments = new JobAssignments();\n    journalState: JournalState = new JournalState();\n    saveTime: Date = new Date();\n    settings: SettingsState = new SettingsState();\n    achievements: Achievements = new Achievements();\n    researchState: ResearchState = new ResearchState();\n}\n\nexport class ResourceState {\n    relics: number = 0;\n    relicGenerator: number = 0;\n    students: number = 0;\n    knowledge: number = 0;\n    blood: number = 0;\n    money: number = 0;\n    fame: number = 0;\n    whispers: number = 0;\n}\n\nexport class JobAssignments {\n    gatherRelics: number = 0;\n    studyRelics: number = 0;\n}\n\nexport class JournalState {\n    entries: DetailedEntry[] = [{\n        entry: \"The new dig site lays before me, I wonder what treasures lay yet unearthed?\",\n        entryType: COMMON_ENTRY_TYPE\n    }];\n}\n\nexport class SettingsState {\n    darkMode: boolean = true;\n}\n\nexport class Achievements {\n    labUnlocked: boolean = false;\n}\n\nexport class ResearchState {\n    studentKnowledge: boolean = false;\n    profiteering: boolean = false;\n    betterShovels: boolean = false;\n    bloodWard: boolean = false;\n}\n\nexport function mergeStateWithDefault(gameState: GameState): GameState {\n    const newState = {...new GameState(), ...gameState};\n    newState.resourceState = {...newState.resourceState, ...gameState.resourceState};\n    newState.jobAssignments = {...newState.jobAssignments, ...gameState.jobAssignments};\n    newState.journalState = {...newState.journalState, ...gameState.journalState};\n    newState.saveTime = gameState.saveTime;\n    newState.settings = {...newState.settings, ...gameState.settings};\n    newState.achievements = {...newState.achievements, ...gameState.achievements};\n    newState.researchState = {...newState.researchState, ...gameState.researchState};\n\n    return newState;\n}\n","import {GameState, mergeStateWithDefault} from \"./game-state\";\nimport {addJournalEntry} from \"./journal\";\n\nexport function saveGameExists() {\n    return !!localStorage.getItem(\"RelicsSave\");\n}\n\nexport function loadSave() {\n    const string = localStorage.getItem(\"RelicsSave\");\n    const save =  string ? JSON.parse(atob(string)) : null;\n    return mergeStateWithDefault(save);\n}\n\nexport function newSave(): GameState {\n    return new GameState();\n}\n\nexport function saveGame(gameState: GameState, manualSave: boolean = false) {\n    gameState.saveTime = new Date();\n    if(manualSave) addJournalEntry(gameState, \"Game Saved\");\n    localStorage.setItem(\"RelicsSave\", btoa(JSON.stringify(gameState)));\n}\n\n\nexport function exportSave(gameState: GameState) {\n    saveGame(gameState);\n    // TODO: export\n}\n\nexport function importSave(gameState: GameState) {\n    saveGame(gameState);\n    // TODO: import\n}\n","import {GameState } from \"../core/game-state\";\n\nexport class Transaction {\n    static isValidPurchase = (gameState: GameState, amount: number): boolean => false ;\n    static commitTransaction = (gameState: GameState, amount: number): GameState => {return gameState};\n    static updateClock: boolean = false;\n}\n","import { Transaction } from \"../Transaction\";\nimport {GameState} from \"../../core/game-state\";\nimport React from \"react\";\n\nexport class StudentTransaction extends Transaction{\n    updateClock = false;\n\n    static commitTransaction(gameState: GameState, amount: number): GameState {\n        if(StudentTransaction.isValidPurchase(gameState, amount)) {\n            const currCost = StudentTransaction.getCost(gameState, amount);\n\n            gameState.resourceState.relics -= currCost;\n            gameState.resourceState.students += amount;\n        }\n        return gameState;\n    }\n\n    static isValidPurchase(gameState: GameState, amount: number): boolean {\n        const currCost = StudentTransaction.getCost(gameState, amount);\n\n        return gameState.resourceState.relics >= currCost;\n    }\n\n    static getCost(gameState: GameState, purchaseAmount: number) {\n        let sum = 0;\n        let theoreticalAmt = gameState.resourceState.students || 0;\n        for (let i = 0; i < purchaseAmount; i++) {\n            sum += 10 + theoreticalAmt * 5;\n            theoreticalAmt++;\n        }\n        return sum;\n    }\n\n    static buildTooltip(gameState: GameState): any {\n        return (\n            <div className=\"relics-tooltip\">\n                <div className=\"relics-tooltip__description\">\n                    Hire some students to dust off relics for you.\n                    They work for relics.\n                </div>\n                <div className=\"relics-tooltip__cost\">\n                    <div>Relics: {StudentTransaction.getCost(gameState, 1)}</div>\n                </div>\n            </div>\n        );\n    }\n}\n","import {GameState} from \"../core/game-state\";\n\nexport function assignGatherers(amount: number, gameState: GameState){\n    // Cache available in the future?\n    if(countAvailableStudents(gameState) >= amount) {\n        gameState.jobAssignments.gatherRelics += amount;\n    }\n}\n\nexport function removeGatherers(amount: number, gameState: GameState){\n    // Cache available in the future?\n    gameState.jobAssignments.gatherRelics -= amount;\n    if(gameState.jobAssignments.gatherRelics < 0) gameState.jobAssignments.gatherRelics = 0;\n}\n\nexport function assignStudyRelics(amount: number, gameState: GameState){\n    // Cache available in the future?\n    console.log(gameState)\n    if(countAvailableStudents(gameState) >= amount) {\n        gameState.jobAssignments.studyRelics += amount;\n    }\n}\n\nexport function removeStudyRelics(amount: number, gameState: GameState){\n    // Cache available in the future?\n    gameState.jobAssignments.studyRelics -= amount;\n    if(gameState.jobAssignments.studyRelics < 0) gameState.jobAssignments.studyRelics = 0;\n}\n\nexport function countAvailableStudents(gameState: GameState) {\n    const assignedStudents = (gameState.jobAssignments.gatherRelics || 0)\n        + (gameState.jobAssignments.studyRelics || 0);\n    return gameState.resourceState.students - assignedStudents;\n}\n","import React from \"react\";\nimport ReactTooltip from \"react-tooltip\";\n\ntype RelicsButtonProps = {\n  onClick: any;\n  id?: string; // Must be provided for tooltip to work\n  disabled?: any;\n  tooltip?: any;\n  compact?: boolean;\n  className?: string;\n}\n\nexport class RelicsButton extends React.Component<RelicsButtonProps> {\n\n    render() {\n        const { tooltip, id, children, disabled, onClick, compact } = this.props;\n        let className = \"relics-button\";\n        if(disabled) className += \" relics-button--disabled\";\n        if(compact) className += \" relics-button--compact\";\n        if(this.props.className) className += \" \" + this.props.className;\n\n        const clickFunc = disabled ? () => {} : onClick;\n        const dataTipAttr = {};\n        if(tooltip)\n        {\n            // @ts-ignore\n            dataTipAttr['data-tip'] = '';\n            // @ts-ignore\n            dataTipAttr['data-for'] = id;\n        }\n        return (\n            <span { ...dataTipAttr} id={id} className={className} onClick={clickFunc}>\n                {children}\n                {tooltip &&\n                    <ReactTooltip id={id} place=\"bottom\" effect=\"solid\">\n                        {tooltip}\n                    </ReactTooltip>\n                }\n            </span>\n        )\n    }\n}\n","import React from \"react\";\nimport {RelicsButton} from \"./relicsButton\";\nimport ReactTooltip from \"react-tooltip\";\n\ntype AssignWorkerOptionProps = {\n    id?:string,\n    tooltip?: string,\n    assignWorkers: any,\n    removeWorkers: any,\n    currentlyAssigned: number,\n    availableWorkers: number,\n}\n\nexport class AssignWorkerOptions extends React.Component<AssignWorkerOptionProps>{\n    render() {\n        const {\n            id,\n            tooltip,\n            children,\n            assignWorkers,\n            removeWorkers,\n            currentlyAssigned,\n            availableWorkers,\n        } = this.props;\n\n        const dataTipAttr = {};\n        if(tooltip)\n        {\n            // @ts-ignore\n            dataTipAttr['data-tip'] = '';\n            // @ts-ignore\n            dataTipAttr['data-for'] = id;\n        }\n        return (\n            <span { ...dataTipAttr} id={id} >\n                {children}: {currentlyAssigned || 0}\n                <span>\n                    <RelicsButton\n                        compact={true}\n                        disabled={currentlyAssigned <= 0}\n                        onClick={() => removeWorkers(1)}\n                    >\n                        -\n                    </RelicsButton>\n                    <RelicsButton\n                        compact={true}\n                        disabled={availableWorkers <= 0}\n                        onClick={() => assignWorkers(1)}>\n                        +\n                    </RelicsButton>\n                    <RelicsButton\n                        compact={true}\n                        disabled={availableWorkers <= 0}\n                        onClick={() => assignWorkers(availableWorkers)}>\n                        <u>+</u>\n                    </RelicsButton>\n                </span>\n                {tooltip &&\n                    <ReactTooltip id={id} place=\"bottom\" effect=\"solid\">\n                        {tooltip}\n                    </ReactTooltip>\n                }\n            </span>\n        );\n    }\n}\n","import * as React from \"react\";\nimport { GameState } from \"../core/game-state\";\nimport {StudentTransaction} from \"../economy/transactions/studentTransaction\";\nimport {assignGatherers, countAvailableStudents, removeGatherers} from \"../economy/jobAssignments\";\nimport {RelicsButton} from \"../shared/relicsButton\";\nimport {AssignWorkerOptions} from \"../shared/AssignWorkerOptions\";\n\ntype GeneratorProps = {\n    gameState: GameState,\n    onPurchase: any,\n    onAddCurrency: any\n}\n\nexport class RelicPanel extends React.Component<GeneratorProps> {\n    assignGather(amount: number) {\n        const { gameState } = this.props;\n        assignGatherers(amount, gameState);\n    }\n    removeGather(amount: number) {\n        const { gameState } = this.props;\n        removeGatherers(amount, gameState);\n    }\n\n    render() {\n        const { gameState, onAddCurrency, onPurchase } = this.props;\n        const availableStudents = countAvailableStudents(gameState);\n        const studentsHired = gameState.resourceState.students >= 1;\n\n        return (\n            <div className=\"panel--left-align\">\n                <div className=\"button-container\">\n                    <RelicsButton onClick={() => onAddCurrency(\"relics\", 1)}>Look for relics</RelicsButton>\n                </div>\n                {studentsHired &&\n                    <AssignWorkerOptions\n                        assignWorkers={(amount: number) =>this.assignGather(amount)}\n                        removeWorkers={(amount:number) => this.removeGather(amount)}\n                        currentlyAssigned={gameState.jobAssignments.gatherRelics}\n                        availableWorkers={availableStudents}>\n                        Gathering Relics\n                    </AssignWorkerOptions>\n                }\n                <br/>\n                <div>\n                    <div className=\"button-container\">\n                        <RelicsButton\n                                disabled={!StudentTransaction.isValidPurchase(gameState, 1)}\n                                onClick={() => onPurchase(1, StudentTransaction.commitTransaction)}\n                                id=\"hireStudent\"\n                                tooltip={StudentTransaction.buildTooltip(gameState)}\n                        >\n                            Hire a Student\n                        </RelicsButton>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n","import React from \"react\";\n\nexport const themes = {\n    light: {\n        themeClass: 'app app--light',\n    },\n    dark: {\n        themeClass: 'app app--dark',\n    },\n};\n\nexport const ThemeContext = React.createContext({\n    theme: themes.dark, // default value\n    toggleTheme: () => {\n    },\n});","import {GameState} from \"../core/game-state\";\nimport {ThemeContext} from \"../layout/theme-context\";\nimport React from \"react\";\nimport {RelicsButton} from \"../shared/relicsButton\";\n\ntype SettingsProps = {\n    gameState: GameState,\n    onSave: any,\n    onClearSave: any\n}\n\nexport class Settings extends React.Component<SettingsProps> {\n    onToggleTheme(toggleTheme: any) {\n        const { gameState } = this.props;\n        gameState.settings.darkMode = !gameState.settings.darkMode;\n        toggleTheme();\n    }\n    render() {\n        const {onSave, onClearSave} = this.props;\n\n        return (\n            <div>\n                <div className={\"button-container\"}>\n                    <RelicsButton onClick={() => onSave()}>Save</RelicsButton>\n                    <RelicsButton onClick={() => onClearSave()}>Clear Save</RelicsButton>\n                </div>\n                <div>\n                    <ThemeContext.Consumer>\n                        {({theme, toggleTheme}) => (\n                            <div className={\"button-container\"}>\n                                <RelicsButton onClick={() => this.onToggleTheme(toggleTheme)}>\n                                    Toggle Dark Mode\n                                </RelicsButton>\n                            </div>\n                        )}\n                    </ThemeContext.Consumer>\n                </div>\n                <p>Relics - A game by bearhanded.</p>\n                <p><a href=\"https://github.com/bearhanded/relics\">GitHub</a></p>\n            </div>\n        );\n    }\n}\n","import {GameState} from \"./game-state\";\nimport {addDetailedJournalEntry, addJournalEntry, BLOOD_ENTRY_TYPE} from \"./journal\";\nimport {countAvailableStudents, removeGatherers, removeStudyRelics} from \"../economy/jobAssignments\";\n\nexport function randomEventsForDuration(gameState: GameState, amount: number) {\n    for (let i = 0; i < amount; i++) {\n        randomEvent(gameState);\n    }\n}\n\nexport function randomEvent(gameState: GameState) {\n    const diceRoll = roll1d100();\n    if(diceRoll >= 95) {\n        addJournalEntry(gameState, \"The wind blows across the dusty plain\");\n    }\n    if( 10 <= diceRoll && diceRoll <= 15) {\n        addJournalEntry(gameState, \"A stranger shuffles up and hands something to you: +100 Relics!\");\n        gameState.resourceState.relics += 100\n    }\n    if(diceRoll === 1 && gameState.resourceState.students > 2) {\n        // A dark event occurs\n        if(!gameState.researchState.bloodWard) {\n            if (countAvailableStudents(gameState) <= 0) {\n                if (gameState.jobAssignments.gatherRelics >= 1) {\n                    removeGatherers(1, gameState);\n                } else if (gameState.jobAssignments.studyRelics >= 1) {\n                    removeStudyRelics(1, gameState);\n                }\n            }\n            gameState.resourceState.blood ? gameState.resourceState.blood++ : gameState.resourceState.blood = 1;\n            gameState.resourceState.students -= 1;\n\n            addDetailedJournalEntry(gameState, {\n                entry: \"You are short one student.\",\n                entryType: BLOOD_ENTRY_TYPE,\n            });\n        } else {\n            gameState.resourceState.blood ? gameState.resourceState.blood++ : gameState.resourceState.blood = 1;\n            addDetailedJournalEntry(gameState, {\n                entry: \"The ward protects the student in exchange for a drop shed.\",\n                entryType: BLOOD_ENTRY_TYPE,\n            });\n        }\n    }\n}\n\nfunction roll1d100() {\n    return Math.floor(Math.random() * 100 + 1);\n}\n","import {saveGame} from \"./saveService\";\nimport {GameState} from \"./game-state\";\nimport {TICK_SPEED, SECONDS_PER_EVENT_CHECK} from \"../config/constants\";\nimport {randomEventsForDuration} from \"./event-manager\";\n\nexport class GameClock {\n    saveClockId: any;\n    resourceClockId: any;\n    gameState: GameState; // Not readonly, we're emitting the changes for the rest of the app\n    tickRatio: number; // Modified each pass of the clock so that we can deal with running in the background\n    emitTick: any;\n    maxTicks: number;\n    lastTickDate: Date;\n    randomEventTimer = 0;\n\n    constructor(gameState: GameState, onTick: any) {\n        this.saveClockId = setInterval(\n            () => saveGame(gameState),\n            30000\n        );\n        this.gameState = gameState;\n        this.updateState(gameState);\n        this.tickRatio = TICK_SPEED / 1000; // Default: 50ms / 1000ms, multiply by how many per second you want\n        this.maxTicks = (5 * 1000) / TICK_SPEED;\n        this.emitTick = onTick;\n        this.lastTickDate = new Date(gameState.saveTime); //Easy offline progress solution?\n    }\n\n    private calibrate() {\n        const tickTimeStamp = new Date();\n        const seconds = (tickTimeStamp.getTime() - this.lastTickDate.getTime()) / 1000;\n        this.lastTickDate = tickTimeStamp;\n        this.tickRatio = seconds;\n        this.randomEventTimer += seconds;\n    }\n\n    private manageRandomEvent(newState: GameState) {\n        if(this.randomEventTimer >= SECONDS_PER_EVENT_CHECK ) {\n            // every 5s, test for an event\n\n            randomEventsForDuration(newState, Math.floor(this.randomEventTimer / SECONDS_PER_EVENT_CHECK));\n            this.randomEventTimer = 0;\n        }\n    }\n\n    tick() {\n        this.calibrate();\n\n        // Resource Management\n        var newState = {...this.gameState};\n        if(this.gameState.jobAssignments.gatherRelics) {\n            const relicsMultiplier = 1\n                + (this.gameState.researchState.betterShovels ? .5 : 0);\n            newState.resourceState.relics += this.gameState.jobAssignments.gatherRelics*.5*this.tickRatio*relicsMultiplier;\n        }\n        if(this.gameState.jobAssignments.studyRelics && this.gameState.resourceState.relics >= this.gameState.jobAssignments.gatherRelics*10*this.tickRatio) {\n            newState.resourceState.relics -= this.gameState.jobAssignments.studyRelics*10*this.tickRatio;\n            newState.resourceState.knowledge += this.gameState.jobAssignments.studyRelics*.1*this.tickRatio;\n        }\n        if(this.gameState.researchState.profiteering) {\n            // Money accrual\n            this.gameState.resourceState.money += .25*this.tickRatio;\n        }\n\n        // Kick off any events that have transpired\n        this.manageRandomEvent(newState);\n\n        // Save and output\n        this.gameState = newState;\n        this.emitTick(newState);\n    }\n\n    updateState(gameState: GameState) {\n        clearInterval(this.resourceClockId);\n        this.resourceClockId = setInterval(() => this.tick(), TICK_SPEED);\n    }\n\n    clearClock() {\n        clearInterval(this.resourceClockId);\n        clearInterval(this.saveClockId);\n    }\n\n}\n","import * as React from \"react\";\nimport {JournalState} from \"../core/game-state\";\nimport {RelicsButton} from \"../shared/relicsButton\";\nimport {ACHIEVEMENT_ENTRY_TYPE, BLOOD_ENTRY_TYPE, COMMON_ENTRY_TYPE, DetailedEntry} from \"../core/journal\";\n\ntype JournalProps = {\n    journalState: JournalState,\n    clearLog: any\n}\n\nexport class AdventureLog extends React.Component<JournalProps> {\n    getClassName(entry: DetailedEntry) {\n        let className = \"padded-text journal__entry\";\n        switch (entry.entryType) {\n            case ACHIEVEMENT_ENTRY_TYPE:\n                className += \" journal__entry--achievement\";\n                break;\n            case BLOOD_ENTRY_TYPE:\n                className += \" blood-text\";\n                break;\n            case COMMON_ENTRY_TYPE:\n            default:\n        }\n        return className;\n    }\n\n    render() {\n        const { journalState, clearLog } = this.props;\n        const entryList = journalState.entries.slice(0).reverse().map((entry) =>\n            <div className={this.getClassName(entry)}>\n                {entry.entry}\n            </div>\n        );\n        return (\n            <div className=\"panel--left-align journal-panel\">\n                <div className=\"button-container\">\n                    <RelicsButton onClick={() => clearLog()}>Clear Log</RelicsButton>\n                </div>\n                <div className=\"journal\">{entryList}</div>\n            </div>\n        );\n    }\n}\n","import * as React from \"react\";\nimport { GameState } from \"../core/game-state\";\nimport {countAvailableStudents} from \"../economy/jobAssignments\";\n\ntype ResourceProps = {\n    gameState: GameState,\n}\n\nexport class ResourcePanel extends React.Component<ResourceProps> {\n\n    render() {\n        const { gameState } = this.props;\n\n        return (\n            <div>\n                <div className=\"panel--center-align resources__container\">\n                    {!!gameState.resourceState.relics &&\n                        <div>Relics: {gameState.resourceState.relics.toFixed()}</div>}\n                    {gameState.researchState.profiteering &&\n                        <div className=\"money-text\">Money: {gameState.resourceState.money.toFixed()}</div>}\n                    {!!gameState.resourceState.knowledge &&\n                        <div className=\"knowledge-text\">Knowledge: {gameState.resourceState.knowledge.toFixed()}</div>}\n                    {!!gameState.resourceState.blood &&\n                        <div className=\"blood-text\">Blood: {gameState.resourceState.blood.toFixed()}</div>}\n                </div>\n                {!!gameState.resourceState.students &&\n                    <div className=\"panel--center-align resources__container\">\n                        <div>Students: {countAvailableStudents(gameState)}/{gameState.resourceState.students}</div>\n                    </div>\n                }\n            </div>\n        );\n    }\n}\n","import React from \"react\";\n\ntype NavButtonProps = {\n  onClick: any;\n  disabled?: any | undefined;\n  selected?: boolean | undefined;\n}\n\nexport class NavButton extends React.Component<NavButtonProps> {\n\n    render() {\n        let className = \"nav-button\";\n        if(this.props.disabled) className += \" nav-button--disabled\";\n        if(this.props.selected) className += \" nav-button--selected\";\n\n        const clickFunc = this.props.disabled ? () => {} : this.props.onClick;\n        return (\n            <span\n                className={className}\n                onClick={clickFunc}>\n                {this.props.children}\n            </span>\n        )\n    }\n}","import React from \"react\";\nimport {GENERATORS_PANEL_KEY, LAB_KEY, SETTINGS_PANEL_KEY} from \"../config/constants\";\nimport {NavButton} from \"./navButton\";\nimport {GameState} from \"../core/game-state\";\n\ntype PanelSelectorProps = {\n    onChangePanel: any,\n    selected: string,\n    gameState: GameState\n}\nexport class PanelSelector extends React.Component<PanelSelectorProps>{\n    render() {\n        const {onChangePanel, selected, gameState} = this.props;\n        return (\n            <div className={\"nav-panel\"}>\n                <NavButton selected={selected === GENERATORS_PANEL_KEY}\n                           onClick={() => onChangePanel(GENERATORS_PANEL_KEY)}>\n                    Dig Site 1\n                </NavButton>\n                {gameState.resourceState.students >= 10 &&\n                    <NavButton selected={selected === LAB_KEY}\n                               onClick={() => onChangePanel(LAB_KEY)}>\n                        Research Lab\n                    </NavButton>\n                }\n\n                <NavButton selected={selected === SETTINGS_PANEL_KEY}\n                           onClick={() => onChangePanel(SETTINGS_PANEL_KEY)}>\n                    Settings\n                </NavButton>\n            </div>\n        );\n    }\n}\n","import {GameState} from \"../../core/game-state\";\nimport {Transaction} from \"../Transaction\";\nimport React from \"react\";\n\nexport class KnowledgeTransaction extends Transaction {\n    static updateClock = false;\n\n    static commitTransaction(gameState: GameState, amount: number): GameState {\n        if(KnowledgeTransaction.isValidPurchase(gameState, amount)) {\n            const currCost = KnowledgeTransaction.getCost(gameState, amount);\n\n            gameState.resourceState.relics -= currCost;\n            gameState.resourceState.knowledge += amount;\n        }\n        return gameState;\n    }\n\n    static isValidPurchase(gameState: GameState, amount: number): boolean {\n        const currCost = KnowledgeTransaction.getCost(gameState, amount);\n        return gameState.resourceState.relics >= currCost;\n    }\n\n    static getCost(gameState: GameState, purchaseAmount: number) {\n        return 100 * purchaseAmount;\n    }\n\n    static buildTooltip(gameState: GameState): any {\n        return (\n            <div className=\"relics-tooltip\">\n                <div className=\"relics-tooltip__description\">\n                    Peruse your collection, perhaps you can find something useful.\n                </div>\n                <div className=\"relics-tooltip__cost\">\n                    <div>Relics: 100</div>\n                </div>\n            </div>\n        );\n    }\n}\n","import { Transaction } from \"../Transaction\";\nimport {GameState} from \"../../core/game-state\";\nimport React from \"react\";\n\nexport class StudentKnowledge extends Transaction {\n    static updateClock = false;\n\n    static commitTransaction(gameState: GameState, amount: number): GameState {\n        if(StudentKnowledge.isValidPurchase(gameState, amount)) {\n            gameState.resourceState.knowledge -= 10;\n            gameState.researchState.studentKnowledge = true;\n        }\n        return gameState;\n    }\n\n    static isValidPurchase(gameState: GameState, amount: number): boolean {\n        return gameState.resourceState.knowledge >= 10;\n    }\n\n    static buildTooltip(gameState: GameState): any {\n        return (\n            <div className=\"relics-tooltip\">\n                <div className=\"relics-tooltip__description\">\n                    I know enough about this to teach others to do the work, albeit at a reduced efficiency.\n                </div>\n                <div className=\"relics-tooltip__cost\">\n                    <div className=\"knowledge-text\">Knowledge: 10</div>\n                </div>\n            </div>\n        );\n    }\n}\n","import {Transaction} from \"../Transaction\";\nimport {GameState} from \"../../core/game-state\";\nimport {ACHIEVEMENT_ENTRY_TYPE, addDetailedJournalEntry} from \"../../core/journal\";\nimport React from \"react\";\n\nexport class Profit extends Transaction {\n    static updateClock = false;\n\n    static commitTransaction(gameState: GameState, amount: number): GameState {\n        if(Profit.isValidPurchase(gameState, amount)) {\n            gameState.resourceState.knowledge -= 20;\n            gameState.researchState.profiteering = true;\n            addDetailedJournalEntry(gameState, {\n                entry: \"A patron finds your work interesting, and provides a slow but steady drip of funding. Relic speed x 1.5.\",\n                entryType: ACHIEVEMENT_ENTRY_TYPE\n            });\n        }\n        return gameState;\n    }\n\n    static isValidPurchase(gameState: GameState, amount: number): boolean {\n        return gameState.resourceState.knowledge >= 20;\n    }\n\n    static buildTooltip(gameState: GameState): any {\n        return (\n            <div className=\"relics-tooltip\">\n                <div className=\"relics-tooltip__description\">\n                    With your student's help, you know enough now to fund this endeavor.\n                    A little embellishment never hurt...\n                </div>\n                <div className=\"relics-tooltip__cost\">\n                    <div className=\"knowledge-text\">Knowledge: 20</div>\n                </div>\n            </div>\n        );\n    }\n}","import {Transaction } from \"../Transaction\";\nimport {GameState} from \"../../core/game-state\";\nimport {ACHIEVEMENT_ENTRY_TYPE, addDetailedJournalEntry} from \"../../core/journal\";\nimport React from \"react\";\n\nexport class BetterShovels extends Transaction {\n    static updateClock = false;\n\n    static commitTransaction(gameState: GameState, amount: number): GameState {\n        if(BetterShovels.isValidPurchase(gameState, amount)) {\n            gameState.resourceState.money -= 50;\n            gameState.researchState.betterShovels = true;\n            addDetailedJournalEntry(gameState, {\n                entry: \"A patron finds your work interesting, and provides a slow but steady drip of funding.\",\n                entryType: ACHIEVEMENT_ENTRY_TYPE\n            });\n        }\n        return gameState;\n    }\n\n    static isValidPurchase(gameState: GameState, amount: number): boolean {\n        return gameState.resourceState.money >= 50;\n    }\n\n    static buildTooltip(gameState: GameState): any {\n        return (\n            <div className=\"relics-tooltip\">\n                <div className=\"relics-tooltip__description\">\n                    Buy the team their very first shovel. It's better than none.\n                </div>\n                <div className=\"relics-tooltip__cost\">\n                    <div className=\"money-text\">Money: 50</div>\n                </div>\n            </div>\n        );\n    }\n}\n","import React from \"react\";\nimport {Transaction} from \"../Transaction\";\nimport {GameState} from \"../../core/game-state\";\nimport {addDetailedJournalEntry, BLOOD_ENTRY_TYPE} from \"../../core/journal\";\n\nexport class BloodWard extends Transaction {\n    static updateClock = false;\n\n    static commitTransaction(gameState: GameState, amount: number): GameState {\n        if(BloodWard.isValidPurchase(gameState, amount)) {\n            gameState.resourceState.relics -= 100;\n            gameState.resourceState.blood -= 1;\n            gameState.resourceState.knowledge -= 20;\n\n            gameState.researchState.bloodWard = true;\n            addDetailedJournalEntry(gameState, {\n                entry: \"Following instructions on the ruins, you assemble a ward. That should protect this place.\",\n                entryType: BLOOD_ENTRY_TYPE\n            });\n        }\n        return gameState;\n    }\n\n    static isValidPurchase(gameState: GameState, amount: number): boolean {\n        return gameState.resourceState.blood >= 1 && gameState.resourceState.knowledge >= 20 && gameState.resourceState.relics >= 100;\n    }\n\n    static buildTooltip(gameState: GameState): any {\n        return (\n            <div className=\"relics-tooltip\">\n                <div className=\"relics-tooltip__description\">\n                    The excavated ruins are carved with a repeating pattern, and no one has disappeared in there yet.\n                </div>\n                <div className=\"relics-tooltip__cost\">\n                    <div>Relics: 100</div>\n                    <div className=\"knowledge-text\">Knowledge: 20</div>\n                    <div className=\"blood-text\">Blood: 1</div>\n                </div>\n            </div>\n        );\n    }\n}","import React from \"react\";\nimport {GameState} from \"../core/game-state\";\nimport {labFirstUnlock} from \"../core/achievements\";\nimport {RelicsButton} from \"../shared/relicsButton\";\nimport {KnowledgeTransaction} from \"../economy/transactions/KnowledgeTransaction\";\nimport {StudentKnowledge} from \"../economy/researches/studentKnowledge\";\nimport {AssignWorkerOptions} from \"../shared/AssignWorkerOptions\";\nimport {\n    assignStudyRelics,\n    countAvailableStudents,\n    removeStudyRelics\n} from \"../economy/jobAssignments\";\nimport ReactTooltip from \"react-tooltip\";\nimport {Profit} from \"../economy/researches/profit\";\nimport {BetterShovels} from \"../economy/researches/betterShovels\";\nimport {BloodWard} from \"../economy/researches/bloodWard\";\n\ntype LabProps = {\n    gameState: GameState;\n    onPurchase: any;\n}\n\nexport class ResearchLab extends React.Component<LabProps> {\n    componentDidMount(): void {\n        labFirstUnlock(this.props.gameState);\n    }\n\n    assignStudentsStudy = (amount: number) => assignStudyRelics(amount, this.props.gameState);\n    removeStudentsStudy = (amount: number) => removeStudyRelics(amount, this.props.gameState);\n\n    render() {\n        const { gameState, onPurchase } = this.props;\n        const availableStudents = countAvailableStudents(gameState);\n        return (\n            <div>\n                <div className=\"button-container\">\n                    <RelicsButton\n                        disabled={!KnowledgeTransaction.isValidPurchase(gameState, 1)}\n                        onClick={() => onPurchase(1, KnowledgeTransaction.commitTransaction)}\n                        id=\"studyRelics\"\n                        tooltip={KnowledgeTransaction.buildTooltip(gameState)}\n                    >\n                        Study Relics\n                    </RelicsButton>\n                </div>\n                {gameState.researchState.studentKnowledge &&\n                    <div>\n                        <AssignWorkerOptions\n                            id=\"studentsStudying\"\n                            assignWorkers={(amount: number) =>this.assignStudentsStudy(amount)}\n                            removeWorkers={(amount:number) => this.removeStudentsStudy(amount)}\n                            currentlyAssigned={gameState.jobAssignments.studyRelics}\n                            availableWorkers={availableStudents}\n                            tooltip={\"Produces 1 knowledge per 100 relics.\"}\n                        >\n                            Student Studying Relics\n                        </AssignWorkerOptions>\n                    </div>\n                }\n\n                <div>\n                    <p>Research</p>\n                    {!gameState.researchState.studentKnowledge && (\n                            <RelicsButton\n                                disabled={!StudentKnowledge.isValidPurchase(gameState, 1)}\n                                onClick={() => onPurchase(1, StudentKnowledge.commitTransaction)}\n                                id=\"researchStudyRelics\"\n                                className={\"knowledge-button\"}\n                                tooltip={StudentKnowledge.buildTooltip(gameState)}\n                            >\n                                Studious Students\n                            </RelicsButton>\n                    )}\n                    {(gameState.researchState.studentKnowledge && !gameState.researchState.profiteering) && (\n                        <RelicsButton\n                            disabled={!Profit.isValidPurchase(gameState, 1)}\n                            onClick={() => onPurchase(1, Profit.commitTransaction)}\n                            id=\"profiteering\"\n                            className={\"knowledge-button\"}\n                            tooltip={Profit.buildTooltip(gameState)}\n                        >\n                            Procure Funding\n                        </RelicsButton>\n                    )}\n                    {(gameState.researchState.profiteering && !gameState.researchState.betterShovels) && (\n                        <RelicsButton\n                            disabled={!BetterShovels.isValidPurchase(gameState, 1)}\n                            onClick={() => onPurchase(1, BetterShovels.commitTransaction)}\n                            id=\"shovel1\"\n                            className={\"money-button\"}\n                            tooltip={BetterShovels.buildTooltip(gameState)}\n                        >\n                            Better Shovels\n                        </RelicsButton>\n                    )}\n                    {(gameState.researchState.profiteering && !gameState.researchState.bloodWard) && (\n                        <RelicsButton\n                            disabled={!BloodWard.isValidPurchase(gameState, 1)}\n                            onClick={() => onPurchase(1, BloodWard.commitTransaction)}\n                            id=\"blood-ward\"\n                            className={\"blood-button\"}\n                            tooltip={BloodWard.buildTooltip(gameState)}\n                        >\n                            Inscribe a ward\n                        </RelicsButton>\n                    )}\n                </div>\n            </div>\n        );\n    }\n}\n","import {GameState} from \"./game-state\";\nimport {ACHIEVEMENT_ENTRY_TYPE, addDetailedJournalEntry} from \"./journal\";\n\nexport function labFirstUnlock(gameState: GameState) {\n    if(!gameState.achievements.labUnlocked) {\n        gameState.achievements.labUnlocked = true;\n        addDetailedJournalEntry(gameState, {\n            entry: \"With your new found stash of relics, you retreat to your personal laboratory!\",\n            entryType: ACHIEVEMENT_ENTRY_TYPE,\n        });\n    }\n}\n","import * as React from \"react\";\nimport {loadSave, newSave, saveGame, saveGameExists} from \"./saveService\";\nimport {RelicPanel} from \"../panels/relicPanel\";\nimport {Settings} from \"../panels/settings\";\nimport {GameState} from \"./game-state\";\nimport {GameClock} from \"./game-clock\";\nimport {GENERATORS_PANEL_KEY, LAB_KEY, SETTINGS_PANEL_KEY} from \"../config/constants\";\nimport {addJournalEntry, clearJournal} from \"./journal\";\nimport {AdventureLog} from \"../panels/adventureLog\";\nimport {ResourcePanel} from \"../panels/resourcePanel\";\nimport {PanelSelector} from \"../layout/panelSelector\";\nimport {ResearchLab} from \"../panels/lab\";\n\ntype CoreProps = {}\ntype CoreState = {\n    gameState: GameState,\n    activePanel: string\n}\n\nexport class CorePanel extends React.Component<CoreProps, CoreState> {\n    clock: GameClock | undefined;\n    readonly state = {\n        gameState: saveGameExists() ? loadSave() : newSave(),\n        activePanel: GENERATORS_PANEL_KEY\n    };\n\n    componentDidMount(): void {\n        // TODO: Calculate offline progress before starting clock\n        this.clock = new GameClock(this.state.gameState, (newState: GameState) => this.onTick(newState));\n        this.setState({activePanel: GENERATORS_PANEL_KEY});\n    }\n\n    onTick(newState: GameState) {\n        this.setState({gameState: newState});\n    }\n\n    addCurrency(currencyName: string, currencyAmount: number) {\n        // TODO: Abstract this for manual action & future FAME multiplier\n        const newState = {...this.state.gameState};\n        newState.resourceState.relics += currencyAmount;\n        addJournalEntry(newState, \"You dust off some potsherds.\");\n        this.setState({gameState: newState})\n    }\n\n    makePurchase(purchaseAmount: number, transaction: any) {\n        let newState = {...this.state.gameState};\n        newState = transaction(newState, purchaseAmount);\n\n        this.setState({gameState: newState});\n        // if(purchaseType.updateClock) {\n        //     // @ts-ignore\n        //     this.clock.updateState(newState);\n        // }\n    }\n\n    clearLog() {\n        clearJournal(this.state.gameState)\n    }\n\n    changeActivePanel(panelKey: string) {\n        this.setState({activePanel: panelKey});\n    }\n\n    save() {\n        const newState = {...this.state.gameState};\n        this.setState({gameState: newState});\n        saveGame(newState, true);\n    }\n\n    clearSave() {\n        // @ts-ignore\n        this.clock.clearClock();\n        const newState = newSave();\n        newState.saveTime = new Date();\n        this.setState({gameState: newState});\n        saveGame(newState);\n        // eslint-disable-next-line no-restricted-globals\n        location.reload();\n    }\n\n    render() {\n        let activePanel;\n        switch (this.state.activePanel) {\n            case SETTINGS_PANEL_KEY:\n                activePanel = (\n                    <Settings\n                        gameState={this.state.gameState}\n                        onSave={() => this.save()}\n                        onClearSave={() => this.clearSave()}\n                    />\n                );\n                break;\n            case LAB_KEY:\n                activePanel = (\n                    <ResearchLab\n                        gameState={this.state.gameState}\n                        onPurchase={(purchaseAmount: number, transaction: any) => this.makePurchase(purchaseAmount, transaction)}\n                    />\n                );\n                break;\n            case GENERATORS_PANEL_KEY:\n            default:\n                activePanel = (\n                    <RelicPanel\n                        gameState={this.state.gameState}\n                        onAddCurrency={(currencyName: string, currencyAmount: number) => this.addCurrency(currencyName, currencyAmount)}\n                        onPurchase={(purchaseAmount: number, transaction: any) => this.makePurchase(purchaseAmount, transaction)}\n                    />\n                );\n        }\n\n        return (\n            <div className=\"core-panel\">\n                <div className=\"core-panel__flex\">\n                    <div className=\"core-panel__left-column\">\n                        <AdventureLog clearLog={() => this.clearLog()} journalState={this.state.gameState.journalState}/>\n                    </div>\n                    <div className=\"core-panel__center-column\">\n                        <PanelSelector onChangePanel={(panelKey: string) => this.changeActivePanel(panelKey)}\n                            selected={this.state.activePanel}\n                            gameState={this.state.gameState}\n                        />\n                        {activePanel}\n                    </div>\n                    <div className=\"core-panel__right-column\">\n                        <ResourcePanel gameState={this.state.gameState}/>\n                    </div>\n                </div>\n\n            </div>\n        );\n    }\n}\n","import React from 'react';\nimport './app.scss';\nimport {CorePanel} from \"./core/corePanel\";\nimport {ThemeContext, themes} from \"./layout/theme-context\";\nimport {loadSave, newSave, saveGameExists} from \"./core/saveService\";\n\ntype AppProps = {}\ntype AppState = {\n    theme: any,\n    toggleTheme: () => {}\n}\n\nclass App extends React.Component<AppProps, AppState> {\n    readonly state: AppState;\n    toggleTheme: any;\n\n    constructor(props: any) {\n        super(props);\n        const darkMode = saveGameExists() && loadSave().settings.darkMode;\n\n        this.toggleTheme = () => {\n            this.setState(state => ({\n                theme:\n                    state.theme === themes.dark\n                        ? themes.light\n                        : themes.dark,\n            }));\n        };\n\n        this.state = {\n            theme: darkMode ? themes.dark : themes.light,\n            toggleTheme: this.toggleTheme,\n        };\n\n    }\n\n    render() {\n        return (\n                <ThemeContext.Provider value={this.state}>\n                    <div className={this.state.theme.themeClass}>\n                        <CorePanel/>\n                    </div>\n                </ThemeContext.Provider>\n        );\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resource-display are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './app';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}